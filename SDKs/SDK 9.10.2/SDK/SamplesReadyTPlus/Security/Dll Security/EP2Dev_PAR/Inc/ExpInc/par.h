/*!
 ------------------------------------------------------------------------------
                  INGENICO Technical Software Department
 ------------------------------------------------------------------------------
 Copyright (c) 2013, Ingenico.
 28-32 boulevard de Grenelle 75015 Paris, France.
 All rights reserved.

  This source program is the property of INGENICO Company and may not be copied
  in any form or by any means, whether in part or in whole, except under license
  expressly granted by INGENICO company

  All copies of this program, whether in part or in whole, and
  whether modified or not, must display this and all other
  embedded copyright and ownership notices in full.
 ------------------------------------------------------------------------------

 Project : Easy Path to Dev
 Module  : PAR - Parameter Module v01.00

 @file      par.h
 @brief     This file provides the API for Parameter Module.
 @brief     This file contains the internal implementation of PAR Module.
 @date      15/05/2013

 ------------------------------------------------------------------------------
 */
#ifndef __PAR_H__
#define __PAR_H__

#ifdef __cplusplus
extern "C" {
#endif

//This file is automatically generated from "param.pml" file
//Don't modify it manually!
  /** \addtogroup PAR Parameter Management Module
 *
 * @{
 */

#define Major_Release 01
#define Minor_Release 00

  /** \weakgroup PAR_API PAR APIs
 *
 * @{
 */

  /** \weakgroup PAR_API_ErrorCodes PAR Error Codes
 *
 * @{
 */

#define PAR_OK 0 /**< No error encountered */
#define PAR_INVALID_HANDLE (-201) /**< Invalid parser */
#define PAR_BAD_PARAMETER (-202) /**< Bad input parameter (NULL pointer...) */
#define PAR_ERROR_PARSING (-203) /**< XML buffer is badly formatted */
#define PAR_ERROR_TAG_MISMATCH (-203) /**< Start tag and End tag of an element are not the same */
#define PAR_ERROR_SEVERAL_ROOT_TAGS (-205) /**< Several root tags have been found in the buffer */
#define PAR_ERROR_MEMORY (-206) /**< Not enough memory */
#define PAR_ERROR_FILE_ACCESS (-207) /**< Error when accessing the file */
#define PAR_TAG_NOT_FOUND (-208) /**< Tag not found */
#define PAR_UNKNOWN_ERROR (-209) /**< Unknown Error */
#define PAR_FILE_NOT_FOUND (-210) /**< File not found */
#define PAR_ACCESS_DENIED (-211) /**< Access Denied, Read-only access  */
#define PAR_NOT_INITIALIZED (-212) /**< Parameter data not Initialized, PAR_Import must be performed first */
#define PAR_INVALID_DATA (-213) /**< Invalid Parameter data being Set */
#define PAR_INVALID_DATA_LEN (-214) /**< Invalid Parameter data length being Set */

/** @} */


  enum etrcOutput
{
    trcOutput_telium = 0,
    trcOutput_remoteDbg = 1,
    trcOutput_internalFile = 2,
    trcOutput_externalFileUsb = 3,
    trcOutput_externalFileMmc = 4,
    trcOutput_printer = 5,
    trcOutput_udpIp = 6,
    trcOutputEnd,
};

enum esecurePart
{
    securePart_Pincode = 0,
    securePart_Card = 1,
    securePart_Ciphering = 2,
    securePart_Keyboard = 3,
    securePart_Display = 4,
    securePartEnd
};

enum eterminalBooster
{
    terminalBooster_Booster1 = 0,
    terminalBooster_Booster2 = 1,
    terminalBoosterEnd
};

enum eperipheralBooster
{
    peripheralBooster_iappDefName = 0,
    peripheralBooster_iappUsbName = 1,
    peripheralBooster_iappUsbUsrName = 2,
    peripheralBoosterEnd
};

enum epinpadBooster
{
    pinpadBooster_Booster1 = 0,
    pinpadBooster_Booster2 = 1,
    pinpadBoosterEnd
};


/** \weakgroup PAR_API_ParFunctions Par Functions
 *
 * @{
 */

/** \brief Copy the contents of the specified XML path and overwrite the contents of the existing
 * XML Parameter File. The parameter file will be initialized and the structure updated.
 *
 * \param[in] path The XML parameter path
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_BAD_PARAMETER = Bad Input parameter.
 *      - \ref PAR_INVALID_HANDLE = Invalid Parser.
 *      - \ref PAR_ERROR_PARSING = XML Parameter file is badly formatted.
 *      - \ref PAR_ERROR_TAG_MISMATCH = Start tag and End tag of an element are not the same.
 *      - \ref PAR_ERROR_SEVERAL_ROOT_TAGS = Several root tags have been found in the buffer.
 *      - \ref PAR_ERROR_MEMORY = Not enough memory.
 *      - \ref PAR_ERROR_FILE_ACCESS = Error when accessing the file.
 *      - \ref PAR_UNKNOWN_ERROR = Unknown error occured.
 */
int PAR_Import(char *path);

/** \brief Copy the contents of the XML Parameter File into the specified XML path
 *
 * \param[in] path The XML parameter path
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_ERROR_FILE_ACCESS = Error when accessing the file.
 */
int PAR_Export(char *path);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] pinKey pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_PinKeyGet(char **pinKey);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] pinKey parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_PinKeySet(char *pinKey);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] macKey pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_MacKeyGet(char **macKey);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] macKey parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_MacKeySet(char *macKey);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] pinMasterKey pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_PinMasterKeyGet(char **pinMasterKey);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] pinMasterKey parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_PinMasterKeySet(char *pinMasterKey);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] macMasterKey pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_MacMasterKeyGet(char **macMasterKey);

/** \brief 
 * It contains Pin Key
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] macMasterKey parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_MacMasterKeySet(char *macMasterKey);

/** \brief 
 * It contains Root Key
 * The parameter's datatype is alphanumeric with READWRITE access
 * \param[out] rootKey pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_RootKeyGet(char **rootKey);

/** \brief 
 * It contains Root Key
 * The parameter's datatype is alphanumeric with READWRITE access
 * \param[in] rootKey parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_RootKeySet(char *rootKey);

/** \brief Obtain the parameter data Trace Output

 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] trcOutput pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_TrcOutputGet(enum etrcOutput *trcOutput);

/** \brief Save the parameter data Trace Output

 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] trcOutput parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_TrcOutputSet(enum etrcOutput trcOutput);

/** \brief 
 * It contains Secure Part Area
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be obtained
 * \param[out] securePart pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_SecConfig_SecurePartGet(int secConfig, enum esecurePart *securePart);

/** \brief 
 * It contains Secure Part Area
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be updated
 * \param[in] securePart parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_SecConfig_SecurePartSet(int secConfig, enum esecurePart securePart);

/** \brief 
 * It contains Booster used by the terminal
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be obtained
 * \param[out] terminalBooster pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_SecConfig_TerminalBoosterGet(int secConfig, enum eterminalBooster *terminalBooster);

/** \brief 
 * It contains Booster used by the terminal
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be updated
 * \param[in] terminalBooster parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_SecConfig_TerminalBoosterSet(int secConfig, enum eterminalBooster terminalBooster);

/** \brief 
 * It contains Peripheral Booster Type
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be obtained
 * \param[out] peripheralBooster pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_SecConfig_PeripheralBoosterGet(int secConfig, enum eperipheralBooster *peripheralBooster);

/** \brief 
 * It contains Peripheral Booster Type
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be updated
 * \param[in] peripheralBooster parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_SecConfig_PeripheralBoosterSet(int secConfig, enum eperipheralBooster peripheralBooster);

/** \brief 
 * It contains Booster used by the pinpad
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be obtained
 * \param[out] pinpadBooster pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_SecConfig_PinpadBoosterGet(int secConfig, enum epinpadBooster *pinpadBooster);

/** \brief 
 * It contains Booster used by the pinpad
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] secConfig identifier of the data to be updated
 * \param[in] pinpadBooster parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_SecConfig_PinpadBoosterSet(int secConfig, enum epinpadBooster pinpadBooster);



/** @} */
/** @} */
/** @} */

#ifdef __cplusplus
}
#endif

#endif

