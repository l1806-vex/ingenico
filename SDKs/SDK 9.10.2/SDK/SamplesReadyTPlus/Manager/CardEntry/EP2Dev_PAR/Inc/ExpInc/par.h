/*!
 ------------------------------------------------------------------------------
                  INGENICO Technical Software Department
 ------------------------------------------------------------------------------
 Copyright (c) 2013, Ingenico.
 28-32 boulevard de Grenelle 75015 Paris, France.
 All rights reserved.

  This source program is the property of INGENICO Company and may not be copied
  in any form or by any means, whether in part or in whole, except under license
  expressly granted by INGENICO company

  All copies of this program, whether in part or in whole, and
  whether modified or not, must display this and all other
  embedded copyright and ownership notices in full.
 ------------------------------------------------------------------------------

 Project : Easy Path to Dev
 Module  : PAR - Parameter Module v01.00

 @file      par.h
 @brief     This file provides the API for Parameter Module.
 @brief     This file contains the internal implementation of PAR Module.
 @date      15/05/2013

 ------------------------------------------------------------------------------
 */
#ifndef __PAR_H__
#define __PAR_H__

#ifdef __cplusplus
extern "C" {
#endif

//This file is automatically generated from "param.pml" file
//Don't modify it manually!
  /** \addtogroup PAR Parameter Management Module
 *
 * @{
 */

#define Major_Release 01
#define Minor_Release 00

  /** \weakgroup PAR_API PAR APIs
 *
 * @{
 */

  /** \weakgroup PAR_API_ErrorCodes PAR Error Codes
 *
 * @{
 */

#define PAR_OK 0 /**< No error encountered */
#define PAR_INVALID_HANDLE (-201) /**< Invalid parser */
#define PAR_BAD_PARAMETER (-202) /**< Bad input parameter (NULL pointer...) */
#define PAR_ERROR_PARSING (-203) /**< XML buffer is badly formatted */
#define PAR_ERROR_TAG_MISMATCH (-203) /**< Start tag and End tag of an element are not the same */
#define PAR_ERROR_SEVERAL_ROOT_TAGS (-205) /**< Several root tags have been found in the buffer */
#define PAR_ERROR_MEMORY (-206) /**< Not enough memory */
#define PAR_ERROR_FILE_ACCESS (-207) /**< Error when accessing the file */
#define PAR_TAG_NOT_FOUND (-208) /**< Tag not found */
#define PAR_UNKNOWN_ERROR (-209) /**< Unknown Error */
#define PAR_FILE_NOT_FOUND (-210) /**< File not found */
#define PAR_ACCESS_DENIED (-211) /**< Access Denied, Read-only access  */
#define PAR_NOT_INITIALIZED (-212) /**< Parameter data not Initialized, PAR_Import must be performed first */
#define PAR_INVALID_DATA (-213) /**< Invalid Parameter data being Set */
#define PAR_INVALID_DATA_LEN (-214) /**< Invalid Parameter data length being Set */

/** @} */


  enum etrcOutput
{
    trcOutput_telium = 0,
    trcOutput_remoteDbg = 1,
    trcOutput_internalFile = 2,
    trcOutput_externalFileUsb = 3,
    trcOutput_externalFileMmc = 4,
    trcOutput_printer = 5,
    trcOutput_udpIp = 6,
    trcOutputEnd,
};

enum eperiph
{
    periph_Display = 0,
    periph_Ppr = 1,
    periph_C30 = 2,
    periphEnd,
};

enum ecardEntry
{
    cardEntry_Off = 0,
    cardEntry_On = 1,
    cardEntryEnd,
};

enum eamountEntry
{
    amountEntry_Off = 0,
    amountEntry_On = 1,
    amountEntryEnd,
};

enum eclessSupport
{
    clessSupport_Off = 0,
    clessSupport_On = 1,
    clessSupportEnd,
};

enum echeckBmp
{
    checkBmp_Off = 0,
    checkBmp_On = 1,
    checkBmpEnd,
};

enum etpassBmp
{
    tpassBmp_Off = 0,
    tpassBmp_On = 1,
    tpassBmpEnd,
};

enum epp2Lines
{
    pp2Lines_Off = 0,
    pp2Lines_On = 1,
    pp2LinesEnd,
};

enum eppGraphic
{
    ppGraphic_Off = 0,
    ppGraphic_On = 1,
    ppGraphicEnd,
};

enum ec30
{
    c30_Off = 0,
    c30_On = 1,
    c30End,
};

enum ebwHeader
{
    bwHeader_Off = 0,
    bwHeader_On = 1,
    bwHeaderEnd,
};


/** \weakgroup PAR_API_ParFunctions Par Functions
 *
 * @{
 */

/** \brief Copy the contents of the specified XML path and overwrite the contents of the existing
 * XML Parameter File. The parameter file will be initialized and the structure updated.
 *
 * \param[in] path The XML parameter path
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_BAD_PARAMETER = Bad Input parameter.
 *      - \ref PAR_INVALID_HANDLE = Invalid Parser.
 *      - \ref PAR_ERROR_PARSING = XML Parameter file is badly formatted.
 *      - \ref PAR_ERROR_TAG_MISMATCH = Start tag and End tag of an element are not the same.
 *      - \ref PAR_ERROR_SEVERAL_ROOT_TAGS = Several root tags have been found in the buffer.
 *      - \ref PAR_ERROR_MEMORY = Not enough memory.
 *      - \ref PAR_ERROR_FILE_ACCESS = Error when accessing the file.
 *      - \ref PAR_UNKNOWN_ERROR = Unknown error occured.
 */
int PAR_Import(char *path);

/** \brief Copy the contents of the XML Parameter File into the specified XML path
 *
 * \param[in] path The XML parameter path
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_ERROR_FILE_ACCESS = Error when accessing the file.
 */
int PAR_Export(char *path);

/** \brief Obtain the parameter data Trace Output

 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] trcOutput pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_TrcOutputGet(enum etrcOutput *trcOutput);

/** \brief Save the parameter data Trace Output

 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] trcOutput parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_TrcOutputSet(enum etrcOutput trcOutput);

/** \brief 
 * It contains Output Display for Card Entry
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] periph pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_PeriphGet(enum eperiph *periph);

/** \brief 
 * It contains Output Display for Card Entry
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] periph parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_PeriphSet(enum eperiph periph);

/** \brief 
 * It contains Flag to enable or disable custom card entry message
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] cardEntry pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_CardEntryGet(enum ecardEntry *cardEntry);

/** \brief 
 * It contains Flag to enable or disable custom card entry message
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] cardEntry parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_CardEntrySet(enum ecardEntry cardEntry);

/** \brief 
 * It contains Flag to enable or disable custom amount entry message
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] amountEntry pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AmountEntryGet(enum eamountEntry *amountEntry);

/** \brief 
 * It contains Flag to enable or disable custom amount entry message
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] amountEntry parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AmountEntrySet(enum eamountEntry amountEntry);

/** \brief 
 * It contains Flag to enable or disable cless support
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] clessSupport pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_ClessSupportGet(enum eclessSupport *clessSupport);

/** \brief 
 * It contains Flag to enable or disable cless support
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] clessSupport parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_ClessSupportSet(enum eclessSupport clessSupport);

/** \brief 
 * It contains Flag to enable or disable bitmap display for check transactions
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] checkBmp pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_CheckBmpGet(enum echeckBmp *checkBmp);

/** \brief 
 * It contains Flag to enable or disable bitmap display for check transactions
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] checkBmp parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_CheckBmpSet(enum echeckBmp checkBmp);

/** \brief 
 * It contains Flag to enable or disable bitmap display for tpass transactions
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] tpassBmp pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_TpassBmpGet(enum etpassBmp *tpassBmp);

/** \brief 
 * It contains Flag to enable or disable bitmap display for tpass transactions
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] tpassBmp parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_TpassBmpSet(enum etpassBmp tpassBmp);

/** \brief 
 * It contains Flag to enable or disable 2 lines display on pinpad
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] pp2Lines pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_Pp2LinesGet(enum epp2Lines *pp2Lines);

/** \brief 
 * It contains Flag to enable or disable 2 lines display on pinpad
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] pp2Lines parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_Pp2LinesSet(enum epp2Lines pp2Lines);

/** \brief 
 * It contains Flag to enable or disable pinpad graphic support
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] ppGraphic pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_PpGraphicGet(enum eppGraphic *ppGraphic);

/** \brief 
 * It contains Flag to enable or disable pinpad graphic support
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] ppGraphic parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_PpGraphicSet(enum eppGraphic ppGraphic);

/** \brief 
 * It contains Flag to enable or disable tpass or vending pass terminal support
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] c30 pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_C30Get(enum ec30 *c30);

/** \brief 
 * It contains Flag to enable or disable tpass or vending pass terminal support
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] c30 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_C30Set(enum ec30 c30);

/** \brief 
 * It contains Flag to enable or disable header on black and white terminal
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] bwHeader pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_BwHeaderGet(enum ebwHeader *bwHeader);

/** \brief 
 * It contains Flag to enable or disable header on black and white terminal
 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] bwHeader parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_BwHeaderSet(enum ebwHeader bwHeader);



/** @} */
/** @} */
/** @} */

#ifdef __cplusplus
}
#endif

#endif

