/*!
 ------------------------------------------------------------------------------
                  INGENICO Technical Software Department
 ------------------------------------------------------------------------------
 Copyright (c) 2013, Ingenico.
 28-32 boulevard de Grenelle 75015 Paris, France.
 All rights reserved.

  This source program is the property of INGENICO Company and may not be copied
  in any form or by any means, whether in part or in whole, except under license
  expressly granted by INGENICO company

  All copies of this program, whether in part or in whole, and
  whether modified or not, must display this and all other
  embedded copyright and ownership notices in full.
 ------------------------------------------------------------------------------

 Project : Easy Path to Dev
 Module  : PAR - Parameter Module v01.00

 @file      par.h
 @brief     This file provides the API for Parameter Module.
 @brief     This file contains the internal implementation of PAR Module.
 @date      22/05/2013

 ------------------------------------------------------------------------------
 */
#ifndef __PAR_H__
#define __PAR_H__

#ifdef __cplusplus
extern "C" {
#endif

//This file is automatically generated from "param.pml" file
//Don't modify it manually!
  /** \addtogroup PAR Parameter Management Module
 *
 * @{
 */

#define Major_Release 01
#define Minor_Release 00

  /** \weakgroup PAR_API PAR APIs
 *
 * @{
 */

  /** \weakgroup PAR_API_ErrorCodes PAR Error Codes
 *
 * @{
 */

#define PAR_OK 0 /**< No error encountered */
#define PAR_INVALID_HANDLE (-201) /**< Invalid parser */
#define PAR_BAD_PARAMETER (-202) /**< Bad input parameter (NULL pointer...) */
#define PAR_ERROR_PARSING (-203) /**< XML buffer is badly formatted */
#define PAR_ERROR_TAG_MISMATCH (-203) /**< Start tag and End tag of an element are not the same */
#define PAR_ERROR_SEVERAL_ROOT_TAGS (-205) /**< Several root tags have been found in the buffer */
#define PAR_ERROR_MEMORY (-206) /**< Not enough memory */
#define PAR_ERROR_FILE_ACCESS (-207) /**< Error when accessing the file */
#define PAR_TAG_NOT_FOUND (-208) /**< Tag not found */
#define PAR_UNKNOWN_ERROR (-209) /**< Unknown Error */
#define PAR_FILE_NOT_FOUND (-210) /**< File not found */
#define PAR_ACCESS_DENIED (-211) /**< Access Denied, Read-only access  */
#define PAR_NOT_INITIALIZED (-212) /**< Parameter data not Initialized, PAR_Import must be performed first */
#define PAR_INVALID_DATA (-213) /**< Invalid Parameter data being Set */
#define PAR_INVALID_DATA_LEN (-214) /**< Invalid Parameter data length being Set */

/** @} */

  
enum etrcOutput
{
    trcOutput_telium = 0,
    trcOutput_remoteDbg = 1,
    trcOutput_internalFile = 2,
    trcOutput_externalFileUsb = 3,
    trcOutput_externalFileMmc = 4,
    trcOutput_printer = 5,
    trcOutput_udpIp = 6,
    trcOutputEnd
};

/** \weakgroup PAR_API_ParFunctions Par Functions
 *
 * @{
 */

/** \brief Copy the contents of the specified XML path and overwrite the contents of the existing
 * XML Parameter File. The parameter file will be initialized and the structure updated.
 *
 * \param[in] path The XML parameter path
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_BAD_PARAMETER = Bad Input parameter.
 *      - \ref PAR_INVALID_HANDLE = Invalid Parser.
 *      - \ref PAR_ERROR_PARSING = XML Parameter file is badly formatted.
 *      - \ref PAR_ERROR_TAG_MISMATCH = Start tag and End tag of an element are not the same.
 *      - \ref PAR_ERROR_SEVERAL_ROOT_TAGS = Several root tags have been found in the buffer.
 *      - \ref PAR_ERROR_MEMORY = Not enough memory.
 *      - \ref PAR_ERROR_FILE_ACCESS = Error when accessing the file.
 *      - \ref PAR_UNKNOWN_ERROR = Unknown error occured.
 */
int PAR_Import(char *path);

/** \brief Copy the contents of the XML Parameter File into the specified XML path
 *
 * \param[in] path The XML parameter path
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_ERROR_FILE_ACCESS = Error when accessing the file.
 */
int PAR_Export(char *path);

/** \brief 
 * It contains AID Option 101 (Partial AID and Zero amount)
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] aidOption101 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AidOption101Get(char **aidOption101);

/** \brief 
 * It contains AID Option 101 (Partial AID and Zero amount)
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] aidOption101 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AidOption101Set(char *aidOption101);

/** \brief 
 * It contains Paywave AID
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] aidPaywaveSmall pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AidPaywaveSmallGet(char **aidPaywaveSmall);

/** \brief 
 * It contains Paywave AID
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] aidPaywaveSmall parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AidPaywaveSmallSet(char *aidPaywaveSmall);

/** \brief 
 * It contains Paypass AID
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] aidPaypassSmall pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AidPaypassSmallGet(char **aidPaypassSmall);

/** \brief 
 * It contains Paypass AID
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] aidPaypassSmall parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AidPaypassSmallSet(char *aidPaypassSmall);

/** \brief 
 * It contains Amount binary 15
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] amtBin15 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AmtBin15Get(char **amtBin15);

/** \brief 
 * It contains Amount binary 15
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] amtBin15 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AmtBin15Set(char *amtBin15);

/** \brief 
 * It contains Amount numeric 25
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] amtNum25 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AmtNum25Get(char **amtNum25);

/** \brief 
 * It contains Amount numeric 25
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] amtNum25 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AmtNum25Set(char *amtNum25);

/** \brief 
 * It contains Amount numeric 20
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] amtNum20 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AmtNum20Get(char **amtNum20);

/** \brief 
 * It contains Amount numeric 20
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] amtNum20 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AmtNum20Set(char *amtNum20);

/** \brief 
 * It contains Amount numeric 10
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] amtNum10 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_AmtNum10Get(char **amtNum10);

/** \brief 
 * It contains Amount numeric 10
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] amtNum10 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_AmtNum10Set(char *amtNum10);

/** \brief 
 * It contains AID Options
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] apduOption pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_ApduOptionGet(char **apduOption);

/** \brief 
 * It contains AID Options
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] apduOption parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_ApduOptionSet(char *apduOption);

/** \brief 
 * It contains APDU Select PPSE
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] selectPPSE pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_SelectPPSEGet(char **selectPPSE);

/** \brief 
 * It contains APDU Select PPSE
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] selectPPSE parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_SelectPPSESet(char *selectPPSE);

/** \brief 
 * It contains APDU SW 9000
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] apduSW9000 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_ApduSW9000Get(char **apduSW9000);

/** \brief 
 * It contains APDU SW 9000
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] apduSW9000 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_ApduSW9000Set(char *apduSW9000);

/** \brief 
 * It contains Paypass Kernel
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] kernelPaypass pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_KernelPaypassGet(char **kernelPaypass);

/** \brief 
 * It contains Paypass Kernel
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] kernelPaypass parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_KernelPaypassSet(char *kernelPaypass);

/** \brief 
 * It contains Visa kernel
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] kernelVisa pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_KernelVisaGet(char **kernelVisa);

/** \brief 
 * It contains Visa kernel
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] kernelVisa parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_KernelVisaSet(char *kernelVisa);

/** \brief 
 * It contains Proprietary ID 1
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] propId1 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_PropId1Get(char **propId1);

/** \brief 
 * It contains Proprietary ID 1
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] propId1 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_PropId1Set(char *propId1);

/** \brief 
 * It contains Proprietary ID 2
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] propId2 pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_PropId2Get(char **propId2);

/** \brief 
 * It contains Proprietary ID 2
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] propId2 parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_PropId2Set(char *propId2);

/** \brief 
 * It contains TTQ No Option
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[out] ttqNoOption pointer to the data to be obtained
 *
 * \return
 *      - PAR_OK = Parameter value is obtained succesfully
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_TtqNoOptionGet(char **ttqNoOption);

/** \brief 
 * It contains TTQ No Option
 * The parameter's datatype is hexadecimal with READWRITE access
 * \param[in] ttqNoOption parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_TtqNoOptionSet(char *ttqNoOption);

/** \brief Obtain the parameter data Trace Output

 * The parameter's datatype is SINGLE with READWRITE access
 * \param[out] trcOutput pointer to the data to be obtained
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
*/
int PAR_TrcOutputGet(enum etrcOutput *trcOutput);

/** \brief Save the parameter data Trace Output

 * The parameter's datatype is SINGLE with READWRITE access
 * \param[in] trcOutput parameter value to be saved
 *
 * \return
 *      - \ref PAR_OK = Parameter file is parsed succesfully
 *      - \ref PAR_ACCESS_DENIED = Access Denied, Read-only access.
 *      - \ref PAR_NOT_INITIALIZED = Parameter data not Initialized, PAR_Import must be performed first.
 *      - \ref PAR_INVALID_DATA = Invalid Parameter data being Set.
 *      - \ref PAR_INVALID_DATA_LEN = Invalid Parameter data length being Set.
*/
int PAR_TrcOutputSet(enum etrcOutput trcOutput);



/** @} */
/** @} */
/** @} */

#ifdef __cplusplus
}
#endif

#endif

