/**
 * \file
 * \brief Define the high level interface of the contactless DLL.
 *
 *
 * \author	Ingenico France
 * \author	Copyright (c) 2009 Ingenico France, 1 rue claude Chappe,\n
 *			07503 Guilherand-Granges, France, All Rights Reserved.
 *
 * \author	Ingenico France has intellectual property rights relating to the technology embodied\n
 *			in this software. In particular, and without limitation, these intellectual property rights may\n
 *			include one or more patents.\n
 *			This software is distributed under licenses restricting its use, copying, distribution, and\n
 *			and decompilation. No part of this software may be reproduced in any form by any means\n
 *			without prior written authorization of Ingenico France.
 **/

#ifndef __CLESS_HIGHLEVEL_H__INCLUDED__
#define __CLESS_HIGHLEVEL_H__INCLUDED__


#if ((!defined(TPASS_INCLUDE_COMPATIBILITY)) || (defined(__GTL_SHARED_EXCHANGE_H__INCLUDED__) && defined(__TLV_TREE_NODE__)))

/////////////////////////////////////////////////////////////////
//// Types //////////////////////////////////////////////////////

//! \addtogroup ClessExplicitCustom
//! @{

typedef int (*T_CLESS_CUSTOM_CALLBACK)(T_SHARED_DATA_STRUCT* pDataExchange);	/*!< Explicit selection call-back function prototype. */

//! @}



/////////////////////////////////////////////////////////////////
//// Functions //////////////////////////////////////////////////

//! \addtogroup ClessGenericSelectionEntryPoint
//! @{

//! \brief Get the Entry Point PreProcessing results.
//! \param[out] hOutputTlvTree Output TLV-Tree containing the Entry Point Pre Processing results.
//! \return
//!		- \ref CLESS_STATUS_OK if process correctly completed.
//! 	- \ref CLESS_STATUS_EP_NOT_LOADED if Entry Point is not loaded in the terminal.
//!		- \ref CLESS_STATUS_NOT_FOUND if no pre processing result is available.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the processing.
//!		- \ref CLESS_STATUS_BAD_COMPONENT_INIT if Entry Point cannot be used because of a bad initialisation.
int Cless_Generic_EntryPoint_GetPreProcessingResults (TLV_TREE_NODE hOutputTlvTree);

//! \brief Get an Unpredictable Number as generated by Entry Point.
//! \param[out] pRandomNumber Random Number.
//! \return
//!		- \ref CLESS_STATUS_OK if process correctly completed.
//!		- \ref CLESS_STATUS_INVALID_PARAM if \a pRandomNumber is \a NULL.
//!		- \ref CLESS_STATUS_UN_GENERATION_FAILED if there is no generated random number.
int Cless_Generic_EntryPoint_GetRandomNumber (unsigned long* pRandomNumber);

//! @}



//! \addtogroup ClessGenericSelectionDetect
//! @{

//! \brief Get the card detection result
//! \param[out] pSharedData Data structure filled with the card detection results.
//!	- \ref TAG_GENERIC_DETECTION_RESULT indicates the card detection result.
//!	- \ref TAG_GENERIC_DETECTED_CARD_TYPE indicates the detected card type.
//!	- \ref TAG_GENERIC_ERROR_INFORMATION indicates the error code information (if present).
//! \param[in] bClearSharedExchange \a TRUE if \a pSharedExchange shall be cleared, \a FALSE if not.
//! \return
//! 	- \ref CLESS_STATUS_OK If card detection is correctly performed.
//!		- \ref CLESS_STATUS_NOT_ALLOWED No detection has been launched (mode = NONE).
//!		- \ref CLESS_STATUS_UNKNOWN If card detection is not performed.
//! 	- \ref CLESS_STATUS_CANCELLED the card detection has been cancelled.
//! 	- \ref CLESS_STATUS_USE_ANOTHER_INTERFACE The custom application required to use another interface (customisation).
//! 	- \ref CLESS_STATUS_STOP if customisation returned an unknown status or decided to stop the detection.
//! 	- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory in \a pSharedData to store all the detection results.
//! 	- \ref CLESS_STATUS_KO if an error occurred when filling \a pSharedData with the detection results.
int Cless_Generic_CardDetectionGetResults (T_SHARED_DATA_STRUCT* pSharedData, const int bClearSharedExchange);

//! @}



//! \addtogroup ClessGenericSelectionAppSelectionFunctions
//! @{

//! \brief Gets the PPSE method candidate list (if available : PPSE method has been used and candidate list is not empty).
//! \param[out] pSharedDataStruct Shared exchange buffer containing the candidate list. If candidate list is not empty, one or several \ref TAG_EP_CANDIDATE_LIST_ELEMENT
//! constructed tags are returned. each of them consists of :
//!	- \ref TAG_EMV_AID_CARD : the AID as sent in the Final SELECT command (as supported by the card).
//!	- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!	- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!	- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!	- \ref TAG_EP_AID_ADDITIONAL_RESULTS : additional results for this AID (floor limit exceeded, zero amount, etc).
//!	- \ref TAG_EP_CLESS_APPLI_CAPABILITY_TYPE : Card application capability type as returned by the card (if present).
//!	- \ref TAG_EP_TERMINAL_TRANSACTION_QUALIFIERS : Terminal Transaction Qualifiers (if present, for Visa AID only, modified according to the Entry Point specification).
//!	- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!	- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!	- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//! \param[in] bClearSharedExchange \a TRUE if \a pSharedExchange shall be cleared, \a FALSE if not.
//! \return
//! 	- \ref CLESS_STATUS_OK if correctly performed.
//!		- \ref CLESS_STATUS_EP_NOT_LOADED if Entry Point component is not loaded.
//!		- \ref CLESS_STATUS_NOT_FOUND if there is no available candidate list within Entry Point.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory.
//!		- \ref CLESS_STATUS_KO if an error occurred.
//! \note This function requests Entry Point to provide its candidate list.
//! \note Entry Point automatically clears the buffer, whatever the value of \a bClearSharedExchange.
int Cless_Generic_Selection_PpseMethodGetCandidateList (T_SHARED_DATA_STRUCT* pSharedDataStruct, const int bClearSharedExchange);

//! \brief Get the List Of AID method candidate list (if available : List Of AID has been used and candidate list is not empty).
//! \param[out]	pSharedDataStruct Buffer containing List of AID candidate list. If candidate list is not empty, one or several \ref TAG_EP_CANDIDATE_LIST_ELEMENT
//! constructed tags are returned. each of them consists of :
//!	- \ref TAG_EMV_DF_NAME : the DF Name returned by the card (and the one sent in the Final SELECT command (as supported by the card)).
//!	- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!	- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!	- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!	- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!	- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!	- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//!	- \ref TAG_EMV_PDOL : PDOL as provided by the card (if present).
//!	- \ref TAG_EMV_LANGUAGE_PREFERENCE : Language preference as provided by the card (if present).
//!	- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX : Issuer Code Table Index as provided by the card (if present).
//!	- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA : Issuer Discretionary Data as provided by the card (if present).
//! \param[in] bClearSharedExchange \a TRUE if \a pSharedExchange shall be cleared, \a FALSE if not.
//! \return
//!		- \ref CLESS_STATUS_OK if candidate list is not empty and one or several candidate element are provided.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID if there is no available element in the candidate list.
//!
//! \note Take care the following tags returned within the candidate element of the List Of AID method are not extracted from the Final SELECT card response, but from the SELECT response of
//! the SELECT ADF command. This is the role of your application (or the contactless kernel if applicable) to parse the Final SELECT response and extract your own data :
//!	- \ref TAG_EMV_DF_NAME
//!	- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR
//!	- \ref TAG_EMV_APPLICATION_LABEL
//!	- \ref TAG_EMV_PDOL
//!	- \ref TAG_EMV_LANGUAGE_PREFERENCE
//!	- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX
//!	- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA
int Cless_Generic_Selection_ListOfAidMethodGetCandidateList(T_SHARED_DATA_STRUCT* pSharedDataStruct, const int bClearSharedExchange);

//! @}


//! \addtogroup ClessGenericCustomisationFunction
//! @{

//! \brief Set the default GUI mode (MasterCard, Visa, Visa Europe, none, Visa Asia, MasterCard with coloured LEDs).
//! \param[in] nDefaultClessGuiMode Indicates the Contactless GUI mode. It can be one of the values described in \ref ClessGenericCustomisationDefaultGui.
//! \return
//!	- \ref CLESS_STATUS_OK if correctly performed.
//!	- \ref CLESS_STATUS_NOT_IMPLEMENTED if the loaded DLL does nto implement this feature.
//!	- \ref CLESS_STATUS_DLL_NOT_LOADED if the DLL is not loaded in the terminal.
//! \note If this function is called outside a transaction, it will change the default GUI mode and execute the default \ref CLESS_CUST_GUI_IDLE_STEP_ID step (no possible customisation).
//! Else, the default GUI mode will be set, and will be used on the next contactless transaction.
int Cless_Generic_Custom_SetDefaultGuiMode (int nDefaultClessGuiMode);

//! @}

//! \addtogroup ClessExplicitSelectionLoadData
//! @{

//! \brief load the data in Explicit Selection.
//! \param[in] hInputTlvTree TLV Tree containing the data to be used for application selection (detection, application selection, etc) in explicit selection mode.
//! Refer to \ref GenericParametersFormat for more information about the data that can be loaded.
//! \return
//!		- \ref CLESS_STATUS_OK if correctly completed.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to store the transaction amount.
//!		- \ref CLESS_STATUS_NOT_ALLOWED this function call is not allowed (bad mode).
//!		- \ref CLESS_STATUS_INVALID_PARAM provided parameters are not valid.
//!		- \ref CLESS_STATUS_KO if an error occurred.
int Cless_ExplicitSelection_LoadData(const TLV_TREE_NODE hInputTlvTree);

//! @}


//! \addtogroup ClessExplicitSelectionClearData
//! @{

//! \brief Clears the card detection and application selection contexts and free all the allocated memory for explicit selection mode.
//! \return
//!	- \ref CLESS_STATUS_OK if global data correctly cleared.
//!	- \ref CLESS_STATUS_NOT_ALLOWED if an implicit selection is in progress.
//!	- \ref CLESS_STATUS_NOT_IMPLEMENTED if the loaded DLL does not implement this feature.
//!	- \ref CLESS_STATUS_DLL_NOT_LOADED if the DLL is not loaded in the terminal.
//! \note This function should be called at the end of the transaction (explicit selection mode) just before returning to idle state.
int Cless_ExplicitSelection_ClearGlobalData (void);

//! @}


//! \addtogroup ClessExplicitCustom
//! @{

//! \brief Set the customisation function pointers for explicit selection (GUI customisation).
//! \param[in] pGuiFunc Pointer of the function to be called for GUI customisation. Refer to \ref ClessExplicitCustom for more information about the call-back function format.
//! \return
//!		- \ref CLESS_STATUS_OK Customisation function pointers are correctly set.
//!		- \ref CLESS_STATUS_NOT_ALLOWED Explicit selection is not currently in progress.
//!		- \ref CLESS_STATUS_INVALID_PARAM if the called application has provided an incorrect data.
//! \note If the GUI function is set, it calls the calling application on this function to register the wished GUI steps. Refer to \ref ClessGenericCustomisationGui for more information.
int Cless_ExplicitSelection_Custom_RegistrationForGui (T_CLESS_CUSTOM_CALLBACK pGuiFunc);


//! \brief Set the customisation function pointers for explicit selection (application selection customisation).
//! \param[in] pAppliSelectionPerformFunc Pointer of the function to be called for application selection method result customisation.
//! \param[in] pAppliSelectionPostPorcessingFunc Pointer of the function to be called for proprietary application selection customisation.
//! \return
//!		- \ref CLESS_STATUS_OK Customisation function pointers are correctly set.
//!		- \ref CLESS_STATUS_NOT_ALLOWED Explicit selection is not currently in progress.
//!		- \ref CLESS_STATUS_INVALID_PARAM if the called application has provided an incorrect data.
//! \note If the application selection customisation function is set, it calls the calling application on this function to register the wished steps.

int Cless_ExplicitSelection_Custom_RegistrationForApplicationSelection (T_CLESS_CUSTOM_CALLBACK pAppliSelectionPostPorcessingFunc, T_CLESS_CUSTOM_CALLBACK pAppliSelectionPerformFunc);


//! @}



//! \addtogroup ClessExplicitSelectionPreprocessing
//! @{

//! \brief Perform Entry Point pre-conditions and pre-processing treatments using data given with \ref Cless_ExplicitSelection_LoadData.
//! \return
//!		- \ref CLESS_STATUS_OK if process correctly completed.
//!		- \ref CLESS_STATUS_EP_NOT_LOADED if Entry Point application is not loaded.
//!		- \ref CLESS_STATUS_KO if an error occurred.
//!		- \ref CLESS_STATUS_MISSING_PARAM if a mandatory parameter is missing.
//!		- \ref CLESS_STATUS_INVALID_PARAM if one of the data provided to EP is not correctly formatted.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory.
//!		- \ref CLESS_STATUS_UN_GENERATION_FAILED if an error occurred during the UN generation.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if current mode is not "explicit".
int Cless_ExplicitSelection_EntryPoint_TransactionPreProcessing (void);

//! @}



//! \addtogroup ClessExplicitSelectionDetection
//! @{

//! \brief Perform the card detection (explicit selection mode). It uses the card detection parameters provided with the \ref Cless_ExplicitSelection_LoadData function.
//! \return
//!		- \ref CLESS_STATUS_OK if card detection task is correctly created.
//! 	- \ref CLESS_STATUS_NOT_ALLOWED if a detection is currently in progress, or if mode is not "explicit" or if detection task is not launched.
//! 	- \ref CLESS_STATUS_KO if an error occurred.
int Cless_ExplicitSelection_GlobalCardDetection(void);

//! \brief Cancel a card detection (explicit selection mode).
//! \return
//!		- \ref CLESS_STATUS_OK if cancellation correctly indicated.
//! 	- \ref CLESS_STATUS_NOT_ALLOWED if detection task not launched or currently in idle (no detection launched).
int Cless_ExplicitSelection_GlobalCardDetectionCancel(void);

//! \brief This function shall be used to clear the detection and application selection result before restart the transaction in explicit selection mode.
//! \param[in] bRestartDoubleTap Indicates if restart for double tap is required (to use the correct GUI depending on the restart conditions):
//!	- \a TRUE : The transaction restarts to perform the second tap. In this case, the CLESS_CUST_GUI_DOUBLE_TAP_STEP_ID GUI step will be executed.
//!	- \a FALSE: The transaction restarts (because of a communication error for example), and in this case, the card detection will be silently restarted during 500ms before executing the \ref CLESS_CUST_GUI_RETRY_AMOUNT_STEP_ID step (or \ref CLESS_CUST_GUI_RETRY_NO_AMOUNT_STEP_ID if transaction with no amount has been launched).
//! \return
//!	- \ref CLESS_STATUS_NOT_ALLOWED if a detection is currently in progress, or if mode is not "explicit" or if detection task is not launched.
//!	- \ref CLESS_STATUS_OK if correctly performed.

int Cless_ExplicitSelection_DetectionPrepareForRestart (int bRestartDoubleTap);

//! @}



//! \addtogroup ClessExplicitSelectionAppSelection
//! @{

//! \brief This function performs the complete application selection process using data given with \ref Cless_ExplicitSelection_LoadData.
//! \details It needs data for the following different methods : APDU before, PPSE, List of AID, APDU after.
//! This function processes as following :
//!  - It performs the APDU Before method.
//!  - If previous method does not match, it performs next the PPSE method.
//!  - Then, if previous method does not match, it performs the List of AID method.
//!  - Last, if previous method does not match, it performs the APDU After method.
//!  .
//! If one of this method criteria matches with the card, the application selection process successes and the application selection result is provided.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the Application Selection method process result. <b>The structure must be allocated by the application.</b>
//! The application selection results depends on the applied method :
//!	- For the "Entry Point" method, it consists of
//!		- \ref TAG_EP_NUMBER_OF_CANDIDATE_AID_IN_LIST : the number of AID within the candidate list.
//!		- \ref TAG_EP_FINAL_SELECT_COMMAND_SENT : Final SELECT command sent to the card.
//!		- \ref TAG_EP_FINAL_SELECT_STATUS_WORD : Final SELECT status word.
//!		- \ref TAG_EP_FINAL_SELECT_RESPONSE : Final SELECT card response.
//!		- \ref TAG_EP_ERROR_INFORMATION : Error code information of Entry Point (if present).
//!		- \ref TAG_GENERIC_APPLIED_METHOD : Applied Application selection method (\ref GENERIC_METHOD_PPSE or \ref GENERIC_METHOD_LOA in this case).
//!		- At least one AID candidate element, corresponding to the AID that matched (each candidate element is stored in a \ref TAG_EP_CANDIDATE_LIST_ELEMENT constructed tag) :
//!			- \ref TAG_EMV_AID_CARD : the AID as sent in the Final SELECT command (as supported by the card).
//!			- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!			- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!			- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!			- \ref TAG_EP_AID_ADDITIONAL_RESULTS : additional results for this AID (floor limit exceeded, zero amount, etc).
//!			- \ref TAG_EP_CLESS_APPLI_CAPABILITY_TYPE : Card application capability type as returned by the card (if present).
//!			- \ref TAG_EP_TERMINAL_TRANSACTION_QUALIFIERS : Terminal Transaction Qualifiers (if present, for Visa AID only, modified according to the Entry Point specification).
//!			- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!			- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!			- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//!	- For the "List Of AID" method, it consists of :
//!		- \ref TAG_EP_FINAL_SELECT_COMMAND_SENT : Final SELECT command sent to the card.
//!		- \ref TAG_EP_FINAL_SELECT_STATUS_WORD : Final SELECT status word.
//!		- \ref TAG_EP_FINAL_SELECT_RESPONSE : Final SELECT card response.
//!		- At least one AID candidate element, corresponding to the AID that matched (each candidate element is stored in a \ref TAG_EP_CANDIDATE_LIST_ELEMENT constructed tag) :
//!			- \ref TAG_EMV_DF_NAME : the DF Name returned by the card (and the one sent in the Final SELECT command (as supported by the card)).
//!			- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!			- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!			- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!			- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!			- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!			- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//!			- \ref TAG_EMV_PDOL : PDOL as provided by the card (if present).
//!			- \ref TAG_EMV_LANGUAGE_PREFERENCE : Language preference as provided by the card (if present).
//!			- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX : Issuer Code Table Index as provided by the card (if present).
//!			- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA : Issuer Discretionary Data as provided by the card (if present).
//!	- If Application Selection has been performed, here are the provided data (APDU method applied) :
//!		- \ref TAG_GENERIC_APPLIED_METHOD : Applied Application selection method (if present, \ref GENERIC_METHOD_APDU_BEFORE or \ref GENERIC_METHOD_APDU_AFTER in this case).
//!		- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!		- \ref TAG_GENERIC_APDU_COMMAND_TO_SEND : APDU command that matched with the card.
//!		- \ref TAG_GENERIC_APDU_CARD_RESPONSE : Card response to the sent APDU.
//!		- \ref TAG_GENERIC_APDU_CARD_STATUS_WORD : Card response status word to the sent command.
//! \return
//!	- For APDU (Before/After) methods :
//!		- \ref CLESS_STATUS_OK if results correctly got.
//!		- \ref CLESS_STATUS_NO_MATCHING_APDU if there is no matching criteria (last applied method, i.e. APDU after, did not match).
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR There is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED If cannot send command to the card because contactless interface is not opened.
//!		- \ref CLESS_STATUS_INVALID_PARAM if an internal error occurred.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the application selection processing.
//!		- \ref CLESS_STATUS_KO if an error occurred.
//!	- For Entry Point method (PPSE) :
//!		- \ref CLESS_STATUS_OK if application selection succeeded.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the processing or to copy results in the output buffer.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID if there is no matching AID (candidate list is empty).
//!		- \ref CLESS_STATUS_CARD_BLOCKED the presented card is blocked.
//!		- \ref CLESS_STATUS_APPLICATION_BLOCKED the application of the presented card is blocked.
//!		- \ref CLESS_STATUS_EP_CLESS_SELECTION_NOT_ALLOWED if Entry Point method is not allowed as no any AID is available (according to pre processing).
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR there is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_INTERNAL_ERROR if an internal error occurred.
//!		- \ref CLESS_STATUS_MISSING_ICC_DATA a mandatory card data is missing.
//!		- \ref CLESS_STATUS_ICC_FORMAT_ERROR a data returned by the card is not correctly formatted.
//!		- \ref CLESS_STATUS_ICC_REDUNDANT_DATA a data returned by the card is redundant.
//!		- \ref CLESS_STATUS_BAD_PPSE_SW if the status word returned by the card on PPSE is not expected.
//!		- \ref CLESS_STATUS_BAD_COMPONENT_INIT if Entry Point cannot be used because of a bad initialisation.
//! 	- \ref CLESS_STATUS_MISSING_PARAM if a mandatory parameter is missing.
//! 	- \ref CLESS_STATUS_INVALID_PARAM if one of the provided parameters is incorrect.
//!		- \ref CLESS_STATUS_EP_NOT_LOADED if Entry Point component is not loaded.
//! 	- \ref CLESS_STATUS_KO if an error occurred.
//!	- For List of AID method :
//!		- \ref CLESS_STATUS_OK Application selection process successfully completed and there is at least one element in the candidate list.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID The candidate list is empty after the application selection processing.
//!		- \ref CLESS_STATUS_CARD_BLOCKED The card has returned 0x6A81 to the SELECT command.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR There is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED If cannot send command to the card because contactless interface is not opened.
//!		- \ref CLESS_STATUS_INVALID_PARAM if an internal error occurred.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the application selection processing.
//!		- \ref CLESS_STATUS_EP_CLESS_SELECTION_NOT_ALLOWED if no AID configured with the LoA method is allowed according to EP pre-processing results.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
//!
//! \note Take care the following tags returned within the candidate element of the List Of AID method are not extracted from the Final SELECT card response, but from the SELECT response of
//! the SELECT ADF command. This is the role of your application (or the contactless kernel if applicable) to parse the Final SELECT response and extract your own data :
//!	- \ref TAG_EMV_DF_NAME
//!	- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR
//!	- \ref TAG_EMV_APPLICATION_LABEL
//!	- \ref TAG_EMV_PDOL
//!	- \ref TAG_EMV_LANGUAGE_PREFERENCE
//!	- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX
//!	- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA
int Cless_ExplicitSelection_Selection_ApplicationSelectionProcess(T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! \brief Get the complete application selection process result.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the Application Selection process result. <b>The structure must be allocated by the application.</b>.
//! Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess function for more information about the possible returned data.
//! \return Depending on the applied selection method :
//!	- APDU (Before / After) method :
//!		- \ref CLESS_STATUS_OK if results correctly got.
//!		- \ref CLESS_STATUS_NO_MATCHING_APDU if there is no matching APDU (no available results).
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to add the result in \a pSharedDataStruct.
//!		- \ref CLESS_STATUS_KO if an error occurred.
//!	- Entry Point (PPSE) method :
//!		- \ref CLESS_STATUS_OK if results correctly got.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the processing or to copy results in the output buffer.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID if there is no matching AID (candidate list is empty).
//!		- \ref CLESS_STATUS_CARD_BLOCKED the presented card is blocked.
//!		- \ref CLESS_STATUS_APPLICATION_BLOCKED the application of the presented card is blocked.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR there is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_INTERNAL_ERROR if an internal error occurred.
//!		- \ref CLESS_STATUS_MISSING_ICC_DATA a mandatory card data is missing.
//!		- \ref CLESS_STATUS_ICC_FORMAT_ERROR a data returned by the card is not correctly formatted.
//!		- \ref CLESS_STATUS_ICC_REDUNDANT_DATA a data returned by the card is redundant.
//!		- \ref CLESS_STATUS_BAD_PPSE_SW if the status word returned by the card on PPSE is not expected.
//!		- \ref CLESS_STATUS_BAD_COMPONENT_INIT if Entry Point cannot be used because of a bad initialisation.
//!	- List Of AID method :
//!		- \ref CLESS_STATUS_OK if results correctly got.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID The candidate list is empty after the application selection processing.
//!		- \ref CLESS_STATUS_CARD_BLOCKED The card has returned 0x6A81 to the SELECT command.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR There is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED If cannot send command to the card because contactless interface is not opened.
//!		- \ref CLESS_STATUS_INVALID_PARAM if an internal error occurred.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the application selection processing.
//!		.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
//!
//! \note Take care the following tags returned within the candidate element of the List Of AID method are not extracted from the Final SELECT card response, but from the SELECT response of
//! the SELECT ADF command. This is the role of your application (or the contactless kernel if applicable) to parse the Final SELECT response and extract your own data :
//!	- \ref TAG_EMV_DF_NAME
//!	- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR
//!	- \ref TAG_EMV_APPLICATION_LABEL
//!	- \ref TAG_EMV_PDOL
//!	- \ref TAG_EMV_LANGUAGE_PREFERENCE
//!	- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX
//!	- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA
int Cless_ExplicitSelection_Selection_ApplicationSelectionGetResults(T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! \brief Determine if there is some applicable application selection method before opeining the cless field.
//! \return
//!		- \ref CLESS_STATUS_OK if contactless is allowed.
//!		- \ref CLESS_STATUS_NO_SELECTION_METHOD_ALLOWED if contactless is not allowed.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if this function is called outside of the explicit selection mode.
//! \note This function, if used, shall be called after having called the \ref Cless_ExplicitSelection_LoadData function and after \ref Cless_ExplicitSelection_EntryPoint_TransactionPreProcessing function if PPSE application selection method is used.
//! \note It can be used for existing application selection (i.e. APDU methods, PPSE and List Of AID). However, if you have some proprietary methods for selection, you have to manage your own additional mechanism to check if it is necessary to open the cless field or not.
int Cless_ExplicitSelection_Selection_IsClessAllowed (void);

//! @}



//! \addtogroup ClessExplicitSelectionAppSelectionAdvanced
//! @{

//! \brief Perform the APDU process : Clear exchange buffer, Start Cless Driver, execute APDU process and update exchange output buffer with APDU results.
//! \param[in] bApduBefore Indicates if APDU Before (\a TRUE) or APDU After (\a FALSE) method is required.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the APDU method result. Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess
//! function for more information about the possible returned data.
//! \return
//!		- \ref CLESS_STATUS_OK if method correctly applied.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED if EMV contactless driver is not opened.
//!		- \ref CLESS_STATUS_NO_MATCHING_APDU if there is no matching APDU (no available results).
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to add the result in \a pSharedDataStruct.
//!		- \ref CLESS_STATUS_KO if an error occurred.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR if a communication error with the card occurred.
//!		- \ref CLESS_STATUS_INVALID_PARAM if an internal error occurred.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_ApduMethodProcess(int bApduBefore, T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! \brief Store in exchange buffer tags information of result of AID selection made by APDU Method.
//! \param[in] bApduBefore Indicates if APDU Before (\a TRUE) or APDU After (\a FALSE) method is required.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the APDU method result. Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess
//! function for more information about the possible returned data.
//! \return
//!		- \ref CLESS_STATUS_OK if method correctly applied.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//!		- \ref CLESS_STATUS_NO_MATCHING_APDU if there is no matching APDU (no available results).
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to add the result in \a pSharedDataStruct.
//!		- \ref CLESS_STATUS_KO if an error occurred.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_ApduMethodResults(int bApduBefore, T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! \brief Perform the "List Of Aid" application selection process : Clear exchange buffer, Start Cless Driver, execute APDU process and update exchange output buffer with APDU results.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the List Of AID method process result. Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess
//! function for more information about the possible returned data.
//! \param[in] bAidSupportingBothEpAndLoaAllowed \a TRUE if AID having both AP and LOA options set have to be used for application selection, \a FALSE if only AID having LOA flag (EP not supported) have to be used.
//! \return
//!		- \ref CLESS_STATUS_OK if method correctly applied and result correctly provided in \a pSharedDataStruct.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED if EMV contactless driver is not opened.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID The candidate list is empty after the application selection processing.
//!		- \ref CLESS_STATUS_CARD_BLOCKED The card has returned 0x6A81 to the SELECT command.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR There is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED If cannot send command to the card because contactless interface is not opened.
//!		- \ref CLESS_STATUS_INVALID_PARAM if an internal error occurred.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the application selection processing.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_ListOfAidMethodProcess (T_SHARED_DATA_STRUCT* pSharedDataStruct, const int bAidSupportingBothEpAndLoaAllowed);

//! \brief Remove AID having the highest priority from the candidate list and SELECT next highest AID if available.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the List Of AID method process result (after removal).
//! Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess function for more information about the possible returned data.
//! \return
//!		- \ref CLESS_STATUS_OK if method correctly applied and result correctly provided.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED if EMV contactless driver is not opened.
//!		- \ref CLESS_STATUS_INVALID_PARAM if an internal error occurred.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to perform the final application selection.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR a communication error occurred with the card (card removed for example).
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED Final SELECT command cannot be sent because contactless interface is not opened.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID if there is no more AID in the candidate list.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_ListOfAidMethodRemoveAid(T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! \brief Store in exchange buffer tags information of result of AID selection made by ListOfAidMethod.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the List Of AID method process result. Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess
//! function for more information about the possible returned data.
//! \return
//!		- \ref CLESS_STATUS_OK if candidate list is not empty and one or several candidate element are provided.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID The candidate list is empty after the application selection processing.
//!		- \ref CLESS_STATUS_CARD_BLOCKED The card has returned 0x6A81 to the SELECT command.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR There is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED If cannot send command to the card because contactless interface is not opened.
//!		- \ref CLESS_STATUS_INVALID_PARAM if an internal error occurred.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the application selection processing.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_GetListOfAidMethodResults(T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! \brief This function performs PPSE (using Entry Point) method.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the PPSE method process result. Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess
//! function for more information about the possible returned data.
//! \return
//!		- \ref CLESS_STATUS_OK if method correctly applied and result correctly provided.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED if EMV contactless driver is not opened.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the processing or to copy results in the output buffer.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID if there is no matching AID (candidate list is empty).
//!		- \ref CLESS_STATUS_CARD_BLOCKED the presented card is blocked.
//!		- \ref CLESS_STATUS_APPLICATION_BLOCKED the application of the presented card is blocked.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR there is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_INTERNAL_ERROR if an internal error occurred.
//!		- \ref CLESS_STATUS_MISSING_ICC_DATA a mandatory card data is missing.
//!		- \ref CLESS_STATUS_ICC_FORMAT_ERROR a data returned by the card is not correctly formatted.
//!		- \ref CLESS_STATUS_ICC_REDUNDANT_DATA a data returned by the card is redundant.
//!		- \ref CLESS_STATUS_BAD_PPSE_SW if the status word returned by the card on PPSE is not expected.
//!		- \ref CLESS_STATUS_BAD_COMPONENT_INIT if Entry Point cannot be used because of a bad initialisation.
//!		- \ref CLESS_STATUS_EP_CLESS_SELECTION_NOT_ALLOWED if it is not possible to perform Entry Point application selection as there is no available AID for this method (no AID or no pre processing has been performed).
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_PpseMethodProcess(T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! brief This function removes the AID having the highest priority in the candidate list for the PPSE method (done by Entry Point).
//! \param[out] pSharedDataStruct Shared Exchange structure containing the PPSE method process result. Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess
//! function for more information about the possible returned data.
//! \return
//!		- \ref CLESS_STATUS_OK if results correctly got.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//! 	- \ref CLESS_STATUS_MISSING_PARAM if a mandatory parameter is missing.
//! 	- \ref CLESS_STATUS_INVALID_PARAM if one of the provided parameters is incorrect.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory.
//! 	- \ref CLESS_STATUS_NO_MATCHING_AID if the candidate list is empty.
//! 	- \ref CLESS_STATUS_COMMUNICATION_ERROR if a communication error occurred with the contactless card.
//!		- \ref CLESS_STATUS_EP_NOT_LOADED if Entry Point component is not loaded.
//! 	- \ref CLESS_STATUS_KO if an error occurred.
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_PpseMethodRemove(T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! \brief This function return response of PPSE processing (using Entry Point) method.
//! \param[out] pSharedDataStruct Shared Exchange structure containing the PPSE method process result. Refer to \ref Cless_ExplicitSelection_Selection_ApplicationSelectionProcess
//! function for more information about the possible returned data.
//! \return
//!		- \ref CLESS_STATUS_OK if result correctly provided.
//!		- \ref CLESS_STATUS_NOT_ALLOWED if explicit function call is not allowed.
//!		- \ref CLESS_STATUS_CLESS_NOT_OPENED if EMV contactless driver is not opened.
//!		- \ref CLESS_STATUS_LACK_OF_MEMORY if there is not enough memory to complete the processing or to copy results in the output buffer.
//!		- \ref CLESS_STATUS_NO_MATCHING_AID if there is no matching AID (candidate list is empty).
//!		- \ref CLESS_STATUS_CARD_BLOCKED the presented card is blocked.
//!		- \ref CLESS_STATUS_APPLICATION_BLOCKED the application of the presented card is blocked.
//!		- \ref CLESS_STATUS_COMMUNICATION_ERROR there is a communication error with the card (card removed for example).
//!		- \ref CLESS_STATUS_INTERNAL_ERROR if an internal error occurred.
//!		- \ref CLESS_STATUS_MISSING_ICC_DATA a mandatory card data is missing.
//!		- \ref CLESS_STATUS_ICC_FORMAT_ERROR a data returned by the card is not correctly formatted.
//!		- \ref CLESS_STATUS_ICC_REDUNDANT_DATA a data returned by the card is redundant.
//!		- \ref CLESS_STATUS_BAD_PPSE_SW if the status word returned by the card on PPSE is not expected.
//!		- \ref CLESS_STATUS_BAD_COMPONENT_INIT if Entry Point cannot be used because of a bad initialisation.
//!		- \ref CLESS_STATUS_EP_CLESS_SELECTION_NOT_ALLOWED if it is not possible to perform Entry Point application selection as there is no available AID for this method (no AID or no pre processing has been performed).
//! \note The output buffer (\a pSharedDataStruct) is automatically cleared.
int Cless_ExplicitSelection_Selection_GetPpseMethodResults(T_SHARED_DATA_STRUCT* pSharedDataStruct);

//! @}



//! \addtogroup GenericParametersFormat
//! @{
//! This section describes how to format the parameters to be sent to the DLL to perform card detection and application selection. The method is identical whatever
//! the method used : \a implicit selection or \a explicit selection.
//!
//! <br><br><h2>Principle</h2><br>
//! All the parameters (for both card detection and application selection) shall be provided at the same time, before the transaction has been started (the main goal
//! of providing all the parameters at the same time is to avoid to waste time during the transaction itself). All of these parameters are provided into a \a TLV-Tree
//! generic structure form. The only difference between explicit and implicit selection is the way to provide these parameters :
//!	- Through the \a CLESS_GIVE_INFO service for implicit selection. Refer to \ref ClessImplicitGiveInfo for more information.
//!	- Using the \ref Cless_ExplicitSelection_LoadData function.
//!
//! <br><br><h2>TLV-Tree content</h2>
//! Here is described what are the possible data to be provided in the TLV Tree for card detection and application selection.
//!
//! <br><h3> Card detection parameters</h3>
//! You can specify all the card types (i.e. Level 1 types) to be supported by your application. The following tag shall be provided :
//!	- \ref TAG_GENERIC_DETECTION_TYPE that indicates the type of cards to be detected.
//!
//! For explicit selection (using the API functions), the following data may be provided :
//!	- \ref TAG_GENERIC_DETECTION_GLOBAL_TIMEOUT that indicates the global timeout for card detection.
//!
//! <br><h3> Transaction amount and currency exponent (explicit selection only) </h3>
//! For AID criterion, it is possible to use Entry Point. In this case, pre processing could be performed according to Entry Point specification. 
//! So, the following data could be provided (applicable in explicit selection only, as the following information are automatically provided in implicite selection mode) :
//!	- \ref TAG_EMV_AMOUNT_AUTH_BIN : Amount, Authorised, in binary format.
//!	- \ref TAG_EMV_TRANSACTION_CURRENCY_EXPONENT : the transaction currency exponent (necessary for status check only). If not provided, status check will be considered as active if amount authorised is 1, else, it will take into account the currency exponent.
//! 
//! <br><h3> AID selection criteria</h3>
//! This kind of criteria is used to make application selection using AID. Two methods are available using AID as selection criterion :
//!	- Entry Point application selection (specified by EmvCo).
//!	- List Of AID method that is used for compatibility with some specific contactless transaction flow.
//! Generally, AID criterion are used to perform transactions using transaction flow such as MasterCard PayPass, Visa payWave, etc (transaction flow using AID method).
//!
//! If a such kind of criteria matches with the presented card, your application will be called back on the \a CLESS_DEBIT_AID service.
//! Please refer to \ref ClessImplicitDebitAid for more information about this service.
//!
//! Each AID criteria is provided in a \ref TAG_EP_AID_INFORMATION structure. One or several structure can be sent (depending on the number of AID criterion you want to support).
//! This section describes what are the parameters to be added to \ref TAG_EP_AID_INFORMATION structure to create an AID criteria for application selection.
//! Each structure consists of :
//!	- \ref TAG_EMV_AID_TERMINAL : Supported AID itself (5-16 bytes).
//!	- \ref TAG_EP_KERNEL_TO_USE : Kernel to be used for this AID. Refer to EntryPointPossibleKernels for more information about the possible values.
//!	- \ref TAG_EP_AID_OPTIONS : AID options (PPSE, List Of AID, Zero amount allowed, partial AID allowed, etc).
//!	- \ref TAG_EP_CLESS_TRANSACTION_LIMIT : Contactless transaction limit (optional).
//!	- \ref TAG_EP_CLESS_FLOOR_LIMIT : Contactless Floor Limit (optional).
//!	- \ref TAG_EP_CLESS_CVM_REQUIRED_LIMIT : Contactless CVM Required Limit (optional).
//!	- \ref TAG_EMV_TERMINAL_FLOOR_LIMIT : Terminal Floor Limit (used only if the <i>Contactless Floor Limit is not present</i> (optional).
//!	- \ref TAG_EP_TERMINAL_TRANSACTION_QUALIFIERS : Terminal Transaction Qualifiers (conditional, only mandatory when the kernel to be used is \ref DEFAULT_EP_KERNEL_VISA).
//!
//! <br><h3> APDU selection criteria</h3>
//! This kind of criteria is used to make application selection using APDU. The goal of this method is to send a defined APDU and to check is the card response matches with the expected criterion.
//! There are two kinds of APDU methods :
//!	- APDU Before method (executed before the AID methods).
//!	- APDU After method (executed after the AID methods).
//! These methods are processed in an identical way. The difference is only the moment where they are executed.
//!
//! If a such kind of criteria matches with the presented card, your application will be called back on the \a CLESS_DEBIT service.
//! Please refer to \ref ClessImplicitDebit for more information about this service.
//!
//! Each APDU criteria is provided in a \ref TAG_GENERIC_APDU_INFORMATION structure. One or several structure can be sent (depending on the number of APDU criterion you want to support).
//! Each structure consists of :
//!	- \ref TAG_GENERIC_APDU_COMMAND_TO_SEND : APDU to be sent to the card.
//!	- \ref TAG_GENERIC_APDU_EXPECTED_STATUS_WORD : Expected status word (for the sent command). This tag shall be present if expected response is not present.
//!	- \ref TAG_GENERIC_APDU_EXPECTED_CARD_RESPONSE : Expected card response. This tag shall be present if expected status word is not present.
//!	- \ref TAG_GENERIC_APDU_RESPONSE_MASK : Card response mask (if and expected card response has been provided). This is only used if expected card response is present. Note it shall have the same length as the expected card response.
//!	- \ref TAG_GENERIC_APDU_OPTIONS : Indicates the APDU options (After / Before, priority).
//!
//! <br><h3>Other parameters</h3>
//! Here are described all other parameters that can be sent to the DLL before starting a transaction.
//!	-\ref TAG_GENERIC_GUI_MODE indicates the GUI default mode to be used.
//!
//! <br><br><h2>Example</h2>
//! Here is an example about how to create the TLV-Tree that contain the card detection and application selection parameters.<br>
//!
//! \include Cless_HighLevel_Sample_01.c
//! @}



//! \addtogroup ClessImplicitOverview
//! @{
//! <br><br><h2>Presentation</h2><br>
//! The implicit selection is a mechanism that allows you to use both contact, swipe, manual entry and contactless interfaces
//! for a transaction, in a multi application context. This mechanism needs the Telium Manager to work. The principle is that
//! the mechanism will choose the appropriate application to manage the card (contact or contactless).<br><br>
//! So, a transaction is performed as following :
//!	- Enter the transaction amount and validate it.
//!	- If one or several application manage the contactless, each of them provides its selection criteria for each contactless card it wants to manage.
//!	- Then, the terminal is waiting for a card on contact, swipe, manual entry and contactless interfaces.
//!	- If a contact card is swiped or inserted, the contact application is chosen and the contactless interface is automatically disabled.
//!	- If a contactless card is presented, the implicit selection mechanism will choose the appropriate application according to the presented card and to the selection criterion
//!	provided at the beginning of the transaction.
//!	- The transaction is performed.
//! <br>
//! This mechanism is simple to use. The multi application context is automatically managed by the terminal. Your application just needs to implement some services to indicate
//! which cards with which criterion it wants to manage.
//!
//! <br><br><h2>Available services</h2><br>
//! Here are briefly described all the available services for implicit selection mechanism :
//!	- \a CLESS_GIVE_INFO : it allows your application to provide all the parameters corresponding to all the card it can support
//!	(detection type, application selection criterion, etc). Your application is called on this service after the transaction amount
//!	has been input. If it does not implement this service, it means it does not manage contactless interface. Refer to
//!	\ref ClessImplicitGiveInfo for more information.
//!	- \a CLESS_DEBIT_AID : your application is called on this service (if implemented) if the presented card matched with one of
//!	the AID criteria provided in the \a CLESS_GIVE_INFO service. Refer to \ref ClessImplicitDebitAid for more information.
//!	- \a CLESS_DEBIT : your application is called on this service (if implemented) if the presented card matched with any other
//!	criteria than AID or if your application indicated it supports the card on the \a CLESS_IS_FOR_YOU service. Refer to
//!	\ref ClessImplicitDebit for more information.
//!	- \a CLESS_IS_FOR_YOU : your application is called on this service (if implemented) if the presented card is unknown or if
//!	it is a Mifare card. It can allow your application to make specific processing on specific cards if necessary. If your application
//!	indicates it can support the presented car, then it will be called on the \a CLESS_DEBIT service. Refer to
//!	\ref ClessImplicitIsForYou for more information.
//!	- \a CLESS_END : your application is called on this service (if implemented) at the end of every contactless transaction (just
//!	before returning on idle state) or if a contact interface is initiated. Refer to \ref ClessImplicitEnd for more information.
//!
//! <br><br>
//! There are also some services allowing you to make some customisation. Here are briefly described the available customisation services :
//!	- \ref CLESS_SERVICE_CUST_IMPSEL_GUI : GUI Customisation service.
//!	- \ref CLESS_SERVICE_CUST_IMPSEL_AS_PROC : Application selection result processing customisation.
//!
//! <br><br><h2>Flow overview</h2><br>
//! Here is briefly described the implicit selection transaction flow.<br>
//! \msc
//! hscale = "1.5";
//! "Manager","DLL TPass","Applications";
//! |||;
//! "Manager" rbox "Manager" [label="Amount Entry"];
//! |||;
//! "Manager"=>>"DLL TPass" [label = "Start Cless Payment"];
//!	"DLL TPass"=>>"Applications" [label = "CLESS_GIVE_INFO"];
//!	"DLL TPass"<<="Applications";
//! "DLL TPass" rbox "DLL TPass" [label="Card detection"];
//! |||;
//! "DLL TPass" rbox "DLL TPass" [label="Application Selection (APDU / AID)"];
//! |||;
//!	"DLL TPass"=>>"Applications" [label="CLESS_DEBIT or CLESS_DEBIT_AID"];
//! "Applications" rbox "Applications" [label="Complete transaction"];
//!	"DLL TPass"<<="Applications";
//! |||;
//! "DLL TPass"=>>"Applications" [label = "CLESS_END"];
//!	"DLL TPass"<<="Applications";
//! |||;
//! "Manager"<<="DLL TPass";
//! \endmsc
//!
//! <br><br><h2>Application Selection flow</h2><br>
//! Here is briefly described the application selection flow that is performed during the implicit selection.<br>
//! For more information about the application selection result customisation, please refer to \ref ClessImplicitCustomisationAsProc section.<br><br>
//! \dot
//! digraph G {
//!		bgcolor="transparent";
//!		ranksep="0.2 equally"
//!
//!		graph [fontname="FreeSans",fontsize=10];
//!		node [shape="box",fontname="FreeSans",fontsize=10,height=0.4,width=2];
//!		edge [fontname="FreeSans",fontsize=10,labelfontname="FreeSans",labelfontsize=10];
//!
//!		nodeStart [label="Application Selection Process",shape="ellipse",style=filled];
//!		node_ApduBefore [label="APDU Before method",size="50,2",style=filled,fillcolor=plum];
//!		node_IsApduBeforeMatched [label="APDU Before matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_Ppse [label="PPSE method with Entry Point",size="50,2",style=filled,fillcolor=plum];
//!		node_IsPpseMatched [label="AID matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_Loa [label="List Of AID method",size="50,2",style=filled,fillcolor=plum];
//!		node_IsLoaMatched [label="AID matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_ApduAfter [label="APDU Before method",size="50,2",style=filled,fillcolor=plum];
//!		node_IsApduAfterMatched [label="APDU After matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_ClessDebitBefore [label="Call CLESS_DEBIT",size="50,2",style=filled,fillcolor="#EEFFEE"];
//!		node_ClessDebitPpse [label="Call CLESS_DEBIT_AID",size="50,2",style=filled,fillcolor="#EEFFEE"];
//!		node_ClessDebitLoa [label="Call CLESS_DEBIT_AID",size="50,2",style=filled,fillcolor="#EEFFEE"];
//!		node_ClessDebitAfter [label="Call CLESS_DEBIT",size="50,2",style=filled,fillcolor="#EEFFEE"];
//!		node_TransactionCompleted [label="Transaction completed",shape="ellipse",style=filled];
//!		nodeStop [label="No supported criteria",shape="ellipse",style=filled];
//!
//!
//!		nodeStart -> node_ApduBefore [weight=1000];
//!		node_ApduBefore -> node_IsApduBeforeMatched [label="Cust AS_PROC_APDU_BEFORE",weight=1000,fontcolor="#00FF00",URL="\ref CLESS_CUST_AS_PROC_STEP_APDU_BEFORE_STEP_ID"];
//!		node_IsApduBeforeMatched -> node_Ppse [label="No",weight=1000];
//!		node_Ppse -> node_IsPpseMatched [label="Cust AS_PROC_PPSE",weight=1000,fontcolor="#00FF00",URL="\ref CLESS_CUST_AS_PROC_STEP_PPSE_STEP_ID"];
//!		node_IsPpseMatched -> node_Loa [label="No",weight=1000];
//!		node_Loa -> node_IsLoaMatched [label="Cust AS_PROC_LOA",weight=1000,fontcolor="#00FF00",URL="\ref CLESS_CUST_AS_PROC_STEP_LIST_OF_AID_STEP_ID"];
//!		node_IsLoaMatched -> node_ApduAfter [label="No",weight=1000];
//!		node_ApduAfter -> node_IsApduAfterMatched [label="Cust AS_PROC_APDU_AFTER",weight=1000,fontcolor="#00FF00",URL="\ref CLESS_CUST_AS_PROC_STEP_APDU_AFTER_STEP_ID"];
//!		node_IsApduAfterMatched -> nodeStop [label="No",weight=1000];
//!		node_IsApduBeforeMatched -> node_ClessDebitBefore [label="Yes",weight=1];
//!		node_IsPpseMatched -> node_ClessDebitPpse [label="Yes",weight=1];
//!		node_IsLoaMatched -> node_ClessDebitLoa [label="Yes",weight=1];
//!		node_IsApduAfterMatched -> node_ClessDebitAfter [label="Yes",weight=1];
//!		node_ClessDebitAfter -> node_ApduAfter [label="CONTINUE METHOD",weight=100,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_CONTINUE_METHOD"];
//!		node_ClessDebitBefore -> node_ApduBefore [label="CONTINUE METHOD",weight=100,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_CONTINUE_METHOD"];
//!		node_ClessDebitPpse -> node_Ppse [label="CONTINUE METHOD",weight=100,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_CONTINUE_METHOD"];
//!		node_ClessDebitLoa -> node_Loa [label="CONTINUE METHOD",weight=100,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_CONTINUE_METHOD"];
//!
//!		node_ClessDebitAfter -> node_TransactionCompleted [label="END",weight=1000,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_END"];
//!		node_ClessDebitBefore -> node_TransactionCompleted [label="END",weight=1,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_END"];
//!		node_ClessDebitPpse -> node_TransactionCompleted [label="END",weight=1,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_END"];
//!		node_ClessDebitLoa -> node_TransactionCompleted [label="END",weight=1,fontcolor="#0000FF",fontsize=10,URL="\ref CLESS_CR_MANAGER_END"];
//!		nodeStop -> node_TransactionCompleted [label="Cust AS_PROC_END",weight=10000,fontcolor="#00FF00",URL="\ref CLESS_CUST_AS_PROC_STEP_END_STEP_ID"];
//!	}
//! \enddot
//! @}



//! \addtogroup ClessImplicitGiveInfo
//! @{
//! <br><br><h2>Service overview</h2>
//! This entry point is used to get all the selection criterions to perform a contactless transaction. It can also be used to perform processing before the contactless card is presented.
//! According to the criterion returned by the application, the card detection and activation would be done. If application selection criterions are also provided, this step will also be
//! performed (AID method or APDU method).
//!
//! <br><br><h2>Service activation</h2>
//! This service is called after the amount entry (done at the Manager level). To be called, it is necessary to :
//!	- The TPass DLL to be loaded in the terminal.
//!	- The Entry Point component shal be loaded.
//!	- Contactless shall be activated (<i>F/TELIUM MANAGER/Parameters/Initialisation/Contactless</i>).
//!
//! <br><br><h2>Service calling type and environment</h2>
//! This service is called using the \a BROADCAST mode (i.e. all the applications declaring this service are called).<br>
//! When called, all the payment interfaces are closed.
//!
//! <br><br><h2>Service Parameters</h2>
//!	\param[in] AppliNum Application number provided by the Manager.
//!	\param[in] Param_in \a S_TRANSIN structure that can be used to retrieve :
//!		- The transaction amount.
//!		- The transaction currency code and exponent.
//!		- If the transaction amount has been entered or not.
//!		- The transaction type (depending on the Manager configuration).
//!	\param[out] Param_out \a S_CLESS_GIVEINFO structure containing :
//!		- \a stRestartCless Obsolete parameter.
//!		- \a stRestartWithoutCless Obsolete parameter.
//!		- \a del Not used as a DEL anymore. The buffer is filled with a <b>serialised TLV-Tree containing all the contactless detection and activation criterion</b>. See below for more information.
//!
//! <br><br><h2>Return</h2>
//! Always \a FCT_OK.
//!
//! <br><br><h2>Example</h2>
//! Here is an example of how to implement the \a CLESS_GIVE_INFO service function :
//!
//! \include Cless_HighLevel_Sample_02.c
//! \note Refer to \ref GenericParametersFormat for more information about the TLV_Tree content.
//!
//! @}



//! \addtogroup ClessImplicitDebitAid
//! @{
//! <br><br><h2>Service overview</h2>
//! This service is called to perform the contactless transaction using AID method. If this entry point of the application is called, that means the presented card matches
//! with one of the AID criterion sent on the \a CLESS_GIVE_INFO entry point (refer to \ref ClessImplicitGiveInfo for more information).
//!
//! <br><br><h2>Service activation</h2>
//! When called, the card is in the field, the transaction has started, and the following transaction steps has been performed :
//!	- Card detection and activation.
//!	- Application selection.
//!
//! <br><br><h2>Service calling type and environment</h2>
//! This service is called using the \a SELECTING mode (i.e. only the selected application is called).<br>
//! When called, the contactless application is opened, as well as contact interface (depending on the terminal configuration, but generally, \a CAM0 and \a SWIPE2 devices are opened).
//! When your application is called on this service, it means one AID (or several) method has matched with the card. Generally, only ISO cards can match with AID methods.
//!
//! <br><br><h2>Service Parameters</h2>
//!	\param[in] AppliNum Application number provided by the Manager.
//! \param[in] nSize Size of \a pData.
//!	\param[in] pData is considered as a buffer, and not as a \a S_TRANSIN structure. This is a buffer containing the card detection and application selection result. Refer to the example below for more information about how to retrieve the provided data.
//! It contains the following data :
//!	- Manager information :
//!		- \ref TAG_GENERIC_MANAGER_AMOUNT_ENTRY indicates the type of the amount entry: \a MANUAL_ENTRY, \a CASH_REG_ENTRY or \a NO_ENTRY.
//!		- \ref TAG_GENERIC_MANAGER_TRANSACTION_TYPE indicates the type of the transaction: \a DEBIT_TR, \a CREDIT_TR, \a CANCEL_TR or \a EXT_CANCEL_TR.
//!		- \ref TAG_GENERIC_MANAGER_CASH_REGISTER_NUMBER indicates the cash register number if applicable.
//!		- If \ref TAG_GENERIC_MANAGER_AMOUNT_ENTRY is not \a NO_ENTRY:
//!			- \ref TAG_EMV_AMOUNT_AUTH_BIN indicates the amount of the transaction.
//!			- \ref TAG_EMV_TRANSACTION_CURRENCY_CODE indicates the currency code.
//!			- \ref TAG_EMV_TRANSACTION_CURRENCY_EXPONENT indicates the currency exponent.
//!			- \ref TAG_GENERIC_MANAGER_CURRENCY_LABEL indicates the currency label.
//!	- Card detection results :
//!		- \ref TAG_GENERIC_DETECTION_RESULT indicates the card detection result.
//!		- \ref TAG_GENERIC_DETECTED_CARD_TYPE indicates the detected card type.
//!		- \ref TAG_GENERIC_ERROR_INFORMATION indicates the error code information (if present).
//!	- Application Selection result : it depends on the applied method :
//!		- For the "Entry Point" method, it consists of
//!			- \ref TAG_EP_NUMBER_OF_CANDIDATE_AID_IN_LIST : the number of AID within the candidate list.
//!			- \ref TAG_EP_FINAL_SELECT_COMMAND_SENT : Final SELECT command sent to the card.
//!			- \ref TAG_EP_FINAL_SELECT_STATUS_WORD : Final SELECT status word.
//!			- \ref TAG_EP_FINAL_SELECT_RESPONSE : Final SELECT card response.
//!			- \ref TAG_EP_ERROR_INFORMATION : Error code information of Entry Point (if present).
//!			- \ref TAG_GENERIC_APPLIED_METHOD : Applied Application selection method (\ref GENERIC_METHOD_PPSE or \ref GENERIC_METHOD_LOA in this case).
//!			- At least one AID candidate element, corresponding to the AID that matched (each candidate element is stored in a \ref TAG_EP_CANDIDATE_LIST_ELEMENT constructed tag) :
//!				- \ref TAG_EMV_AID_CARD : the AID as sent in the Final SELECT command (as supported by the card).
//!				- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!				- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!				- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!				- \ref TAG_EP_AID_ADDITIONAL_RESULTS : additional results for this AID (floor limit exceeded, zero amount, etc).
//!				- \ref TAG_EP_CLESS_APPLI_CAPABILITY_TYPE : Card application capability type as returned by the card (if present).
//!				- \ref TAG_EP_TERMINAL_TRANSACTION_QUALIFIERS : Terminal Transaction Qualifiers (if present, for Visa AID only, modified according to the Entry Point specification).
//!				- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!				- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!				- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//!		- For the "List Of AID" method, it consists of :
//!			- \ref TAG_EP_FINAL_SELECT_COMMAND_SENT : Final SELECT command sent to the card.
//!			- \ref TAG_EP_FINAL_SELECT_STATUS_WORD : Final SELECT status word.
//!			- \ref TAG_EP_FINAL_SELECT_RESPONSE : Final SELECT card response.
//!			- At least one AID candidate element, corresponding to the AID that matched (each candidate element is stored in a \ref TAG_EP_CANDIDATE_LIST_ELEMENT constructed tag) :
//!				- \ref TAG_EMV_DF_NAME : the DF Name returned by the card (and the one sent in the Final SELECT command (as supported by the card)).
//!				- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!				- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!				- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!				- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!				- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!				- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//!				- \ref TAG_EMV_PDOL : PDOL as provided by the card (if present).
//!				- \ref TAG_EMV_LANGUAGE_PREFERENCE : Language preference as provided by the card (if present).
//!				- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX : Issuer Code Table Index as provided by the card (if present).
//!				- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA : Issuer Discretionary Data as provided by the card (if present).
//! \note It is possible to have several \ref TAG_EP_CANDIDATE_LIST_ELEMENT structures provided for the same card, depending on the AID you supports. In this case, it is the role of your application
//! to choose the correct one to perform the transaction. If there is a conflict with another application (in a multi-application context) because it has configured the same AID, no application is
//! called and transaction is terminated.
//!
//! \note Take care the following tags returned within the candidate element of the List Of AID method are not extracted from the Final SELECT card response, but from the SELECT response of
//! the SELECT ADF command. This is the role of your application (or the contactless kernel if applicable) to parse the Final SELECT response and extract your own data :
//!	- \ref TAG_EMV_DF_NAME
//!	- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR
//!	- \ref TAG_EMV_APPLICATION_LABEL
//!	- \ref TAG_EMV_PDOL
//!	- \ref TAG_EMV_LANGUAGE_PREFERENCE
//!	- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX
//!	- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA
//!
//! <br><br><h2>Return</h2>
//! Several returns are available. It depends on how the transaction has been performed :
//!	- \ref CLESS_CR_MANAGER_END if the transaction is correctly completed and the terminal shall return to idle state.
//!	- \ref CLESS_CR_MANAGER_RESTART if the transaction shall be restarted from the beginning (if a communication error occurred with the card for example).
//!	- \ref CLESS_CR_MANAGER_RESTART_WO_CLESS if the transaction shall be conducted over another payment interface.
//!	- \ref CLESS_CR_MANAGER_RESTART_CHIP_ONLY if the transaction shall be conducted only in chip mode.
//!	- \ref CLESS_CR_MANAGER_RESTART_SWIPE_ONLY if the transaction shall be conducted only in swipe mode.
//!	- \ref CLESS_CR_MANAGER_RESTART_CLESS_ONLY if the transaction shall be conducted only in contacless mode.
//!	- \ref CLESS_CR_MANAGER_REMOVE_AID if the current AID shall be removed from the candidate list and if the next one having the highest priority shall be used (if present). Note this return is only applicable when AID method has matched.
//!	- \ref CLESS_CR_MANAGER_CONTINUE_METHOD if the next criteria in the same method shall be used (similar to \ref CLESS_CR_MANAGER_REMOVE_AID if AID method is used).
//!
//! <br><br><h2>Example</h2>
//! In the following example, we consider there is only one candidate element.<br>
//!
//! \include Cless_HighLevel_Sample_03.c
//! @}



//! \addtogroup ClessImplicitDebit
//! @{
//! <br><br><h2>Service overview</h2>
//! This service is called to perform the contactless transaction. If this service is called, that means the card that has been presented matches with the APDU criterion that have been sent on
//! the \a CLESS_GIVE_INFO service (refer to \ref ClessImplicitGiveInfo for more information). It is also possible for this service to be called after the application has accepted the card on the \a CLESS_IS_FOR_YOU service (refer to \ref ClessImplicitIsForYou
//! for more information about this service).
//!
//! <br><br><h2>Service activation</h2>
//! When called, the card is in the field, the transaction has started, and the following transaction steps has been performed :
//!	- Card detection and activation.
//!	- Application selection.
//!
//! <br><br><h2>Service calling type and environment</h2>
//! This service is called using the \a SELECTING mode (i.e. only the selected application is called).<br>
//! When called, the contactless driver is opened, as well as contact interface (depending on the terminal configuration, but generally, \a CAM0 and \a SWIPE2 devices are opened).
//! When your application is called on this service, it means one APDU method has matched with the card or your application has indicated it wants to manage this card on the \a CLESS_IS_FOR_YOU service.
//!
//! <br><br><h2>Service Parameters</h2>
//!	\param[in] AppliNum Application number provided by the Manager.
//! \param[in] nSize Size of \a pData.
//!	\param[in] pData is considered as a buffer, and not as a \a S_TRANSIN structure. This is a buffer containing the card detection and application selection result. Refer to the example below for more information about how to retrieve the provided data.
//! It contains the following data :
//!	- Manager information :
//!		- \ref TAG_GENERIC_MANAGER_AMOUNT_ENTRY indicates the type of the amount entry: \a MANUAL_ENTRY, \a CASH_REG_ENTRY or \a NO_ENTRY.
//!		- \ref TAG_GENERIC_MANAGER_TRANSACTION_TYPE indicates the type of the transaction: \a DEBIT_TR, \a CREDIT_TR, \a CANCEL_TR or \a EXT_CANCEL_TR.
//!		- \ref TAG_GENERIC_MANAGER_CASH_REGISTER_NUMBER indicates the cash register number if applicable.
//!		- If \ref TAG_GENERIC_MANAGER_AMOUNT_ENTRY is not \a NO_ENTRY:
//!			- \ref TAG_EMV_AMOUNT_AUTH_BIN indicates the amount of the transaction.
//!			- \ref TAG_EMV_TRANSACTION_CURRENCY_CODE indicates the currency code.
//!			- \ref TAG_EMV_TRANSACTION_CURRENCY_EXPONENT indicates the currency exponent.
//!			- \ref TAG_GENERIC_MANAGER_CURRENCY_LABEL indicates the currency label.
//!	- Card detection results :
//!		- \ref TAG_GENERIC_DETECTION_RESULT indicates the card detection result.
//!		- \ref TAG_GENERIC_DETECTED_CARD_TYPE indicates the detected card type.
//!		- \ref TAG_GENERIC_ERROR_INFORMATION indicates the error code information (if present).
//!	- If Application Selection has been performed, here are the provided data (APDU method applied) :
//!		- \ref TAG_GENERIC_APPLIED_METHOD : Applied Application selection method (if present, \ref GENERIC_METHOD_APDU_BEFORE or \ref GENERIC_METHOD_APDU_AFTER in this case).
//!		- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!		- \ref TAG_GENERIC_APDU_COMMAND_TO_SEND : APDU command that matched with the card.
//!		- \ref TAG_GENERIC_APDU_CARD_RESPONSE : Card response to the sent APDU.
//!		- \ref TAG_GENERIC_APDU_CARD_STATUS_WORD : Card response status word to the sent command.
//!
//! <br><br><h2>Return</h2>
//! Several returns are available. It depends on how the transaction has been performed :
//!	- \ref CLESS_CR_MANAGER_END if the transaction is correctly completed and the terminal shall return to idle state.
//!	- \ref CLESS_CR_MANAGER_RESTART if the transaction shall be restarted from the beginning (if a communication error occurred with the card for example).
//!	- \ref CLESS_CR_MANAGER_RESTART_WO_CLESS if the transaction shall be conducted over another payment interface.
//!	- \ref CLESS_CR_MANAGER_RESTART_CHIP_ONLY if the transaction shall be conducted in chip mode only.
//!	- \ref CLESS_CR_MANAGER_RESTART_SWIPE_ONLY if the transaction shall be conducted in swipe mode only.
//!	- \ref CLESS_CR_MANAGER_RESTART_CLESS_ONLY if the transaction shall be conducted in contacless mode only.
//!	- \ref CLESS_CR_MANAGER_CONTINUE_METHOD if the next criteria in the same method shall be used.
//!
//! <br><br><h2>Example</h2>
//! In the following example, we consider there is only one candidate element.<br>
//!
//! \include Cless_HighLevel_Sample_04.c
//! @}



//! \addtogroup ClessImplicitIsForYou
//! @{
//! <br><br><h2>Service overview</h2>
//! This service is called when the detected card is unknown. It can be an ISO14443-4 card that does not match with any of the APDUs or AIDs given by the applications, or it can be a non ISO14443-4 card (Mifare, ...).
//!
//! <br><br><h2>Service activation</h2>
//! When called, the card is in the field, the transaction has started, and the following transaction steps has been performed :
//!	- Card detection and activation.
//!	- If it is an ISO14443-4 card: APDUs before, AIDs (Entry Point and List Of AIDs) and APDUs after.
//!
//! <br><br><h2>Service calling type and environment</h2>
//! This service is called using the \a STOP_DIFFUSION mode (i.e. all applications are called unless one returns \a STOP).<br>
//! When called, the contactless driver is opened, as well as contact interface (depending on the terminal configuration, but generally, \a CAM0 and \a SWIPE2 devices are opened).
//! When your application is called on this service, it means that no APDU and no AID has matched with the card.<br>
//! With this service, each application has a way to return an interest level for the management of the card. After all applications answer (or when one application returns \a STOP), the application with the higher interest level (lower value) will be called on the \a CLESS_DEBIT service (see \ref ClessImplicitDebit).
//!
//! <br><br><h2>Service Parameters</h2>
//!	\param[in] AppliNum Application number provided by the Manager.
//! \param[in] nSize Size of \a pData.
//!	\param[in] pData is considered as a buffer, and not as a \a _DEL_ structure. This is a buffer containing the card detection and application selection result. Refer to the example below for more information about how to retrieve the provided data.
//! It contains the following data :
//!	- Manager information :
//!		- \ref TAG_GENERIC_MANAGER_AMOUNT_ENTRY indicates the type of the amount entry: \a MANUAL_ENTRY, \a CASH_REG_ENTRY or \a NO_ENTRY.
//!		- \ref TAG_GENERIC_MANAGER_TRANSACTION_TYPE indicates the type of the transaction: \a DEBIT_TR, \a CREDIT_TR, \a CANCEL_TR or \a EXT_CANCEL_TR.
//!		- \ref TAG_GENERIC_MANAGER_CASH_REGISTER_NUMBER indicates the cash register number if applicable.
//!		- If \ref TAG_GENERIC_MANAGER_AMOUNT_ENTRY is not \a NO_ENTRY:
//!			- \ref TAG_EMV_AMOUNT_AUTH_BIN indicates the amount of the transaction.
//!			- \ref TAG_EMV_TRANSACTION_CURRENCY_CODE indicates the currency code.
//!			- \ref TAG_EMV_TRANSACTION_CURRENCY_EXPONENT indicates the currency exponent.
//!			- \ref TAG_GENERIC_MANAGER_CURRENCY_LABEL indicates the currency label.
//!	- Card detection results :
//!		- \ref TAG_GENERIC_DETECTION_RESULT indicates the card detection result.
//!		- \ref TAG_GENERIC_DETECTED_CARD_TYPE indicates the detected card type.
//!		- \ref TAG_GENERIC_ERROR_INFORMATION indicates the error code information (if present).
//!	\param[out] pData The application must give the following tag:
//! - \ref TAG_GENERIC_PRIORITY indicates the interest level to manage the card (0 is the most interested).
//!
//! <br><br><h2>Return</h2>
//! Several returns are available :
//!	- \a FCT_OK to continue to ask to others applications.
//!	- \a STOP to stop asking to others applications.
//!
//! <br><br><h2>Example</h2>
//!
//! \include Cless_HighLevel_Sample_05.c
//! @}



//! \addtogroup ClessImplicitEnd
//! @{
//! <br><br><h2>Service overview</h2>
//! This service is called after the contactless transaction (or when a contact transaction is initiated). It can be used to close peripheral
//! (that had been opened in the \a CLESS_GIVE_INFO service for example) or doing any other treatments.
//!
//! <br><br><h2>Service activation</h2>
//! It is called after at the end of a contactless transaction or just after a contact transaction (chip or swipe) is initiated.
//! Note this service is not called if \ref CLESS_CR_MANAGER_RESTART or \ref CLESS_CR_MANAGER_CONTINUE_METHOD are returned on the \a CLESS_DEBIT or \a CLESS_DEBIT_AID services.
//!
//! <br><br><h2>Service calling type and environment</h2>
//! This service is called using the \a ALL_DIFFUSION mode (i.e. all the applications that implement this service are called).<br>
//! When called, the contactless interface is closed.
//!
//! <br><br><h2>Service Parameters</h2>
//!	\param[in] AppliNum Application number provided by the Manager.
//!
//! <br><br><h2>Return</h2>
//! \a FCT_OK shall always be returned.
//!
//! <br><br><h2>Example</h2>
//!
//! \include Cless_HighLevel_Sample_06.c
//! @}



//! \addtogroup ClessImplicitCustomisationGui
//! @{
//! <br><br><h2>Overview</h2>
//!
//! <br><br><h2>Service activation</h2>
//! It is just necessary to implement the \ref CLESS_SERVICE_CUST_IMPSEL_GUI service. At each transaction start, your application will be called on this service to register
//! the desired GUI steps you want to customise. Then, during the transaction itself, your application is called on each step it has requested to be called. Refer to
//! \ref ClessGenericCustomisationGui form more information about the GUI customisation mechanism.
//!
//! <br><br><h2>Service calling type and environment</h2>
//! This service is called using the \a SELECTING mode (i.e. the application that has the highest priority on this service is called).<br>
//!
//! <br><br><h2>Service Parameters</h2>
//!	\param[in] AppliNum Application number provided by the Manager.
//! \param[in] nSize Size of \a pData (useless as \a pData is a shared buffer, see example below).
//! \param[in,out] pData Shared buffer used to get and provide data for GUI customisation (refer to example below and to \ref ClessGenericCustomisationGui for more information).
//!
//! <br><br><h2>Return</h2>
//! Refer to \ref ClessGenericCustomisationGui for more information about the possible returned values.
//!
//! <br><br><h2>Example</h2>
//!
//! \include Cless_HighLevel_Sample_07.c
//! @}



//! \addtogroup ClessImplicitCustomisationAsProc
//! @{
//! <br><br><h2>Service Overview</h2>
//! <br><h3>Service activation</h3>
//! It is just necessary to implement the \ref CLESS_SERVICE_CUST_IMPSEL_AS_PROC service. At each transaction start, your application will be called on this service to register
//! the desired steps you want to customise. Then, during the application selection itself, your application is called on each step it has requested to be called. Refer to 
//!	\ref ClessGenericCustomisationAsProc for more information.
//!
//! <br><h3>Service calling type and environment</h3>
//! This service is called using the \a SELECTING mode (i.e. the application that has the highest priority on this service is called).<br>
//!
//! <br><br><h3>Service Parameters</h3>
//!	\param[in] AppliNum Application number provided by the Manager.
//! \param[in] nSize Size of \a pData (useless as \a pData is a shared buffer, see example below).
//! \param[in,out] pData Shared buffer used to get and provide data for application selection result customisation (refer to example below for more information).
//!
//! <br><br><h3>Return</h3>
//! Refer to \ref ClessGenericCustomisationAsProc for more information about the possible returned values.
//!
//! <br><br><h2>Examples</h2>
//! Here is an example of how to implement the service in your application, and how to access the provided data :<br>
//!
//! \include Cless_HighLevel_Sample_08.c
//! @}



//! \addtogroup ClessGenericCustomisationAsProc
//! @{
//! <br><br><h2>Overview</h2><br>
//! There is a way to make customisation of the DLL default behaviour after each application selection step. 
//! If your application wants to customise some of the application selection results (on an application selection step), it will be first called to indicate which steps it wants to customise. This is the registration step
//! (\ref TAG_GENERIC_CUST_STEP_ID tag provided with the \ref CLESS_CUST_AS_PROC_REGISTRATION_STEP_ID value). This registration step is called when the transaction is started.
//! The principle runs using the same way for \a implicit and \a explicit selection, the only difference is the way your application will be called for customisation :
//!	- Through a service call for \a implicit selection (refer to \ref ClessImplicitCustomisationAsProc for more information).
//!	- Through a function call for \a explicit selection (refer to \ref ClessExplicitCustom for more information).
//! <br>
//! On the registration step, the application shall indicate which steps it wants to customise by providing the \ref TAG_GENERIC_CUST_STEPS_TO_CUSTOMISE.
//! This tag is a 8 bytes bit field, filled using the following rule : <i>buffer[(StepId-1)/8] += (1<<((StepId-1)%8))</i>.
//! \note On the registration step, the application shall always return \ref CLESS_CUST_CONTINUE.
//!
//! <br><h2>Steps that can be customised</h2>
//! During the application, there are several steps. It is possible for an application to customise the application selection processing after each of these steps. It also could be used to get the status of the execution of each of the 
//!	application selection steps. Here are the existing steps :
//!	- \ref CLESS_CUST_AS_PROC_STEP_APDU_BEFORE_STEP_ID : Step to customise APDU Before method result.
//!	- \ref CLESS_CUST_AS_PROC_STEP_PPSE_STEP_ID : Step to customise PPSE method result.
//!	- \ref CLESS_CUST_AS_PROC_STEP_LIST_OF_AID_STEP_ID : Step to customise List Of AID method result.
//!	- \ref CLESS_CUST_AS_PROC_STEP_APDU_AFTER_STEP_ID : Step to customise APDU After method result.
//!	- \ref CLESS_CUST_AS_PROC_STEP_END_STEP_ID : Step to customise application selection result in case an error occurred or no method matched (when all the method have been applied).
//! You can find these steps in green, in the flow described in the \ref ClessGenericSelectionFlow section. On this figure, the default behaviour is indicated.
//!
//! <br><h2>Data provided for customisation</h2>
//! When your application is called to customise an application selection step result, the following data are provided :
//!	- \ref TAG_GENERIC_CUST_STEP_ID that indicates which step is to be customised.
//!	- \ref TAG_GENERIC_APPLICATION_SELECTION_RESULT indicating the application selection step status code (depends on the step).
//! - Others data related to application selection step :
//!		- Card detection results :
//!			- \ref TAG_GENERIC_DETECTION_RESULT indicates the card detection result.
//!			- \ref TAG_GENERIC_DETECTED_CARD_TYPE indicates the detected card type.
//!			- \ref TAG_GENERIC_ERROR_INFORMATION indicates the error code information (if present).
//!		- Application Selection result : it depends on the applied method :
//!			- For the "Entry Point" method, it consists of (if a method matched) :
//!				- \ref TAG_EP_NUMBER_OF_CANDIDATE_AID_IN_LIST : the number of AID within the candidate list.
//!				- \ref TAG_EP_FINAL_SELECT_COMMAND_SENT : Final SELECT command sent to the card.
//!				- \ref TAG_EP_FINAL_SELECT_STATUS_WORD : Final SELECT status word.
//!				- \ref TAG_EP_FINAL_SELECT_RESPONSE : Final SELECT card response.
//!				- \ref TAG_EP_ERROR_INFORMATION : Error code information of Entry Point (if present).
//!				- \ref TAG_GENERIC_APPLIED_METHOD : Applied Application selection method (\ref GENERIC_METHOD_PPSE or \ref GENERIC_METHOD_LOA in this case).
//!				- At least one AID candidate element (but several could be provided), corresponding to the AID that matched (each candidate element is stored in a \ref TAG_EP_CANDIDATE_LIST_ELEMENT constructed tag) :
//!					- \ref TAG_EMV_AID_CARD : the AID as sent in the Final SELECT command (as supported by the card).
//!					- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!					- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!					- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!					- \ref TAG_EP_AID_ADDITIONAL_RESULTS : additional results for this AID (floor limit exceeded, zero amount, etc).
//!					- \ref TAG_EP_CLESS_APPLI_CAPABILITY_TYPE : Card application capability type as returned by the card (if present).
//!					- \ref TAG_EP_TERMINAL_TRANSACTION_QUALIFIERS : Terminal Transaction Qualifiers (if present, for Visa AID only, modified according to the Entry Point specification).
//!					- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!					- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!					- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//!			- For the "List Of AID" method, it consists of (if a method matched) :
//!				- \ref TAG_EP_FINAL_SELECT_COMMAND_SENT : Final SELECT command sent to the card.
//!				- \ref TAG_EP_FINAL_SELECT_STATUS_WORD : Final SELECT status word.
//!				- \ref TAG_EP_FINAL_SELECT_RESPONSE : Final SELECT card response.
//!				- At least one AID candidate element (but several could be provided), corresponding to the AID that matched (each candidate element is stored in a \ref TAG_EP_CANDIDATE_LIST_ELEMENT constructed tag) :
//!					- \ref TAG_EMV_DF_NAME : the DF Name returned by the card (and the one sent in the Final SELECT command (as supported by the card)).
//!					- \ref TAG_EMV_AID_TERMINAL : AID as supported by the terminal (provided as input parameter).
//!					- \ref TAG_EMV_APPLI_PRIORITY_INDICATOR : application priority indicator as returned by the card (if present).
//!					- \ref TAG_EP_KERNEL_TO_USE : kernel to be used for this AID (as provided as application selection input data).
//!					- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!					- \ref TAG_GENERIC_AID_PROPRIETARY_IDENTIFIER : AID proprietary identifier (allowing you to easily identify which of your supported AID has matched with the card).
//!					- \ref TAG_EMV_APPLICATION_LABEL : Application Label as returned by the card (if present).
//!					- \ref TAG_EMV_PDOL : PDOL as provided by the card (if present).
//!					- \ref TAG_EMV_LANGUAGE_PREFERENCE : Language preference as provided by the card (if present).
//!					- \ref TAG_EMV_ISSUER_CODE_TABLE_INDEX : Issuer Code Table Index as provided by the card (if present).
//!					- \ref TAG_EMV_FCI_ISSUER_DISCRET_DATA : Issuer Discretionary Data as provided by the card (if present).
//!			- For the \ref CLESS_CUST_AS_PROC_STEP_APDU_BEFORE_STEP_ID and \ref CLESS_CUST_AS_PROC_STEP_APDU_AFTER_STEP_ID, if a method matched :
//!				- \ref TAG_GENERIC_APPLIED_METHOD : Applied Application selection method (if present, \ref GENERIC_METHOD_APDU_BEFORE or \ref GENERIC_METHOD_APDU_AFTER in this case).
//!				- \ref TAG_GENERIC_APPLICATION_TYPE : Application Type that provided the AID (it shall be your application type).
//!				- \ref TAG_GENERIC_APDU_COMMAND_TO_SEND : APDU command that matched with the card.
//!				- \ref TAG_GENERIC_APDU_CARD_RESPONSE : Card response to the sent APDU.
//!				- \ref TAG_GENERIC_APDU_CARD_STATUS_WORD : Card response status word to the sent command.
//!
//!
//! <br><br><h2>Return</h2>
//! The following values can be returned, depending on the required behaviour :
//!	- \ref CLESS_CUST_DEFAULT : The default DLL behaviour is used, application selection processing continues.
//!	- \ref CLESS_CUST_RETRY_WITH_CLESS : The application selection process is stopped, and the transaction restart from the beginning.
//!	- \ref CLESS_CUST_RETRY_WITHOUT_CLESS : The application selection process is stopped, and the transaction is conducted over another interface.
//!	- \ref CLESS_CUST_STOP : The application selection process is stopped, and the transaction is terminated (return to idle state).
//!	- \ref CLESS_CUST_CONTINUE_METHOD : The current matching criteria is not used, and the next matching criteria shall be used (if exists). Application selection continues.
//!
//! <br><br> Here is an example of the \a application_selection_proc_customisation_ function. In this example, the application wants to customise the behaviour if the card is not supported by
//! conducting the transaction over another interface (instead of terminating the transaction as specified in the default behaviour). It also customise the PPSE method to get the status of this step :
//!
//! \include Cless_HighLevel_Sample_09.c
//! @}



//! \addtogroup ClessGenericCustomisationGui
//! @{
//! <br><br><h2>Overview</h2><br>
//! There is a way to make Graphical User Interface (GUI) customisation during the card detection and application selection. In fact, during this processing, it is possible to have
//! some messages to display or some other GUI interaction (buzzer, LEDs, etc). By default, the DLL itself performs a standard GUI, but it is possible for you to customise this default GUI
//! to meet some field specific requirements. In a global way, it is possible to customise every GUI performed by the DLL.
//! The principle runs using the same way for \a implicit and \a explicit selection, the only difference is the way your application will be called for customisation :
//!	- Through a service call for \a implicit selection.
//!	- Through a function call for \a explicit selection.
//!
//! <br><table cellspacing="5" bgcolor="#FFCCCC" bordercolordark="green" bordercolorlight="yellow">
//! <tr><td>
//! \note Globally, the default GUI mode managed the DLL only manage the buzzer and the LEDs. Messages are displayed in the \a implicit selection, but they cannot be customised.
//! In \a explicit selection, this is the role of the application to make customisation to display the messages itself.
//! </td></tr>
//! </table>
//! <br>
//!
//! \note The customisation function (as described in the example) can be used for both \a implicit selection and \a explicit selection.
//!
//! <br><br><h2>Principle</h2>
//!
//! <br><h3>Default GUI Mode</h3>
//! By default, the DLL manage automatically the GUI features. It exists different default GUI mode within the DLL that can be configured using a specific tag when the data are loaded into the DLL.
//! By default, DLL uses the Visa GUI mode, that is the most used. To change this mode, it is necessary to provide the \ref TAG_GENERIC_GUI_MODE tag with one of the supported following values :
//!	- \ref CLESS_GUI_MODE_NONE : No GUI is performed.
//!	- \ref CLESS_GUI_MODE_MASTERCARD : Default MasterCard GUI mode is used.
//!	- \ref CLESS_GUI_MODE_VISA_EUROPE : Default Visa Europe GUI mode is used (default GUI mode used by the DLL).
//!	- \ref CLESS_GUI_MODE_VISA_ASIA : Default Visa Asia GUI mode is used (with coloured LEDs). <b>Warning : experimental use.</b>
//!	- \ref CLESS_GUI_MODE_MASTERCARD_COLORED_LEDS : Default MasterCard GUI mode is used (with coloured LEDs). <b>Warning : experimental use.</b>
//!
//! <br><h3>Existing GUI steps</h3>
//! Here are described these different existing steps :
//!	- \ref CLESS_CUST_GUI_USE_CONTACT_STEP_ID : Indicates transaction shall be conducted over another interface.
//!	- \ref CLESS_CUST_GUI_USE_CONTACT_CHIP_STEP_ID : Indicates transaction shall be conducted only with chip interface.
//!	- \ref CLESS_CUST_GUI_USE_CONTACT_SWIPE_STEP_ID : Indicates transaction shall be conducted only with swipe interface.
//!	- \ref CLESS_CUST_GUI_PRESENT_CARD_AMOUNT_STEP_ID : The contactless reader is waiting for a card (amount is provided).
//!	- \ref CLESS_CUST_GUI_PRESENT_CARD_NO_AMOUNT_STEP_ID : The contactless reader is waiting for a card (amount is not provided).
//!	- \ref CLESS_CUST_GUI_COLLISION_STEP_ID : Indicates to the cardholder there are too many cards within the contactless field.
//!	- \ref CLESS_CUST_GUI_RETRY_AMOUNT_STEP_ID : The card shall be presented again on the reader (amount is present).
//!	- \ref CLESS_CUST_GUI_RETRY_NO_AMOUNT_STEP_ID : The card shall be presented again on the reader (amount is not present).
//!	- \ref CLESS_CUST_GUI_CARD_NOT_SUPPORTED_STEP_ID : The presented card is not supported by the system.
//!	- \ref CLESS_CUST_GUI_IDLE_STEP_ID : Idle state.
//!
//! <br><h3>Default behaviour depending on the chosen mode</h3>
//! <table>
//! <tr>
//!		<th>Step Identifier
//!		<th>CLESS_GUI_MODE_NONE
//!		<th>CLESS_GUI_MODE_MASTERCARD
//!		<th>CLESS_GUI_MODE_VISA_EUROPE
//! <tr>
//!		<td>CLESS_CUST_GUI_USE_CONTACT_STEP_ID
//!		<td>None
//!		<td>All the LEDs turned off.<br><i>Implicit</i> Message inviting the cardholder to insert his card is displayed.
//!		<td>All the LEDs turned off.<br>Error Tone (double beep at 750Hz) is emitted.<br><i>Implicit</i> Message inviting the cardholder to insert his card is displayed.
//! <tr>
//!		<td>CLESS_CUST_GUI_USE_CONTACT_CHIP_STEP_ID
//!		<td>None
//!		<td>All the LEDs turned off.<br><i>Implicit</i> Message inviting the cardholder to insert his card is displayed.
//!		<td>All the LEDs turned off.<br>Error Tone (double beep at 750Hz) is emitted.<br><i>Implicit</i> Message inviting the cardholder to insert his card is displayed.
//! <tr>
//!		<td>CLESS_CUST_GUI_USE_CONTACT_SWIPE_STEP_ID
//!		<td>None
//!		<td>All the LEDs turned off.<br><i>Implicit</i> Message inviting the cardholder to swipe his card is displayed.
//!		<td>All the LEDs turned off.<br>Error Tone (double beep at 750Hz) is emitted.<br><i>Implicit</i> Message inviting the cardholder to swipe his card is displayed.
//! <tr>
//!		<td>CLESS_CUST_GUI_PRESENT_CARD_AMOUNT_STEP_ID
//!		<td>None
//!		<td>LED 1 turned on, other LEDs turned Off.<br><i>Implicit</i> : A message inviting the cardholder to present his card is displayed.
//!		<td>LED 1 turned on, other LEDs turned Off.<br><i>Implicit</i> : A message inviting the cardholder to present his card is displayed.
//! <tr>
//!		<td>CLESS_CUST_GUI_PRESENT_CARD_NO_AMOUNT_STEP_ID
//!		<td>None
//!		<td><i>Implicit</i> : First LED blinks 200ms every 5 seconds.<br><i>Explicit</i> : LED 1 turned on, other LEDs turned Off.
//!		<td><i>Implicit</i> : First LED blinks 200ms every 5 seconds.<br><i>Explicit</i> : LED 1 turned on, other LEDs turned Off.
//! <tr>
//!		<td>CLESS_CUST_GUI_COLLISION_STEP_ID
//!		<td>None
//!		<td>All the LEDs turned off.<br><i>Implicit</i> : A message is displayed and indicates too many cards have been presented on the reader.
//!		<td>All the LEDs turned off.<br>Error Tone (double beep at 750Hz) is emitted.<br><i>Implicit</i> : A message is displayed and indicates too many cards have been presented on the reader.
//! <tr>
//!		<td>CLESS_CUST_GUI_RETRY_AMOUNT_STEP_ID
//!		<td>None
//!		<td>LED 1 turned on, other LEDs turned Off.<br><i>Implicit</i> : A message inviting the cardholder to retry is displayed.
//!		<td>LED 1 turned on, other LEDs turned Off.<br>Error Tone (double beep at 750Hz) is emitted.<br><i>Implicit</i> : A message inviting the cardholder to retry is displayed.
//! <tr>
//!		<td>CLESS_CUST_GUI_RETRY_NO_AMOUNT_STEP_ID
//!		<td>None
//!		<td><i>Implicit</i> : First LED blinks 200ms every 5 seconds.<br><i>Explicit</i> : LED 1 turned on<br>Other LEDs turned Off.
//!		<td><i>Implicit</i> : First LED blinks 200ms every 5 seconds.<br><i>Explicit</i> : LED 1 turned on<br>Other LEDs turned Off.<br>Error Tone (double beep at 750Hz) is emitted.
//! <tr>
//!		<td>CLESS_CUST_GUI_CARD_NOT_SUPPORTED_STEP_ID
//!		<td>None
//!		<td>All the LEDs turned off.<br><i>Implicit</i> : A message indicating to the cardholder his card is not supported is displayed.
//!		<td>All the LEDs turned off.<br>Error Tone (double beep at 750Hz) is emitted.<br><i>Implicit</i> : A message indicating to the cardholder his card is not supported is displayed.
//! <tr>
//!		<td>CLESS_CUST_GUI_IDLE_STEP_ID
//!		<td>None
//!		<td>First LED blinks 200ms every 5 seconds.
//!		<td>First LED blinks 200ms every 5 seconds.
//! </table>
//!
//! <h3>Customisation principle</h3>
//! If your application wants to customise some of the GUI steps, it will be first call to indicate which steps it wants to customise. This is the registration step
//! (\ref TAG_GENERIC_CUST_STEP_ID tag provided with the \ref CLESS_CUST_GUI_REGISTRATION_STEP_ID value). This registration step is called when the transaction is started.
//! \note Whatever the functioning mode (\a implicit or \a explicit), there is only one application that can customise the GUI steps.
//! <br>
//! On the registration step, the application shall indicate which steps it wants to customise by providing the \ref TAG_GENERIC_CUST_STEPS_TO_CUSTOMISE.
//! This tag is a 8 bytes bit field, filled using the following rule : <i>buffer[(StepId-1)/8] += (1<<((StepId-1)%8))</i>.
//! \note On the registration step, the application shall always return \ref CLESS_CUST_CONTINUE.
//!
//! Then, each time a customisation step shall be executed, the DLL first checks if an application wants to customise it. If it is the case, the application is called and
//! the step to be customised is provided within the \ref TAG_GENERIC_CUST_STEP_ID tag (coded on 1 byte).
//! The application can perform any GUI it wants, and then shall return one of the following values :
//!	- \ref CLESS_CUST_DEFAULT if the DLL shall execute its default GUI processing for this step. Refer to the section before for more information about the default DLL GUI behaviour.
//!	- \ref CLESS_CUST_CONTINUE if the DLL shall continue without executing its default GUI processing for this step. Refer to the section before for more information about the default DLL GUI behaviour.
//!
//! On almost all the GUI customisation steps, the following data are provided to the application, if available :
//!	- \ref TAG_GENERIC_MANAGER_AMOUNT_ENTRY : The way the transaction amount has been entered at the manager level (\a implicit selection only).
//!	- \ref TAG_GENERIC_MANAGER_TRANSACTION_TYPE : The transaction type at the Manager level (\a implicit selection only).
//!	- \ref TAG_GENERIC_MANAGER_CASH_REGISTER_NUMBER : The cash register number (\a implicit selection only).
//!	- \ref TAG_EMV_AMOUNT_AUTH_BIN : The transaction amount (as entered at the Manager level in \a implicit selection, as provided by the application in the \a explicit selection).
//!	- \ref TAG_GENERIC_MANAGER_CURRENCY_LABEL : The currency label at the Manager level (\a implicit selection only).
//!	- \ref TAG_EMV_TRANSACTION_CURRENCY_CODE : The currency code as provided by the Manager (\a implicit selection only).
//!	- \ref TAG_EMV_TRANSACTION_CURRENCY_EXPONENT : The currency exponent as provided by the Manager (\a implicit selection only).
//!
//! <br><br><h2>Example</h2><br>
//!
//! \include Cless_HighLevel_Sample_10.c
//! @}



//! \addtogroup ClessGenericSelectionFlow
//! @{
//! Here is described how is performed the global application selection (common for \a implicit selection and \a explicit selection). The \a implicit selection is a little bit different
//! (because of service calls when a criteria matches) but the step are identical and executed in the same order.
//!
//!
//! \dot
//! digraph G {
//!		bgcolor="transparent";
//!		ranksep="0.2 equally"
//!
//!		graph [fontname="FreeSans",fontsize=10];
//!		node [shape="box",fontname="FreeSans",fontsize=10,height=0.4,width=2];
//!		edge [fontname="FreeSans",fontsize=10,labelfontname="FreeSans",labelfontsize=10];
//!
//!		nodeStart [label="Application Selection Process",shape="ellipse",style=filled];
//!		node_ApduBefore [label="APDU Before method",size="50,2",style=filled,fillcolor=plum];
//!		node_IsApduBeforeMatched [label="APDU Before matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_Ppse [label="PPSE method with Entry Point (AID method)",size="50,2",style=filled,fillcolor=plum];
//!		node_IsPpseMatched [label="AID matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_Loa [label="List Of AID method",size="50,2",style=filled,fillcolor=plum];
//!		node_IsLoaMatched [label="AID matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_ApduAfter [label="APDU After method",size="50,2",style=filled,fillcolor=plum];
//!		node_IsApduAfterMatched [label="APDU After matched ?",size="50,2",shape="diamond",style=filled,fillcolor=white];
//!		node_ApduBeforeResult [label="Provide APDU Before result",size="50,2",shape="ellipse",style=filled,fillcolor="#EEFFEE"];
//!		node_PpseResult [label="Provide PPSE result",size="50,2",shape="ellipse",style=filled,fillcolor="#EEFFEE"];
//!		node_LoaResult [label="Provide List Of AID result",size="50,2",shape="ellipse",style=filled,fillcolor="#EEFFEE"];
//!		node_ApduAfterResult [label="Provide APDU After result",size="50,2",shape="ellipse",style=filled,fillcolor="#EEFFEE"];
//!		nodeStop [label="No supported criteria",shape="ellipse",style=filled];
//!
//!
//!		nodeStart -> node_ApduBefore [weight=1000];
//!		node_ApduBefore -> node_IsApduBeforeMatched [weight=1000];
//!		node_IsApduBeforeMatched -> node_Ppse [label="No",weight=1000];
//!		node_Ppse -> node_IsPpseMatched [weight=1000];
//!		node_IsPpseMatched -> node_Loa [label="No",weight=1000];
//!		node_Loa -> node_IsLoaMatched [weight=1000];
//!		node_IsLoaMatched -> node_ApduAfter [label="No",weight=1000];
//!		node_ApduAfter -> node_IsApduAfterMatched [weight=1000];
//!		node_IsApduAfterMatched -> nodeStop [label="No",weight=1000];
//!		node_IsApduBeforeMatched -> node_ApduBeforeResult [label="Yes",weight=1];
//!		node_IsPpseMatched -> node_PpseResult [label="Yes",weight=1];
//!		node_IsLoaMatched -> node_LoaResult [label="Yes",weight=1];
//!		node_IsApduAfterMatched -> node_ApduAfterResult [label="Yes",weight=1];
//!	}
//! \enddot
//! @}


#endif

#endif // __CLESS_HIGHLEVEL_H__INCLUDED__
