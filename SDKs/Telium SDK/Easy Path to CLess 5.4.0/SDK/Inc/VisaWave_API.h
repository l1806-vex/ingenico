/**
 * \file     VisaWave_API.h
 * \brief    This describes the VisaWave kernel API.
 * \details It consists of the following defines :
 *	- Transaction steps identifiers.
 *	- Specific VisaWave status codes.
 *	- VisaWave timers definition.
 *	- Error codes definitions.
 *	- VisaWave kernel API functions.
 *
 * \author    Ingenico
 * \author    Copyright (c) 2009 Ingenico, rue claude Chappe,\n
 *            07503 Guilherand-Granges, France, All Rights Reserved.
 *
 * \author    Ingenico has intellectual property rights relating to the technology embodied \n
 *            in this software. In particular, and without limitation, these intellectual property rights may\n
 *            include one or more patents.\n
 *            This software is distributed under licenses restricting its use, copying, distribution, and\n
 *            and decompilation. No part of this software may be reproduced in any form by any means\n
 *            without prior written authorization of Ingenico.
 **/

/////////////////////////////////////////////////////////////////
//// Macros & preprocessor definitions //////////////////////////


/////////////////////////////////////////////////////////////////
//// Types definitions //////////////////////////////////////////


/////////////////////////////////////////////////////////////////
//// Global definition //////////////////////////////////////////

//! \addtogroup VisaWaveTransactionFlowSteps
//! @{
#define STEP_VISAWAVE_INITIAL							0x00								/*!< VisaWave Step : Initial process management. It consists of the starting VisaWave transaction step. */
#define STEP_VISAWAVE_FINAL_SELECTION					0x01								/*!< VisaWave Step : Performs the final card application selection process.<br>The Final SELECT card response and status word are provided by the custom application (application selection result performed by Entry Point). */
#define STEP_VISAWAVE_INITIATE_APPLI_PROCESSING			0x02								/*!< VisaWave Step : Performs the "Initiate Application Processing" step.<br>The VisaWave kernel first checks if a Wave 2 transaction can be performed with the card (PDOL not present or TTQ not in the PDOL).<br>Next, the VisaWave reader initiates the transaction by issuing the <i>GET PROCESSING OPTIONS</i> command as described in <i>Visa AP 3.1.1 specification Section 4.5 Step 6</i>The reader set the \ref TAG_VISAWAVE_VLP_TERMINAL_SUPPORT_INDICATOR in order to request an online or an offline transaction.<br>The VisaWave card returns the AIP and the AFL. */
#define STEP_VISAWAVE_READ_APPLI_DATA					0x03								/*!< VisaWave Step : The VisaWave reader reads the necessary data using <i>READ RECORD</i> commands.<br>The reader also determines if it is a Domestic or an International transaction (the reader proceeds an International transaction with a contact interface. */
#define STEP_VISAWAVE_CVM_SELECTION						0x04								/*!< VisaWave Step : The VisaWave reader selects a cardholder verification method. The result of this function is stored as the Transaction CVM (\ref TAG_VISAWAVE_TRANSACTION_CVM). */
#define STEP_VISAWAVE_FLOW_ROUTER						0x05								/*!< VisaWave Step : This is a step where the kernel determines if it is an offline or an online transaction (according to the presence of the SFI 11 in the AFL). If the SFI11 is present, the VisaWave reader continues by performing the offline data authentication. If the SFI11 is not present, then it continues by sending Generate AC command to the card. */
#define STEP_VISAWAVE_GENERATE_AC						0x06								/*!< VisaWave Step : The VisaWave reader issues a <i>GENERATE AC</i> command requesting an ARQC. */
#define STEP_VISAWAVE_GET_CERTIFICATE					0x07								/*!< VisaWave Step : This is a step where the kernel is looking for the transaction certificates for Offline Data Authentication. Usually, the kernel calls the application to request the transaction certificate.<br><br>The application shall provide the following data to the kernel to perform ODA :<br>	- \ref TAG_EMV_INT_CAPK_MODULUS containing the CA public key modulus.<br>	- \ref TAG_EMV_INT_CAPK_EXPONENT containing the CA public key exponent. */
#define STEP_VISAWAVE_DDA_PROCESSING					0x08								/*!< VisaWave Step : The VisaWave reader retrieves the ICC Public Key and verifies the SDAD generated by the VisaWave card. */
#define STEP_VISAWAVE_REMOVE_CARD						0x09								/*!< VisaWave Step : This step is just there to indicate card read is complete and cardholder can remove the card from the field. It would be used for GUI customisation for example. */
#define STEP_VISAWAVE_COMPLETION						0x10								/*!< VisaWave Step : The VisaWave reader executes the Completion function. The exchange structure is filled with the transaction tags. Please refer to \ref VisaWave_DoTransaction() function for more information about the returned data. */
#define STEP_VISAWAVE_STOP								0x20								/*!< VisaWave Step : Last step of the transaction flow. It indicates transaction results shall be provided to the custom application. */
//! @}


//! \addtogroup VisaWaveStatusCodes
//! @{
#define VISAWAVE_STATUS_OFFLINE							0x0901								/*!< Specific result to indicate offline step is to be performed. */
#define VISAWAVE_STATUS_ONLINE							0x0902								/*!< Specific result to indicate online step is to be performed. */
#define VISAWAVE_STATUS_PAYWAVE_CARD					0x0903								/*!< Specific result to indicate it is a payWave card (PDOL is present and TTQ is present and 4 bytes in the PDOL). */
#define VISAWAVE_STATUS_OVERSEA_CARD					0x0904								/*!< Specific result to indicate it is a contactless card that is not accepted in VISA AP market (TTQ present in PDOL with length < 4). */
#define VISAWAVE_STATUS_CONTACT_INTERFACE_NOT_AVAILABLE	0x0905								/*!< Specific result to indicate a transaction must be performed over a contact interface but there is no contact interface available. */
#define VISAWAVE_STATUS_DDA_FAILED						0x0906								/*!< Specific result to indicate that the DDA authentication failed. */
#define VISAWAVE_STATUS_DOUBLE_DIP						0x0907								/*!< Specific result to indicate that the transaction is not allowed with this card (not enought time since the last transaction (same amount and same card)). */
//! @}


//! \addtogroup VisaWaveTimeMeasure
//! @{
#define VISAWAVE_TIME_TYPE_CARD							0x80000000  						/*!< Time measure is relative to card access. */
#define VISAWAVE_TIME_TYPE_FCT							0x40000000  						/*!< Time measure is relative to code execution. */
#define VISAWAVE_TIME_TYPE_SYSTEM						0x20000000  						/*!< Time measure is relative to system + manager + ... code execution. */

#define VISAWAVE_TIME_FCT_PRELIMINARY					VISAWAVE_TIME_TYPE_FCT+1			/*!< Time measure for Preliminary function execution. */
#define VISAWAVE_TIME_FCT_PRELIMINARY_END				VISAWAVE_TIME_TYPE_FCT+2 			/*!< Time measure end for Preliminary function execution. */
#define VISAWAVE_TIME_FCT_TXN							VISAWAVE_TIME_TYPE_FCT+3			/*!< Time measure for transaction function execution. */
#define VISAWAVE_TIME_FCT_TXN_END						VISAWAVE_TIME_TYPE_FCT+4			/*!< Time measure end for Transaction function execution. */
#define VISAWAVE_TIME_FCT_LOAD_DATA						VISAWAVE_TIME_TYPE_FCT+5			/*!< Time measure for Data function execution. */
#define VISAWAVE_TIME_FCT_LOAD_DATA_END					VISAWAVE_TIME_TYPE_FCT+6			/*!< Time measure end for Data function execution. */
#define VISAWAVE_TIME_FCT_GET_DATA						VISAWAVE_TIME_TYPE_FCT+7			/*!< Time measure for data retrieval function execution. */
#define VISAWAVE_TIME_FCT_GET_DATA_END					VISAWAVE_TIME_TYPE_FCT+8			/*!< Time measure end for data retrieval function execution. */
#define VISAWAVE_TIME_FCT_GET_ALL_DATA					VISAWAVE_TIME_TYPE_FCT+9			/*!< Time measure for obtain all data function execution. */
#define VISAWAVE_TIME_FCT_GET_ALL_DATA_END				VISAWAVE_TIME_TYPE_FCT+10			/*!< Time measure end for obtain all data function execution. */
//! @}


//! \addtogroup VisaWaveErrorDefinition
//! @{
#define ERR_VISAWAVE_BASE                         		0x19000000							/*!< Error Code Prefix identifying a VisaWave error. */

#define ERR_VISAWAVE_NO_TAG								0xFFFFFFFF							/*!< Indicates there is no concerned tag for the provided error. */

#define ERR_VISAWAVE_000001                       		ERR_VISAWAVE_BASE+0x000001			/*!< VisaWave error 01  : An error occurred when removing tag from the database (case where provided tag has length set to 0).<br>(VisaWave_Common.c, VisaWave_Common_LoadTagsFromExchangeStructToDatabase).<br>() */
#define ERR_VISAWAVE_000002                       		ERR_VISAWAVE_BASE+0x000002			/*!< VisaWave error 02  : The list of provided tag has an incorrect format (parsing error).<br>(VisaWave_Common.c, VisaWave_Common_LoadTagsFromExchangeStructToDatabase) */
#define ERR_VISAWAVE_000003                       		ERR_VISAWAVE_BASE+0x000003			/*!< VisaWave error 03  : An error occurred when creating the proprietary data storage in the database.<br>(VisaWave_Common.c, VisaWave_Common_LoadTagsFromExchangeStructToDatabase) */
#define ERR_VISAWAVE_000005                       		ERR_VISAWAVE_BASE+0x000005			/*!< VisaWave error 05  : An error occurred when getting a random number (DLL).<br>(VisaWave_Common.c, VisaWave_Common_GetAndStoreUnpredictableNumber) */
#define ERR_VISAWAVE_000006                       		ERR_VISAWAVE_BASE+0x000006			/*!< VisaWave error 06  : An error occurred when adding the provided tag in the database.<br>(VisaWave_Common.c, VisaWave_Common_LoadTagsFromExchangeStructToDatabase) */
#define ERR_VISAWAVE_000007                       		ERR_VISAWAVE_BASE+0x000007			/*!< VisaWave error 07  : Unable to add \ref TAG_EMV_UNPREDICTABLE_NUMBER tag in the database.<br>(VisaWave_Common.c, VisaWave_Common_GetAndStoreUnpredictableNumber) */
#define ERR_VISAWAVE_000008                       		ERR_VISAWAVE_BASE+0x000008			/*!< VisaWave error 08  : Unable to add \ref TAG_VISAWAVE_INT_SENT_APDU tag in the database.<br>(VisaWave_Debug.c, VisaWave_Debug_StoreCommandToBeSent) */
#define ERR_VISAWAVE_000009                       		ERR_VISAWAVE_BASE+0x000009			/*!< VisaWave error 09  : Unable to add \ref TAG_VISAWAVE_INT_CARD_RESPONSE tag in the database.<br>(VisaWave_Debug.c, VisaWave_Debug_StoreCardResponse) */
#define ERR_VISAWAVE_00000A                       		ERR_VISAWAVE_BASE+0x00000A			/*!< VisaWave error 0A  : Unable to get the \ref TAG_KERNEL_DEBUG_TIME tag from the database (not present or error).<br>(VisaWave_Debug.c, VisaWave_Debug_TimeInit) */
#define ERR_VISAWAVE_00000B                       		ERR_VISAWAVE_BASE+0x00000B			/*!< VisaWave error 0B  : An error occurred when adding the TAG_KERNEL_DEBUG_TIME tag in database for time initialisation.<br>(VisaWave_Debug.c, VisaWave_Debug_TimeInit) */
#define ERR_VISAWAVE_00000C                       		ERR_VISAWAVE_BASE+0x00000C			/*!< VisaWave error 0C  : An error occurred when adding the provided tag in the database.<br>(VisaWave_Entry.c, __VisaWave_Entry_Store_One_Tag) */
#define ERR_VISAWAVE_00000D                       		ERR_VISAWAVE_BASE+0x00000D			/*!< VisaWave error 0D  : Unable to add \ref TAG_KERNEL_APPLICATION_NAME tag in the exchange buffer.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_Kernel_Infos) */
#define ERR_VISAWAVE_00000E                       		ERR_VISAWAVE_BASE+0x00000E			/*!< VisaWave error 0E  : Unable to add \ref TAG_KERNEL_APPLICATION_IDENT tag in the exchange buffer.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_Kernel_Infos) */
#define ERR_VISAWAVE_00000F                       		ERR_VISAWAVE_BASE+0x00000F			/*!< VisaWave error 0F  : Unable to add \ref TAG_KERNEL_APPLICATION_CRC tag in the exchange buffer.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_Kernel_Infos) */
#define ERR_VISAWAVE_000010                       		ERR_VISAWAVE_BASE+0x000010			/*!< VisaWave error 10  : There is not enough space in the exchange buffer to store all the kernel information.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_Kernel_Infos) */
#define ERR_VISAWAVE_000011                       		ERR_VISAWAVE_BASE+0x000011			/*!< VisaWave error 11  : An internal error occurred when getting the kernel information.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_Kernel_Infos) */
#define ERR_VISAWAVE_000012                       		ERR_VISAWAVE_BASE+0x000012			/*!< VisaWave error 12  : Unable to add the retrieved tag in the exchange buffer.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_Data) */
#define ERR_VISAWAVE_000013                       		ERR_VISAWAVE_BASE+0x000013			/*!< VisaWave error 13  : An error occurred when getting the provided tag from the database.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_Data) */
#define ERR_VISAWAVE_000014                       		ERR_VISAWAVE_BASE+0x000014			/*!< VisaWave error 14  : Unable to add the retrieved tag in the exchange buffer.<br>(VisaWave_Entry.c, __VisaWave_Entry_Get_All_Data) */
#define ERR_VISAWAVE_000015								ERR_VISAWAVE_BASE+0x000015			/*!< VisaWave error 15  : Missing Terminal mandatory data : \ref TAG_EP_FINAL_SELECT_COMMAND_SENT.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_CheckAdfCoherence) */
#define ERR_VISAWAVE_000016								ERR_VISAWAVE_BASE+0x000016			/*!< VisaWave error 16  : The sent ADF and the DF Name have the same length but are different.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_CheckAdfCoherence) */
#define ERR_VISAWAVE_000017								ERR_VISAWAVE_BASE+0x000017			/*!< VisaWave error 17  : The sent ADF and the DF Name returned by the card have not the same length (lengths are provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_CheckAdfCoherence) */
#define ERR_VISAWAVE_000018                       		ERR_VISAWAVE_BASE+0x000018			/*!< VisaWave error 18  : Unable to get the Final SELECT Response (that shall be provided by the custom application).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_AnalyseAndParseFinalSelectResponse) */
#define ERR_VISAWAVE_000019                       		ERR_VISAWAVE_BASE+0x000019			/*!< VisaWave error 19  : Final SELECT status word indicates card is blocked (0x6A81).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_AnalyseAndParseFinalSelectResponse) */
#define ERR_VISAWAVE_00001A                       		ERR_VISAWAVE_BASE+0x00001A			/*!< VisaWave error 1A  : Final SELECT status word indicates application is blocked (0x6283).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_AnalyseAndParseFinalSelectResponse) */
#define ERR_VISAWAVE_00001B                       		ERR_VISAWAVE_BASE+0x00001B			/*!< VisaWave error 1B  : Final SELECT status word indicates an unexpected status word.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_AnalyseAndParseFinalSelectResponse) */
#define ERR_VISAWAVE_00001C                       		ERR_VISAWAVE_BASE+0x00001C			/*!< VisaWave error 1C  : Unable to get the Final SELECT status word (that shall be provided by the custom application).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_AnalyseAndParseFinalSelectResponse) */
#define ERR_VISAWAVE_00001D                       		ERR_VISAWAVE_BASE+0x00001D			/*!< VisaWave error 1D  : A critical tag is redundant within the card (concerned tag is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_CheckAndStore) */
#define ERR_VISAWAVE_00001E                       		ERR_VISAWAVE_BASE+0x00001E			/*!< VisaWave error 1E  : A critical tag has a bad format (bad length or incorrect format)(concerned tag is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_CheckAndStore) */
#define ERR_VISAWAVE_00001F                       		ERR_VISAWAVE_BASE+0x00001F			/*!< VisaWave error 1F  : There is not enough memory to add the tag in the database (concerned tag is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_CheckAndStore) */
#define ERR_VISAWAVE_000020                       		ERR_VISAWAVE_BASE+0x000020			/*!< VisaWave error 20  : An internal error occurred when adding the tag in the database (concerned tag is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_CheckAndStore) */
#define ERR_VISAWAVE_000021                       		ERR_VISAWAVE_BASE+0x000021			/*!< VisaWave error 21  : SELECT response is not correctly formatted (padding outside the template, or incorrect length).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000022                       		ERR_VISAWAVE_BASE+0x000022			/*!< VisaWave error 22  : A mandatory card data is missing : \ref TAG_EMV_FCI_TEMPLATE. Tag found is not the expected one.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000023                       		ERR_VISAWAVE_BASE+0x000023			/*!< VisaWave error 23  : FCI Template has bad format.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000024                       		ERR_VISAWAVE_BASE+0x000024			/*!< VisaWave error 24  : The terminal shall ignore tags that are not expected in the FCI (concerned tag is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000025                       		ERR_VISAWAVE_BASE+0x000025			/*!< VisaWave error 25  : A parsing error occurred on the card response (extracting data from FCI template).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000026                       		ERR_VISAWAVE_BASE+0x000026			/*!< VisaWave error 26  : Missing mandatory data in the SELECT response (in the 6F template) : \ref TAG_EMV_DF_NAME.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000027                       		ERR_VISAWAVE_BASE+0x000027			/*!< VisaWave error 27  : Missing mandatory data in the SELECT response (in the 6F template) : \ref TAG_EMV_FCI_PROPRIETARY_TEMPLATE.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000028                       		ERR_VISAWAVE_BASE+0x000028			/*!< VisaWave error 28  : Tag \ref TAG_EMV_FCI_PROPRIETARY_TEMPLATE is present but its length is 0.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_000029                       		ERR_VISAWAVE_BASE+0x000029			/*!< VisaWave error 29  : A database error occured when adding FCI template in the database (DsStatus is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ExtractAndParseFciTemplate) */
#define ERR_VISAWAVE_00002A                       		ERR_VISAWAVE_BASE+0x00002A			/*!< VisaWave error 2A  : An error occurred as FCI Proprietary Template is not correctly stored in the database (it shall be present, i.e. length != 0 and value != NULL).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ParseFciProprietaryTemplate) */
#define ERR_VISAWAVE_00002B                       		ERR_VISAWAVE_BASE+0x00002B			/*!< VisaWave error 2B  : The terminal shall discard tags that are not expected in the FCI Proprietary Template (concerned tag is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ParseFciProprietaryTemplate) */
#define ERR_VISAWAVE_00002C                       		ERR_VISAWAVE_BASE+0x00002C			/*!< VisaWave error 2C  : A parsing error occurred on the card response (extracting data from FCI Proprietary Template).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ParseFciProprietaryTemplate) */
#define ERR_VISAWAVE_00002D                       		ERR_VISAWAVE_BASE+0x00002D			/*!< VisaWave error 2D  : This function cannot be called if FCI Issuer Discretionary Data Template is not in database (shall be checked before calling this function).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ParseFciIssuerDiscretionaryData) */
#define ERR_VISAWAVE_00002E                       		ERR_VISAWAVE_BASE+0x00002E			/*!< VisaWave error 2E  : FCI Issuer Discretionary Data parsing error.<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_ParseFciIssuerDiscretionaryData) */
#define ERR_VISAWAVE_00002F                       		ERR_VISAWAVE_BASE+0x00002F			/*!< VisaWave error 2F  : An error occurred when adding tag \ref TAG_KERNEL_SELECTED_PREFERED_LANGUAGE in the database (Data Storage status is provided).<br>(VisaWave_Txn_FinalSelect.c, __VisaWave_Txn_FinalSelect_LanguageSelection) */
#define ERR_VISAWAVE_000030                       		ERR_VISAWAVE_BASE+0x000030			/*!< VisaWave error 30  : An error occurred when getting \ref TAG_EMV_PDOL from the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CheckWave2Card) */
#define ERR_VISAWAVE_000031                       		ERR_VISAWAVE_BASE+0x000031			/*!< VisaWave error 31  : It is not a Wave2 card (TTQ is present in the PDOL).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CheckWave2Card) */
#define ERR_VISAWAVE_000032                       		ERR_VISAWAVE_BASE+0x000032			/*!< VisaWave error 32  : An error occurred when initialising the TVR in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_InitTvrCvmResults) */
#define ERR_VISAWAVE_000033                       		ERR_VISAWAVE_BASE+0x000033			/*!< VisaWave error 33  : An error occured when initialising the CVM Results in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_InitTvrCvmResults) */
#define ERR_VISAWAVE_000035                       		ERR_VISAWAVE_BASE+0x000035			/*!< VisaWave error 35  : An error occured when adding \ref TAG_VISAWAVE_READER_CLESS_TR_LIMIT in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_InitVisaWaveSpecificTags) */
#define ERR_VISAWAVE_000036                       		ERR_VISAWAVE_BASE+0x000036			/*!< VisaWave error 36  : An error occured when adding \ref TAG_VISAWAVE_CVM_REQUIRED_LIMIT in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_InitVisaWaveSpecificTags) */
#define ERR_VISAWAVE_000037                       		ERR_VISAWAVE_BASE+0x000037			/*!< VisaWave error 37  : An error occured when adding \ref TAG_VISAWAVE_CLESS_FLOOR_LIMIT in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_InitVisaWaveSpecificTags) */
#define ERR_VISAWAVE_000038                       		ERR_VISAWAVE_BASE+0x000038			/*!< VisaWave error 38  : An error occurred when adding \ref TAG_EMV_AIP in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_000039                       		ERR_VISAWAVE_BASE+0x000039			/*!< VisaWave error 39  : Card returned an AFL with a bad format in GPO response (format 1).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00003A                       		ERR_VISAWAVE_BASE+0x00003A			/*!< VisaWave error 3A  : An error occurred when adding \ref TAG_EMV_AFL in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00003B                       		ERR_VISAWAVE_BASE+0x00003B			/*!< VisaWave error 3B  : AFL is not correctly formatted.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00003C                      		ERR_VISAWAVE_BASE+0x00003C			/*!< VisaWave error 3C  : Missing mandatory data within the card (\ref TAG_EMV_AFL).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00003D                       		ERR_VISAWAVE_BASE+0x00003D			/*!< VisaWave error 3D  : Template format 1 is too small (incorrect format).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00003E                       		ERR_VISAWAVE_BASE+0x00003E			/*!< VisaWave error 3E  : AFL is not correctly formatted.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_00003F                       		ERR_VISAWAVE_BASE+0x00003F			/*!< VisaWave error 3F  : Card returned a redundant tag (\ref TAG_EMV_AIP or \ref TAG_EMV_AFL).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000040                       		ERR_VISAWAVE_BASE+0x000040			/*!< VisaWave error 40  : Card returned a tag with a bad format in a GPO (tag is provided).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000041                       		ERR_VISAWAVE_BASE+0x000041			/*!< VisaWave error 41  : An error occurred when adding \ref TAG_EMV_AIP or \ref TAG_EMV_AFL in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000042                       		ERR_VISAWAVE_BASE+0x000042			/*!< VisaWave error 42  : Parsing error in the format 2 response template.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000043                      		ERR_VISAWAVE_BASE+0x000043			/*!< VisaWave error 43  : Missing mandatory data within the card (\ref TAG_EMV_AFL).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000044                       		ERR_VISAWAVE_BASE+0x000044			/*!< VisaWave error 44  : Missing mandatory data within the card (\ref TAG_EMV_AIP).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000045                       		ERR_VISAWAVE_BASE+0x000045			/*!< VisaWave error 45  : Card GPO response has not a correct format (bad TLV coding).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CardResponseAnalysis) */
#define ERR_VISAWAVE_000046                       		ERR_VISAWAVE_BASE+0x000046			/*!< VisaWave error 46  : Card GPO response has no data.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CardResponseAnalysis) */
#define ERR_VISAWAVE_000047                       		ERR_VISAWAVE_BASE+0x000047			/*!< VisaWave error 47  : Card GPO response has not a correct format (data outside the template).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CardResponseAnalysis) */
#define ERR_VISAWAVE_000048                       		ERR_VISAWAVE_BASE+0x000048			/*!< VisaWave error 48  : An error occurred when analyses the format 1 GPO response data.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CardResponseAnalysis) */
#define ERR_VISAWAVE_000049                       		ERR_VISAWAVE_BASE+0x000049			/*!< VisaWave error 49  : An error occurred when analyses the format 2 GPO response data.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CardResponseAnalysis) */
#define ERR_VISAWAVE_00004A                       		ERR_VISAWAVE_BASE+0x00004A			/*!< VisaWave error 4A  : Card responds with an unknown format, transaction is to be terminated.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CardResponseAnalysis) */
#define ERR_VISAWAVE_00004B                       		ERR_VISAWAVE_BASE+0x00004B			/*!< VisaWave error 4B  : Status word for GPO is not x9000.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_CardResponseAnalysis) */
#define ERR_VISAWAVE_00004C                       		ERR_VISAWAVE_BASE+0x00004C			/*!< VisaWave error 4C  : An error occurred when building the PDOL.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_BuildAndSendGpoCommand) */
#define ERR_VISAWAVE_00004D                       		ERR_VISAWAVE_BASE+0x00004D			/*!< VisaWave error 4D  : An error occurred when adding constructed PDOL value in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_BuildAndSendGpoCommand) */
#define ERR_VISAWAVE_00004E                       		ERR_VISAWAVE_BASE+0x00004E			/*!< VisaWave error 4E  : Unable to build the Get Processing Options command.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_BuildAndSendGpoCommand) */
#define ERR_VISAWAVE_00004F                       		ERR_VISAWAVE_BASE+0x00004F			/*!< VisaWave error 4F  : An error occurred when adding the command to be sent in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_BuildAndSendGpoCommand) */
#define ERR_VISAWAVE_000050                       		ERR_VISAWAVE_BASE+0x000050			/*!< VisaWave error 50  : Communication error with the card (GPO command).<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_BuildAndSendGpoCommand) */
#define ERR_VISAWAVE_000051                       		ERR_VISAWAVE_BASE+0x000051			/*!< VisaWave error 51  : An error occurred when adding the card response to be sent in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_BuildAndSendGpoCommand) */
#define ERR_VISAWAVE_000052                       		ERR_VISAWAVE_BASE+0x000052			/*!< VisaWave error 52  : GPO Card response analysis failed.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_BuildAndSendGpoCommand) */
#define ERR_VISAWAVE_000053                       		ERR_VISAWAVE_BASE+0x000053			/*!< VisaWave error 53  : An error occured when adding the \ref TAG_VISAWAVE_VLP_TERMINAL_SUPPORT_INDICATOR in the database.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_SetVLPTerminalSupportIndicator) */
#define ERR_VISAWAVE_000054                       		ERR_VISAWAVE_BASE+0x000054			/*!< VisaWave error 54  : An error occurred, there is not enough memory in the database to add ODA data.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_AddDataPartOfOda) */
#define ERR_VISAWAVE_000055                       		ERR_VISAWAVE_BASE+0x000055			/*!< VisaWave error 55  : An error occurred when adding TAG_VISAWAVE_INT_IS_SFI_ERROR tag in the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_SetIsSfiCorrect) */
#define ERR_VISAWAVE_000056                       		ERR_VISAWAVE_BASE+0x000056			/*!< VisaWave error 56  : Missing mandatory data : \ref TAG_EMV_AFL.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_ReadApplicationData) */
#define ERR_VISAWAVE_000057								ERR_VISAWAVE_BASE+0x000057			/*!< VisaWave error 57  : An error occurred when building the Read Record command.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_ReadApplicationData) */
#define ERR_VISAWAVE_000058                       		ERR_VISAWAVE_BASE+0x000058			/*!< VisaWave error 58  : An error occurred when adding the command to be sent in the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_ReadApplicationData) */	
#define ERR_VISAWAVE_000059                       		ERR_VISAWAVE_BASE+0x000059			/*!< VisaWave error 59  : Communication error with the card (Read Application Data).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_ReadApplicationData) */
#define ERR_VISAWAVE_00005A                       		ERR_VISAWAVE_BASE+0x00005A			/*!< VisaWave error 5A  : An error occurred when adding the card response to be sent in the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_ReadApplicationData) */
#define ERR_VISAWAVE_00005B                       		ERR_VISAWAVE_BASE+0x00005B			/*!< VisaWave error 5B  : Read Record Card response analysis failed.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_ReadApplicationData) */
#define ERR_VISAWAVE_00005C                       		ERR_VISAWAVE_BASE+0x00005C			/*!< VisaWave error 5C  : An error occurred when adding the TAG_VISAWAVE_SFI11_PRESENT_IN_AFL in the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_ReadApplicationData) */
#define ERR_VISAWAVE_00005D                       		ERR_VISAWAVE_BASE+0x00005D			/*!< VisaWave error 5D  : Card response to Read Record has not a correct format (bad TLV coding).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_00005E                       		ERR_VISAWAVE_BASE+0x00005E			/*!< VisaWave error 5E  : Card response to Read Record has no data.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_00005F                       		ERR_VISAWAVE_BASE+0x00005F			/*!< VisaWave error 5F  : Card response to Read Record has not a correct format (data outside the template).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000060                       		ERR_VISAWAVE_BASE+0x000060			/*!< VisaWave error 60  : Card responds to Read Record with template different from 0x70, terminate the transaction.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000061                       		ERR_VISAWAVE_BASE+0x000061			/*!< VisaWave error 61  : An error occurred when adding data that are part of ODA in the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000062                       		ERR_VISAWAVE_BASE+0x000062			/*!< VisaWave error 62  : Card returned a redundant tag in a Read Record (tag is provided).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000063                       		ERR_VISAWAVE_BASE+0x000063			/*!< VisaWave error 63  : Card returned a tag with a bad format in a Read Record (tag is provided).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000064                       		ERR_VISAWAVE_BASE+0x000064			/*!< VisaWave error 64  : A database error occurred when storing data provided in Read Record.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000065                       		ERR_VISAWAVE_BASE+0x000065			/*!< VisaWave error 65  : Card response to Read Record is not correctly formatted (BER-TLV parsing error).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000066                       		ERR_VISAWAVE_BASE+0x000066			/*!< VisaWave error 66  : An error occurred when setting data indicating a SFI format error.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000067                       		ERR_VISAWAVE_BASE+0x000067			/*!< VisaWave error 67  : Card responds to Read Record with template different from 0x70, SFI is between 12 and 30.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000068                       		ERR_VISAWAVE_BASE+0x000068			/*!< VisaWave error 68  : Card responds to Read Record with data that is NOT part of ODA, but template different from 0x70 or there is data outside the template, or response is not BER-TLV coded (SFI is between 12 and 30).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_000069                       		ERR_VISAWAVE_BASE+0x000069			/*!< VisaWave error 69  : An error occurred when adding data that are part of ODA in the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_00006A                       		ERR_VISAWAVE_BASE+0x00006A			/*!< VisaWave error 6A  : Bad SFI (SFI > 30).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_00006B                       		ERR_VISAWAVE_BASE+0x00006B			/*!< VisaWave error 6B  : Status Word is not x9000 to the READ RECORD response.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_CardResponseAnalysis) */
#define ERR_VISAWAVE_00006C                       		ERR_VISAWAVE_BASE+0x00006C			/*!< VisaWave error 6C  : An error occurred when setting the CVR Result in the database (Rule).<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_SetCvrInDatabase) */
#define ERR_VISAWAVE_00006D                       		ERR_VISAWAVE_BASE+0x00006D			/*!< VisaWave error 6D  : An error occurred when setting the CVR Result in the database (Condition).<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_SetCvrInDatabase) */
#define ERR_VISAWAVE_00006E                       		ERR_VISAWAVE_BASE+0x00006E			/*!< VisaWave error 6E  : An error occurred when setting the CVR Result in the database (Result).<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_SetCvrInDatabase) */
#define ERR_VISAWAVE_00006F                       		ERR_VISAWAVE_BASE+0x00006F			/*!< VisaWave error 6F  : An unexpected CVM method has been provided.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_SetTransactionCvm) */
#define ERR_VISAWAVE_000071                       		ERR_VISAWAVE_BASE+0x000071			/*!< VisaWave error 71  : A database error occurred when getting the \ref TAG_EMV_CVM_LIST_CARD tag from the database.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_CheckCvmListPresence) */
#define ERR_VISAWAVE_000072                       		ERR_VISAWAVE_BASE+0x000072			/*!< VisaWave error 72  : Missing data in the CVM List or number of bytes is even.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_CheckCvmListPresence) */
#define ERR_VISAWAVE_000073                       		ERR_VISAWAVE_BASE+0x000073			/*!< VisaWave error 73  : There is no CVR in the CVM List.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_CheckCvmListPresence) */
#define ERR_VISAWAVE_000074                       		ERR_VISAWAVE_BASE+0x000074			/*!< VisaWave error 74  : An error occured when setting the Transaction CVM in the database.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_CheckCvmListPresence) */
#define ERR_VISAWAVE_000075                       		ERR_VISAWAVE_BASE+0x000075			/*!< VisaWave error 75  : There is not an even number of bytes for couple of CVM Method / CVM Condition.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000076                       		ERR_VISAWAVE_BASE+0x000076			/*!< VisaWave error 76  : A mandatory terminal data is missing : \ref TAG_EMV_TERMINAL_CAPABILITIES.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000077                       		ERR_VISAWAVE_BASE+0x000077			/*!< VisaWave error 77  : A mandatory terminal data is missing : \ref TAG_EMV_TERMINAL_TYPE.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000078                       		ERR_VISAWAVE_BASE+0x000078			/*!< VisaWave error 78  : A mandatory terminal data is missing : \ref TAG_EMV_INT_TRANSACTION_TYPE.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000079                       		ERR_VISAWAVE_BASE+0x000079			/*!< VisaWave error 79  : An error occurred when setting the VisaWave Transaction CVM.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_00007A                       		ERR_VISAWAVE_BASE+0x00007A			/*!< VisaWave error 7A  : The tag 9F7A is set to 00 (online transaction) and the card returns SFI 11 for offline transaction, the transaction is terminated.<br>(VisaWave_Txn_FlowRouter.c, __VisaWave_Txn_FlowRouter_OfflineOrOnline) */
#define ERR_VISAWAVE_00007B                       		ERR_VISAWAVE_BASE+0x00007B			/*!< VisaWave error 7B  : An error occurred when adding \ref TAG_EMV_CRYPTOGRAM_INFO_DATA in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00007C                       		ERR_VISAWAVE_BASE+0x00007C			/*!< VisaWave error 7C  : An error occurred when adding \ref TAG_EMV_ATC in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00007D                       		ERR_VISAWAVE_BASE+0x00007D			/*!< VisaWave error 7D  : An error occurred when adding \ref TAG_EMV_APPLICATION_CRYPTOGRAM in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00007E                       		ERR_VISAWAVE_BASE+0x00007E			/*!< VisaWave error 7E  : Card returned \ref TAG_EMV_ISSUER_APPLI_DATA tag with a bad format (Generate AC format 1).<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_00007F                       		ERR_VISAWAVE_BASE+0x00007F			/*!< VisaWave error 7F  : An error occurred when adding \ref TAG_EMV_ISSUER_APPLI_DATA in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_000080                       		ERR_VISAWAVE_BASE+0x000080			/*!< VisaWave error 80  : Template format 1 is too small.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_000081                       		ERR_VISAWAVE_BASE+0x000081			/*!< VisaWave error 81  : Template format 1 is too long.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_000082                       		ERR_VISAWAVE_BASE+0x000082			/*!< VisaWave error 82  : An error occurred when adding the \ref TAG_VISAWAVE_INT_GENAC_RESPONSE_DATA tag in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000083                       		ERR_VISAWAVE_BASE+0x000083			/*!< VisaWave error 83  : Card returned a redundant tag (redundant tag is provided).<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000084                       		ERR_VISAWAVE_BASE+0x000084			/*!< VisaWave error 84  : Card returned a tag with a bad format (tag is provided).<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000085                       		ERR_VISAWAVE_BASE+0x000085			/*!< VisaWave error 85  : A database error occured (Database status is provided).<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000086                       		ERR_VISAWAVE_BASE+0x000086			/*!< VisaWave error 86  : Parsing error in the format 2 response template.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000087                       		ERR_VISAWAVE_BASE+0x000087			/*!< VisaWave error 87  : Card response has not a correct format (bad TLV coding).<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_CardResponseAnalysis) */
#define ERR_VISAWAVE_000088                       		ERR_VISAWAVE_BASE+0x000088			/*!< VisaWave error 88  : Card response has no data.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_CardResponseAnalysis) */
#define ERR_VISAWAVE_000089                       		ERR_VISAWAVE_BASE+0x000089			/*!< VisaWave error 89  : Card response has not a correct format (data outside the template).<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_CardResponseAnalysis) */
#define ERR_VISAWAVE_00008A                       		ERR_VISAWAVE_BASE+0x00008A			/*!< VisaWave error 8A  : An error occurred when analyses the format 1 Generate AC response data.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_CardResponseAnalysis) */
#define ERR_VISAWAVE_00008B                       		ERR_VISAWAVE_BASE+0x00008B			/*!< VisaWave error 8B  : An error occurred when analyses the format 2 Generate AC response data.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_CardResponseAnalysis) */
#define ERR_VISAWAVE_00008C                       		ERR_VISAWAVE_BASE+0x00008C			/*!< VisaWave error 8C  : Card responds with an unknown format, transaction is to be terminated.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_CardResponseAnalysis) */
#define ERR_VISAWAVE_00008D                       		ERR_VISAWAVE_BASE+0x00008D			/*!< VisaWave error 8D  : Status word for Generate AC is not x9000.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_CardResponseAnalysis) */
#define ERR_VISAWAVE_00008E                       		ERR_VISAWAVE_BASE+0x00008E			/*!< VisaWave error 8E  : Missing mandatory data : \ref TAG_EMV_CDOL_1.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_00008F                       		ERR_VISAWAVE_BASE+0x00008F			/*!< VisaWave error 8F  : An error occurred when building the CDOL1.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_000090                       		ERR_VISAWAVE_BASE+0x000090			/*!< VisaWave error 90  : An error occurred when adding constructed CDOL1 value in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_000091                       		ERR_VISAWAVE_BASE+0x000091			/*!< VisaWave error 91  : An error occured when adding the TAG_VISAWAVE_INT_GENAC_REF_CTRL_PARAMETER tag in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_000092                       		ERR_VISAWAVE_BASE+0x000092			/*!< VisaWave error 92  : Unable to build the Generate AC command.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_000093                       		ERR_VISAWAVE_BASE+0x000093			/*!< VisaWave error 93  : An error occurred when adding the command to be sent in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */	
#define ERR_VISAWAVE_000094                       		ERR_VISAWAVE_BASE+0x000094			/*!< VisaWave error 94  : Communication error with the card.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_000095                      		ERR_VISAWAVE_BASE+0x000095			/*!< VisaWave error 95  : An error occurred when adding the card response to be sent in the database.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_000096                       		ERR_VISAWAVE_BASE+0x000096			/*!< VisaWave error 96  : Generate AC Card response analysis failed.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_BuildAndSendGenerateAcCommand) */
#define ERR_VISAWAVE_000097                       		ERR_VISAWAVE_BASE+0x000097			/*!< VisaWave error 97  : Terminal requested TC but ICC responds with CID different from TC, ARQC or AAC.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_AreCidAndRcpCoherents) */
#define ERR_VISAWAVE_000098                       		ERR_VISAWAVE_BASE+0x000098			/*!< VisaWave error 98  : Terminal requested ARQC but ICC responds with CID different from ARQC or AAC.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_AreCidAndRcpCoherents) */
#define ERR_VISAWAVE_000099                       		ERR_VISAWAVE_BASE+0x000099			/*!< VisaWave error 99  : Terminal requested AAC but ICC responds with CID different from AAC.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_AreCidAndRcpCoherents) */
#define ERR_VISAWAVE_00009A                       		ERR_VISAWAVE_BASE+0x00009A			/*!< VisaWave error 9A  : Incorrect terminal RCP.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_AreCidAndRcpCoherents) */
#define ERR_VISAWAVE_00009B                       		ERR_VISAWAVE_BASE+0x00009B			/*!< VisaWave error 9B  : Incorrect CID.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GenAc_SetTransactionStatus) */
#define ERR_VISAWAVE_00009C                       		ERR_VISAWAVE_BASE+0x00009C			/*!< VisaWave error 9C  : There is not enough memory in the shared exchange structure to add the TAG_EMV_DF_NAME.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GetCertificate_FillOutputStructure) */
#define ERR_VISAWAVE_00009D                       		ERR_VISAWAVE_BASE+0x00009D			/*!< VisaWave error 9D  : There is not enough memory in the shared exchange structure to add the TAG_EMV_CA_PUBLIC_KEY_INDEX_CARD.<br>(VisaWave_Txn_GenAc.c, __VisaWave_Txn_GetCertificate_FillOutputStructure) */
#define ERR_VISAWAVE_00009E                       		ERR_VISAWAVE_BASE+0x00009E			/*!< VisaWave error 9E  : DDA not indicated in AIP.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_IsDdaSupported) */
#define ERR_VISAWAVE_00009F                       		ERR_VISAWAVE_BASE+0x00009F			/*!< VisaWave error 9F  : DDA not indicated in the Terminal Capabilities.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_IsDdaSupported) */
#define ERR_VISAWAVE_000100                       		ERR_VISAWAVE_BASE+0x000100			/*!< VisaWave error 100 : An error occured, there is not enough memory in the database to add DDA data.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_DdaAddData) */
#define ERR_VISAWAVE_000101                       		ERR_VISAWAVE_BASE+0x000101			/*!< VisaWave error 101 : Missing mandatory data to retrieve the Issuer Public Key.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIssuerPublicKey) */
#define ERR_VISAWAVE_000102                       		ERR_VISAWAVE_BASE+0x000102			/*!< VisaWave error 102 : An error occurred when adding \ref TAG_KERNEL_IPK_RECOVERED_DATA tag in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIssuerPublicKey) */
#define ERR_VISAWAVE_000103                       		ERR_VISAWAVE_BASE+0x000103			/*!< VisaWave error 103 : An error occurred when adding \ref TAG_KERNEL_IS_CA_REVOKED in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIssuerPublicKey) */
#define ERR_VISAWAVE_000104                       		ERR_VISAWAVE_BASE+0x000104			/*!< VisaWave error 104 : The certificate is revoked.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIssuerPublicKey) */
#define ERR_VISAWAVE_000105                       		ERR_VISAWAVE_BASE+0x000105			/*!< VisaWave error 105 : The certificate used is expired.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIssuerPublicKey) */
#define ERR_VISAWAVE_000106                       		ERR_VISAWAVE_BASE+0x000106			/*!< VisaWave error 106 : An ICC mandatory data is missing : \ref TAG_EMV_ISSUER_PUBLIC_KEY_REMAINDER.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIssuerPublicKey) */
#define ERR_VISAWAVE_000107                       		ERR_VISAWAVE_BASE+0x000107			/*!< VisaWave error 107 : Unable to retrieve the Issuer Public Key.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIssuerPublicKey) */
#define ERR_VISAWAVE_000108                       		ERR_VISAWAVE_BASE+0x000108			/*!< VisaWave error 108 : Missing mandatory data to retrieve the Issuer Public Key.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIccPublicKey) */
#define ERR_VISAWAVE_000109                       		ERR_VISAWAVE_BASE+0x000109			/*!< VisaWave error 109 : An SFI error occured.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIccPublicKey) */
#define ERR_VISAWAVE_00010A                       		ERR_VISAWAVE_BASE+0x00010A			/*!< VisaWave error 10A : An error occurred when adding \ref TAG_KERNEL_ICC_RECOVERED_DATA tag in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIccPublicKey) */
#define ERR_VISAWAVE_00010B                       		ERR_VISAWAVE_BASE+0x00010B			/*!< VisaWave error 10B : The certificate used is expired.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIccPublicKey) */
#define ERR_VISAWAVE_00010C                       		ERR_VISAWAVE_BASE+0x00010C			/*!< VisaWave error 10C : An ICC mandatory data is missing : \ref TAG_EMV_ISSUER_PUBLIC_KEY_REMAINDER.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIccPublicKey) */
#define ERR_VISAWAVE_00010D                       		ERR_VISAWAVE_BASE+0x00010D			/*!< VisaWave error 10D : Unable to retrieve the ICC Public Key.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIccPublicKey) */
#define ERR_VISAWAVE_00010E                       		ERR_VISAWAVE_BASE+0x00010E			/*!< VisaWave error 10E : The Issuer PK Algorithm indicator is not recognized.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_RetrieveIccPublicKey) */
#define ERR_VISAWAVE_00010F                       		ERR_VISAWAVE_BASE+0x00010F			/*!< VisaWave error 10F : An error occured when adding TAG_EMV_SIGNED_DYNAMIC_APPLI_DATA in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_000110                       		ERR_VISAWAVE_BASE+0x000110			/*!< VisaWave error 110 : Template format 1 is too small.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_ResponseAnalysisFormat1) */
#define ERR_VISAWAVE_000111                       		ERR_VISAWAVE_BASE+0x000111			/*!< VisaWave error 111 : Card returned a redundant tag in the Internal Authenticate (tag is provided).<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000112                       		ERR_VISAWAVE_BASE+0x000112			/*!< VisaWave error 112 : Card returned a tag with a bad format in the Internal Authenticate.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000113                       		ERR_VISAWAVE_BASE+0x000113			/*!< VisaWave error 113 : An error occured when adding Signed Dynamic Application Data in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000114                       		ERR_VISAWAVE_BASE+0x000114			/*!< VisaWave error 114 : Parsing error in the format 2 response template.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000115                       		ERR_VISAWAVE_BASE+0x000115			/*!< VisaWave error 115 : Missing mandatory data (TAG_EMV_SIGNED_DYNAMIC_APPLI_DATA) within the card .<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_ResponseAnalysisFormat2) */
#define ERR_VISAWAVE_000116                       		ERR_VISAWAVE_BASE+0x000116			/*!< VisaWave error 116 : Card response has not a correct format (bad TLV coding).<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_CardResponseAnalysis) */
#define ERR_VISAWAVE_000117                       		ERR_VISAWAVE_BASE+0x000117			/*!< VisaWave error 117 : Card response has no data.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_CardResponseAnalysis) */
#define ERR_VISAWAVE_000118                       		ERR_VISAWAVE_BASE+0x000118			/*!< VisaWave error 118 : Card response has not a correct format (data outside the template).<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_CardResponseAnalysis) */
#define ERR_VISAWAVE_000119                       		ERR_VISAWAVE_BASE+0x000119			/*!< VisaWave error 119 : An error occurred when analyses the format 1 Internal Authenticate response data.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_CardResponseAnalysis) */
#define ERR_VISAWAVE_00011A                       		ERR_VISAWAVE_BASE+0x00011A			/*!< VisaWave error 11A : An error occurred when analyses the format 2 Internal Authenticate response data.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_CardResponseAnalysis) */
#define ERR_VISAWAVE_00011B                       		ERR_VISAWAVE_BASE+0x00011B			/*!< VisaWave error 11B : Card responds with an unknown format, transaction is to be terminated.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_CardResponseAnalysis) */
#define ERR_VISAWAVE_00011C                       		ERR_VISAWAVE_BASE+0x00011C			/*!< VisaWave error 11C : Status word for Internal Authenticate is not x9000.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_InternalAuthenticate_CardResponseAnalysis) */
#define ERR_VISAWAVE_00011D                       		ERR_VISAWAVE_BASE+0x00011D			/*!< VisaWave error 11D : Missing mandatory data : \ref TAG_EMV_DDOL.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_00011E                       		ERR_VISAWAVE_BASE+0x00011E			/*!< VisaWave error 11E : Missing mandatory data in the DDOL: \ref TAG_EMV_UNPREDICTABLE_NUMBER.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_00011F                       		ERR_VISAWAVE_BASE+0x00011F			/*!< VisaWave error 11F : An error occurred when building the DDOL.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000120                       		ERR_VISAWAVE_BASE+0x000120			/*!< VisaWave error 120 : An error occurred when adding constructed DDOL value in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000121                       		ERR_VISAWAVE_BASE+0x000121			/*!< VisaWave error 121 : Unable to build the Internal Authenticate command.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000122                       		ERR_VISAWAVE_BASE+0x000122			/*!< VisaWave error 122 : An error occurred when adding the command to be sent in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000123                       		ERR_VISAWAVE_BASE+0x000123			/*!< VisaWave error 123 : Communication error with the card.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000124                      		ERR_VISAWAVE_BASE+0x000124			/*!< VisaWave error 124 : An error occurred when adding the card response to be sent in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000125                       		ERR_VISAWAVE_BASE+0x000125			/*!< VisaWave error 125 : An error occurred when adding data that are part of DDA in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000126                       		ERR_VISAWAVE_BASE+0x000126			/*!< VisaWave error 126 : Internal Authenticate Card response analysis failed.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_BuildAndSendInternalAuthenticateCommand) */
#define ERR_VISAWAVE_000127                       		ERR_VISAWAVE_BASE+0x000127			/*!< VisaWave error 127 : Missing mandatory data to verify the DDA signature.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_DDA_VerifySignature) */
#define ERR_VISAWAVE_000128                       		ERR_VISAWAVE_BASE+0x000128			/*!< VisaWave error 128 : An error occurred when adding \ref TAG_KERNEL_DDA_RECOVERED_DATA tag in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_DDA_VerifySignature) */
#define ERR_VISAWAVE_000129                       		ERR_VISAWAVE_BASE+0x000129			/*!< VisaWave error 129 : DDA signature verification failed.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_DDA_VerifySignature) */
#define ERR_VISAWAVE_00012A                       		ERR_VISAWAVE_BASE+0x00012A			/*!< VisaWave error 12A : An error occurred when adding the tag in exchange data structure (tag is provided).<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Completion_AddTagToStructure) */
#define ERR_VISAWAVE_00012B                      		ERR_VISAWAVE_BASE+0x00012B			/*!< VisaWave error 12B : An error occurred when adding common tags in the exchange data structure.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Completion_FillExchangeStructure) */
#define ERR_VISAWAVE_00012C                       		ERR_VISAWAVE_BASE+0x00012C			/*!< VisaWave error 12C : Invalid input data (pointer on data exchange is NULL).<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Completion_FillExchangeStructure) */
#define ERR_VISAWAVE_00012D                       		ERR_VISAWAVE_BASE+0x00012D			/*!< VisaWave error 12D : Database error when getting the TAG_VISAWAVE_ONLINE_ONLY tag.<br>(VisaWave_Txn_Iap.c, __VisaWave_Txn_Iap_SetVLPTerminalSupportIndicator) */
#define ERR_VISAWAVE_00012E                       		ERR_VISAWAVE_BASE+0x00012E			/*!< VisaWave error 12E : An error occured when getting \ref TAG_EMV_TERMINAL_TYPE from the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_DomesticOrInternational) */
#define ERR_VISAWAVE_00012F                       		ERR_VISAWAVE_BASE+0x00012F			/*!< VisaWave error 12F : An error occured when getting \ref TAG_EMV_ISSUER_COUNTRY_CODE from the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_DomesticOrInternational) */
#define ERR_VISAWAVE_000130                       		ERR_VISAWAVE_BASE+0x000130			/*!< VisaWave error 130 : An error occured when getting \ref TAG_EMV_TERMINAL_COUNTRY_CODE from the database.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_DomesticOrInternational) */
#define ERR_VISAWAVE_000131                       		ERR_VISAWAVE_BASE+0x000131			/*!< VisaWave error 131 : A mandatory terminal data is missing : TAG_EMV_TERMINAL_COUNTRY_CODE.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_DomesticOrInternational) */
#define ERR_VISAWAVE_000132                       		ERR_VISAWAVE_BASE+0x000132			/*!< VisaWave error 132 : An error occurred when setting the VisaWave Transaction CVM.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000133                       		ERR_VISAWAVE_BASE+0x000133			/*!< VisaWave error 133 : CVM_RULE_FAIL method performed, transaction is declined.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000134                       		ERR_VISAWAVE_BASE+0x000134			/*!< VisaWave error 134 : An error occurred when setting the VisaWave Transaction CVM.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000135                       		ERR_VISAWAVE_BASE+0x000135			/*!< VisaWave error 135 : No more CVM or b7 not set for next CVM.<br>(VisaWave_Txn_CvmSelection.c, __VisaWave_Txn_CvmSelection_ProcessCvmSelection) */
#define ERR_VISAWAVE_000136                       		ERR_VISAWAVE_BASE+0x000136			/*!< VisaWave error 136 : Invalid value of the \ref TAG_EMV_TERMINAL_TYPE tag (must be 0x00 : international contactless transactions or 0x01 : domestic contactless transactions only).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_DomesticOrInternational) */
#define ERR_VISAWAVE_000137                       		ERR_VISAWAVE_BASE+0x000137			/*!< VisaWave error 137 : The TAG_VISAWAVE_TERMINAL_TRANSACTION_QUALIFIERS tag is not found.<br>(VisaWave_Txn_Iap.c, VisaWave_is_TTQ_Set) */
#define ERR_VISAWAVE_000138                       		ERR_VISAWAVE_BASE+0x000138			/*!< VisaWave error 138 : An error occured when getting TAG_VISAWAVE_TERMINAL_TRANSACTION_QUALIFIERS from the database.<br>(VisaWave_Txn_Iap.c, VisaWave_is_TTQ_Set) */
#define ERR_VISAWAVE_000139                       		ERR_VISAWAVE_BASE+0x000139			/*!< VisaWave error 139 : Missing mandatory ICC data : TAG_VISAWAVE_VLP_ISSUER_AUTHORIZATION_CODE.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_CheckMandatoryDataPresence) */
#define ERR_VISAWAVE_00013A                       		ERR_VISAWAVE_BASE+0x00013A			/*!< VisaWave error 13A : An error occured when getting \ref TAG_EP_CLESS_TRANSACTION_LIMIT from the database.<br>(VisaWave_Txn_Initial.c, __VisaWave_Txn_Initial_isContactLessTransactionAllowed) */
#define ERR_VISAWAVE_00013B                       		ERR_VISAWAVE_BASE+0x00013B			/*!< VisaWave error 13B : An error occured when getting \ref TAG_EMV_AMOUNT_AUTH_NUM from the database.<br>(VisaWave_Txn_Initial.c, __VisaWave_Txn_Initial_isContactLessTransactionAllowed) */
#define ERR_VISAWAVE_00013C                       		ERR_VISAWAVE_BASE+0x00013C			/*!< VisaWave error 13C : The transaction amount is greater than the contactless transaction limit, a contact transaction is asked.<br>(VisaWave_Txn_Initial.c, __VisaWave_Txn_Initial_isContactLessTransactionAllowed) */
#define ERR_VISAWAVE_00013D                       		ERR_VISAWAVE_BASE+0x00013D			/*!< VisaWave error 13D : The transaction amount is greater than the contactless transaction limit, but there is no contact interface available.<br>(VisaWave_Txn_Initial.c, __VisaWave_Txn_Initial_isContactLessTransactionAllowed) */
#define ERR_VISAWAVE_00013E                       		ERR_VISAWAVE_BASE+0x00013E			/*!< VisaWave error 13E : It is an international transaction, a contact transaction is asked.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_DomesticOrInternational) */
#define ERR_VISAWAVE_00013F                       		ERR_VISAWAVE_BASE+0x00013F			/*!< VisaWave error 13F : It is an international transaction, but there is no contact interface available.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Rad_DomesticOrInternational) */
#define ERR_VISAWAVE_000140                       		ERR_VISAWAVE_BASE+0x000140			/*!< VisaWave error 140 : Missing card mandatory data : TAG_EMV_APPLI_PAN.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Initial_CheckLastTransactionPAN) */
#define ERR_VISAWAVE_000141                       		ERR_VISAWAVE_BASE+0x000141			/*!< VisaWave error 141 : Database error when getting the \ref TAG_VISAWAVE_LAST_TRANSACTION_PAN tag.<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Initial_CheckLastTransactionPAN) */
#define ERR_VISAWAVE_000142                       		ERR_VISAWAVE_BASE+0x000142			/*!< VisaWave error 142 : Transaction not allowed with this card (not enought time since the last transaction).<br>(VisaWave_Txn_Rad.c, __VisaWave_Txn_Initial_CheckLastTransactionPAN) */
#define ERR_VISAWAVE_000143                       		ERR_VISAWAVE_BASE+0x000143			/*!< VisaWave error 143 : An error occured when adding TAG_EMV_ICC_DYNAMIC_NUMBER tag in the database.<br>(VisaWave_Txn_Oda.c, __VisaWave_Txn_Oda_DDA_VerifySignature) */

//! @}


/////////////////////////////////////////////////////////////////
//// Types //////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////
//// Global Data ///////////////////////////////////////////////


/////////////////////////////////////////////////////////////////
//// Static function definitions ////////////////////////////////


/////////////////////////////////////////////////////////////////
//// Functions //////////////////////////////////////////////////

//! \addtogroup VisaWaveInterfaceFunctions
//! @{

//! \brief This function performs the VisaWave transaction with the presented card.
//!	All the necessary data to perform the transaction shall be provided.
//! This function shall be called after the application selection (PPSE performed and Final SELECT response and status word provided).
//!	It begins by analysing the provided Final SELECT response and Status code and perform the transaction until completion.
//! \param[in,out] pDataStruct Shared buffer used to exchange data with the kernel. 
//!	This shared buffer shall be initialised using the \ref GTL_SharedExchange_InitShared() function 
//! (please refer to GTL documentation for more information).
//!	- Input data list (bold ones are mandatory or highly recommended)
//!		- <dfn>\ref TAG_VISAWAVE_ONLINE_ONLY</dfn> : support for Online transaction only.
//!		- \ref TAG_EMV_TRANSACTION_DATE : Transaction date.
//!		- \ref TAG_EMV_TRANSACTION_TIME : Transaction time.
//!		- \ref TAG_EMV_AMOUNT_AUTH_BIN : Amount Authorised, Binary format. Take care to be coherent with the provided value in \ref TAG_EMV_AMOUNT_AUTH_NUM. No verification will be performed by the kernel itself.
//!		- \ref TAG_EMV_AMOUNT_AUTH_NUM : Amount Authorised, Numeric format. Take care to be coherent with the provided value in \ref TAG_EMV_AMOUNT_AUTH_BIN. No verification will be performed by the kernel itself.
//!		- <dfn>\ref TAG_EMV_AMOUNT_OTHER_NUM</dfn> : Amount Other, Numeric format.
//!		- <dfn>\ref TAG_EMV_AMOUNT_OTHER_BIN</dfn> : Amount Other, Binary format.
//!		- \ref TAG_EMV_TRANSACTION_CURRENCY_CODE : Transaction currency code.
//!		- <dfn>\ref TAG_EMV_TRANSACTION_CURRENCY_EXPONENT</dfn> : Transaction currency exponent.
//!		- \ref TAG_EMV_TRANSACTION_TYPE : Transaction type.
//!		- \ref TAG_EMV_IFD_SERIAL_NUMBER : Payment interface serial number.
//!		- \ref TAG_EMV_TERMINAL_FLOOR_LIMIT : Terminal floor limit for the chosen AID.
//!		- \ref TAG_EMV_TERMINAL_COUNTRY_CODE : Terminal country code.
//!		- \ref TAG_EMV_ADD_TERMINAL_CAPABILITIES : Terminal Additional Capabilities.
//!		- \ref TAG_EMV_TERMINAL_TYPE : Terminal Type (For VisaWave: 0x00: international, 0x01: domestic transactions only).
//!		- <dfn>\ref TAG_EMV_ACQUIRER_IDENTIFIER</dfn> : Acquirer identifier.
//!		- <dfn>\ref TAG_EMV_MERCHANT_CATEGORY_CODE</dfn>	: Merchant category code.
//!		- <dfn>\ref TAG_EMV_MERCHANT_IDENTIFIER</dfn> : Merchant identifier.
//!		- \ref TAG_EMV_TERMINAL_IDENTIFICATION : Terminal identification.
//!		- \ref TAG_EMV_AID_TERMINAL : AID as configured in the terminal.
//!		- \ref TAG_EMV_INT_TRANSACTION_TYPE : Internal transaction type (managed by the application, and used by the kernel).
//!		- <dfn>\ref TAG_EP_KERNEL_TO_USE</dfn> : Kernel to be used (for VisaWave, it shall be set to \a DEFAULT_EP_KERNEL_VISA).
//!		- <dfn>\ref TAG_EP_AID_OPTIONS</dfn> : AID application selection options (please refer to \a EntryPoint_Tags.h for more information).
//!		- \ref TAG_EP_CLESS_TRANSACTION_LIMIT : Contactless Transaction Limit for the chosen AID.
//!		- \ref TAG_EP_CLESS_CVM_REQUIRED_LIMIT : Contactless CVM required limit for the chosen AID.
//!		- \ref TAG_EP_CLESS_FLOOR_LIMIT : Contactless Floor limit for the chosen AID.
//!		- \ref TAG_EP_AID_ADDITIONAL_RESULTS : Application selection additional results for the chosen AID (indicates the Entry Point results, such as floor limits exceeded, etc).
//!			Please refer to \a EntryPoint_Tags.h documentation for more information about this tag.
//!		- \ref TAG_EP_FINAL_SELECT_COMMAND_SENT : Final SELECT command (for internal VisaWave mandatory checkings).
//!		- \ref TAG_EP_FINAL_SELECT_RESPONSE : Final SELECT response provided by the application selection. It will be analysed by the VisaWave kernel itself.
//!		- \ref TAG_EP_FINAL_SELECT_STATUS_WORD : Final SELECT response status word provided by the application selection. It will be analysed by the VisaWave kernel itself.
//!		- \ref TAG_EMV_TERMINAL_CAPABILITIES : Terminal capabilities to be used . Terminal capabilities is automatically set by the kernel depending on the application selection results.
//!		- \ref TAG_EMV_INT_TAC_DEFAULT : Terminal Action Code Default.
//!		- \ref TAG_EMV_INT_TAC_DENIAL : Terminal Action Code Denial.
//!		- \ref TAG_EMV_INT_TAC_ONLINE : Terminal Action Code Online.
//!		- <dfn>\ref TAG_KERNEL_TERMINAL_SUPPORTED_LANGUAGES</dfn> : Supported language for the chosen AID.
//!		- <dfn>\ref TAG_KERNEL_PAYMENT_FLOW_STOP</dfn> : Data field indicating steps where the transaction flow has to be stopped. It is strongly recommended, for transaction performances purposes, to not interrupt the transaction flow using this way (recommended value is all set to 0).
//!		- <dfn>\ref TAG_KERNEL_PAYMENT_FLOW_CUSTOM</dfn> : Data field indicating steps where customisation is necessary.
//!		- <dfn>\ref TAG_KERNEL_PROPRIETARY_TAGS</dfn> : Description of the proprietary tags that shall be considered as known by the kernel.
//!	- Output data returned by the VisaWave kernel
//!		- \ref TAG_VISAWAVE_VLP_ISSUER_AUTHORIZATION_CODE : VLP Issuer Authorization Code.
//!		- \ref TAG_VISAWAVE_VLP_AVAILABLE_FUNDS : VLP available funds.
//!		- \ref TAG_VISAWAVE_TRANSACTION_CVM : Transaction CVM (No CVM, Signature or Online PIN).
//!		- \ref TAG_EMV_AMOUNT_AUTH_NUM : Amount Authorized, numeric format.
//!		- \ref TAG_EMV_AMOUNT_OTHER_NUM : Amount Other, numeric format.
//!		- \ref TAG_EMV_TERMINAL_COUNTRY_CODE : Terminal Country Code.
//!		- \ref TAG_EMV_TVR : Terminal Verification Results.
//!		- \ref TAG_EMV_TRANSACTION_TYPE : Transaction Type.
//!		- \ref TAG_EMV_UNPREDICTABLE_NUMBER : Transaction Unpredictable Number.
//!		- \ref TAG_EMV_APPLI_PAN_SEQUENCE_NUMBER : Application PAN Sequence Number.
//!		- \ref TAG_EMV_AIP : Application Interchange Profile.
//!		- \ref TAG_EMV_ATC : Application Transaction Counter.
//!		- \ref TAG_EMV_APPLICATION_CRYPTOGRAM : Application Cryptogram.
//!		- \ref TAG_EMV_CRYPTOGRAM_INFO_DATA : Cryptogram Information Data.
//!		- \ref TAG_EMV_ISSUER_APPLI_DATA : Issuer Application Data (if present).
//!		- \ref TAG_EMV_TRANSACTION_DATE : Transaction Date.
//!		- \ref TAG_EMV_TRANSACTION_TIME : Transaction Time.
//!		- \ref TAG_EMV_APPLI_EXPIRATION_DATE : Expiration Date.
//!		- \ref TAG_EMV_APPLICATION_LABEL : Application Label (if present).
//!		- \ref TAG_EMV_TRANSACTION_CURRENCY_CODE : Transaction Currency Code.
//!		- \ref TAG_EMV_TRANSACTION_CURRENCY_EXPONENT : Transaction Currency Exponent.
//!		- \ref TAG_EMV_DF_NAME : DF Name.
//!		- \ref TAG_EMV_APPLI_PAN : Application PAN.
//!		- \ref TAG_KERNEL_SELECTED_PREFERED_LANGUAGE selected language during the language selection.
//!	- If transaction is cancelled or interrupted, the \ref TAG_KERNEL_LAST_EXECUTED_STEP_INTERRUPTION is returned to indicate the last executed step when the interruption / cancellation occurred.
//!		Please refer to \ref VisaWaveTransactionFlowSteps for more information about the existing transaction steps.
//! \return Kernel processing status code.
//! - \ref KERNEL_STATUS_OFFLINE_APPROVED : Transaction succeeded and is offline approved.
//!	- \ref KERNEL_STATUS_OFFLINE_DECLINED : Transaction is offline declined.
//!	- \ref KERNEL_STATUS_ONLINE_AUTHORISATION : Transaction succeeded and has to be sent online for authorisation.
//!	- \ref KERNEL_STATUS_CANCELLED : if transaction has been cancelled by the custom application (using \a VisaWave_Cancel() function).
//!	Take care that when transaction is cancelled by the user, status code returned is (\ref KERNEL_STATUS_CANCELLED | \ref KERNEL_STATUS_STOPPED_BY_APPLICATION_MASK).
//!	- \ref KERNEL_STATUS_COMMUNICATION_ERROR : if a communication error occurred with the card (no response to a command because card has been to early removed for example).
//!	- \ref KERNEL_STATUS_USE_CONTACT_INTERFACE : if transaction shall be conducted over another interface.
//!	- \ref KERNEL_STATUS_INVALID_INPUT_DATA : if provided data in \a pDataStruct are not correct.
//!	- \ref KERNEL_STATUS_ICC_MISSING_DATA : if mandatory ICC data is missing.
//!	- \ref KERNEL_STATUS_ICC_INVALID_DATA : if ICC returned an invalid data.
//!	- \ref KERNEL_STATUS_ICC_REDUNDANT_DATA : if ICC returned a redundant data.
//!	- \ref KERNEL_STATUS_ICC_DATA_FORMAT_ERROR : if ICC returned data with bad format.
//!	- \ref KERNEL_STATUS_TERM_MISSING_DATA : A mandatory terminal is missing to perform the transaction.
//!	- \ref KERNEL_STATUS_CARD_BLOCKED : If the ICC is blocked (Final SELECT status word is 0x6A81).
//!	- \ref KERNEL_STATUS_APPLICATION_BLOCKED : If the ICC application is blocked (Final SELECT status word is 0x6283).
//!	- \ref KERNEL_STATUS_DATABASE_ERROR : A database error occurred.
//!	- \ref KERNEL_STATUS_UNKNOWN_SW : ICC responded to a command with an unexpected status word.
//!	- \ref KERNEL_STATUS_COND_OF_USE_NOT_SATISFIED : Card responded to GPO with 0x6985 status word.
//!	- \ref KERNEL_STATUS_LACK_OF_MEMORY : there is not enough memory to perform the transaction.
//!	- \ref KERNEL_STATUS_INTERNAL_ERROR : An internal kernel error occurred (would never occur).
//!	- \ref KERNEL_STATUS_REVOKED_CERTIFICATE : The certificate is revoked.
//!	- \ref KERNEL_STATUS_EXPIRED_CERTIFICATE : The certificate is expired.
//!	- \ref KERNEL_STATUS_LIB_INTERFACE_ERROR : A library interface error occurred.
//!	- \ref KERNEL_STATUS_SERVICE_NOT_AVAILABLE : If the VisaWave kernel is not loaded in the terminal or if the requested service does not exists.
//!	- \ref VISAWAVE_STATUS_PAYWAVE_CARD	: it is a payWave card .
//!	- \ref VISAWAVE_STATUS_OVERSEA_CARD : it is a contactless card that is not accepted in VISA AP market.
//!	- \ref VISAWAVE_STATUS_CONTACT_INTERFACE_NOT_AVAILABLE : No contact interface available.
//! \note If the transaction is cancelled or suspended by the application, the returned status code is (\a status \a code | \ref KERNEL_STATUS_STOPPED_BY_APPLICATION_MASK).
//!	If transaction is cancelled or interrupted by the user, the kernel database is not altered to allow continuing the transaction 
//!	anyway if requested (using \ref VisaWave_ResumeTransaction() function).

int VisaWave_DoTransaction (T_SHARED_DATA_STRUCT * pDataStruct);



//! \brief This function allows to resume the transaction when an interruption occurred (requested interruption or cancellation).
//! The transaction will continue where it has been interrupted.
//! \param[in,out] pDataStruct Shared buffer used to exchange data with the kernel.
//!	- Input data can be provided. It will replace each existing data within the kernel database.
//!	- Output data are the same as \ref VisaWave_DoTransaction() function (as it continues the transaction).
//! \return Kernel processing status code (identical than the \ref VisaWave_DoTransaction() function).
//! The returned value depends on the step where the transaction is resumed.
//!	For example, \ref KERNEL_STATUS_COND_OF_USE_NOT_SATISFIED cannot be returned if you resume the transaction after the \ref STEP_VISAWAVE_INITIATE_APPLI_PROCESSING step.

int VisaWave_ResumeTransaction (T_SHARED_DATA_STRUCT * pDataStruct);



//! \brief This function allows to retrieve the entire kernel database.
//! All the tags present in the database are retrieved.
//! \param[out] pDataStruct Shared buffer filled with all the kernel data. 
//! Make sure the buffer size you provide is bigger enough to store all the tags.
//! Note the shared buffer is automatically cleared by the VisaWave kernel.
//! \return Kernel processing status code.
//!	- \ref KERNEL_STATUS_OK if all the data are provided and no error occurred.
//!	- \ref KERNEL_STATUS_LACK_OF_MEMORY if there is not enough memory in \a pDataStruct to store all the tags.
//!	- \ref KERNEL_STATUS_DATABASE_ERROR if a database error occurred.
//!	- \ref KERNEL_STATUS_LIB_INTERFACE_ERROR : A library interface error occurred.
//!	- \ref KERNEL_STATUS_SERVICE_NOT_AVAILABLE : if the VisaWave kernel is not loaded in the terminal or if the requested service does not exists.
//! \note It is strongly recommended to not call this function during the transaction flow, as it should impact the transaction performance.

int VisaWave_GetAllData (T_SHARED_DATA_STRUCT * pDataStruct);



//! \brief This function allows to request kernel some tags (if present in its database).
//! \param[in,out] pDataStruct Shared buffer used to exchange data with the kernel.
//! Make sure the buffer size you provide is bigger enough to store all the tags.
//! Note the shared buffer is automatically cleared by the VisaWave kernel.
//!	- Input data : Tag to be requested to the kernel. It is a concatenation of tags and length set to 0.
//! - Output data : list of retrieved data (coded in BER-TLV) that have been requested and that are present in the kernel database.
//! \return Kernel processing status code.
//!	- \ref KERNEL_STATUS_OK if all the data are provided and no error occurred.
//!	- \ref KERNEL_STATUS_LACK_OF_MEMORY if there is not enough memory in \a pDataStruct to store all the tags.
//!	- \ref KERNEL_STATUS_DATABASE_ERROR if a database error occurred.
//!	- \ref KERNEL_STATUS_LIB_INTERFACE_ERROR : A library interface error occurred.
//!	- \ref KERNEL_STATUS_SERVICE_NOT_AVAILABLE : if the visaWave kernel is not loaded in the terminal or if the requested service does not exists.
//! \note It is strongly recommended to not call this function during the transaction flow, as it should impact the transaction performance.
//! \remarks Example to get the transaction date and the transaction time from the VisaWave kernel :
//! \code
//!	T_SHARED_DATA_STRUCT * pSharedDataStruct;
//!	
//!	// Initialise the shared buffer to be used (if not already done).
//!	// Make sure size is bigger enough.
//!	pSharedDataStruct = GTL_SharedExchange_InitShared (256);
//!
//!	if (pSharedDataStruct == NULL)
//!	{
//!		// An error occurred when creating the shared data structure.
//!		...
//!	}
//!	
//!	// Add TAG_EMV_TRANSACTION_DATE tag in pSharedDataStruct with a zero length.
//!	ret = GTL_SharedExchange_AddTag (pSharedDataStruct, TAG_EMV_TRANSACTION_DATE, 0, NULL);
//!	// Check returned value ...
//!	
//!	// Add TAG_EMV_TRANSACTION_TIME tag in pSharedDataStruct with a zero length.
//!	ret = GTL_SharedExchange_AddTag (pSharedDataStruct, TAG_EMV_TRANSACTION_TIME, 0, NULL);
//!	// Check returned value ...
//!	
//!	// Call the VisaWave kernel to retrieve the requested tags.
//!	nResult = VisaWave_GetData (pSharedDataStruct);
//!	if (nResult != KERNEL_STATUS_OK)
//!	{
//!		// An error occurred when requesting tags to the kernel.
//!		// ...
//!	}
//!	
//!	// Now, pSharedDataStruct contains the requested tags (only the ones that are present within the kernel database)
//!	// You can use GTL_SharedExchange_GetNext and GTL_SharedExchange_FindNext functions to retrieve the desired tags.
//!	// ...
//!	
//!	// If created, destroy the shared buffer if not used anymore
//!	if (pSharedDataStruct != NULL)
//!		GTL_SharedExchange_DestroyShare (pSharedDataStruct);
//! \endcode

int VisaWave_GetData (T_SHARED_DATA_STRUCT * pDataStruct);



//! \brief Function to be used to load some data within the kernel.
//! \param[in] pDataStruct Shared buffer filled with the data to be loaded into the kernel.
//!	- \a pDataStruct is filled using the \a GTL_SharedExchange_AddTag() function.
//!	- All the tags that are unknown by the kernel are ignored.
//!	- If a tag is added with a zero length, it removes this tag from the kernel database.
//!	- If a provided tag is already present in the database, this one will be replaced by the new value.
//! \return Kernel processing status code.
//!	- \ref KERNEL_STATUS_OK if tags correctly added in the kernel database and no error occurred.
//!	- \ref KERNEL_STATUS_INVALID_INPUT_DATA : if provided data in \a pDataStruct are not correct.
//!	- \ref KERNEL_STATUS_LACK_OF_MEMORY if there is not enough memory in the kernel database to store all the tags.
//!	- \ref KERNEL_STATUS_DATABASE_ERROR if a database error occurred.
//!	- \ref KERNEL_STATUS_LIB_INTERFACE_ERROR : A library interface error occurred.
//!	- \ref KERNEL_STATUS_SERVICE_NOT_AVAILABLE : if the VisaWave kernel is not loaded in the terminal or if the requested service does not exists.
//! \note It is strongly recommended to not call this function during the transaction flow, as it should impact the transaction performance.
//! \remarks Example to get the transaction date and the transaction time from the VisaWave kernel :
//! \code
//!	T_SHARED_DATA_STRUCT * pSharedDataStruct;
//!	unsigned char ucTransactionDate[] = {0x09,0x09,0x09}; // September 9th of 2009
//!	
//!	// Initialise the shared buffer to be used (if not already done).
//!	// Make sure size is bigger enough.
//!	pSharedDataStruct = GTL_SharedExchange_InitShared (256);
//!
//!	if (pSharedDataStruct == NULL)
//!	{
//!		// An error occurred when creating the shared data structure.
//!		...
//!	}
//!	
//!	// Add transaction date in pSharedDataStruct (if tag already present in the database, this one will be replaced by the one sent here).
//!	ret = GTL_SharedExchange_AddTag (pSharedDataStruct, TAG_EMV_TRANSACTION_DATE, 3, ucTransactionDate);
//!	// Check returned value ...
//!	
//!	// Add transaction time tag in pSharedDataStruct with a zero length (to indicate you want to remove it).
//!	ret = GTL_SharedExchange_AddTag (pSharedDataStruct, TAG_EMV_TRANSACTION_TIME, 0, NULL);
//!	// Check returned value ...
//!	
//!	// Call the VisaWave kernel to load the tags.
//!	nResult = VisaWave_LoadData (pSharedDataStruct);
//!	if (nResult != KERNEL_STATUS_OK)
//!	{
//!		// An error occurred when requesting tags to the kernel.
//!		// ...
//!	}
//!	
//!	// Tags has been correctly loaded in the kernel database
//!	// ...
//!	
//!	// If created, destroy the shared buffer if not used anymore
//!	if (pSharedDataStruct != NULL)
//!		GTL_SharedExchange_DestroyShare (pSharedDataStruct);
//! \endcode

int VisaWave_LoadData (T_SHARED_DATA_STRUCT * pDataStruct);



//! \brief This function can be used to cancel the VisaWave transaction.
//! We could imagine using it to cancel the transaction when the red key is pressed during the VisaWave transaction for example.
//! \return Always \ref KERNEL_STATUS_OK.
//! \note This is the responsibility of the custom application to correctly use this function. 
//! The VisaWave transaction can be cancelled at any step.
//! If called, the kernel will return \ref KERNEL_STATUS_CANCELLED on the following functions :
//!	- \ref VisaWave_DoTransaction().
//!	- \ref VisaWave_ResumeTransaction().

int VisaWave_Cancel (void);



//! \brief This function allows to manage the VisaWave kernel debug features.
//! This allows activating / deactivating the following debug features :
//!	- Trace : it provides debug information in the \a Trace.exe tool provided in the TDS.
//!	- Time measurements : it manages in the database the \ref TAG_KERNEL_DEBUG_TIME tag that can be retrieved using \ref VisaWave_GetData() function).
//!	Note if Time debug feature is not activated, \ref TAG_KERNEL_DEBUG_TIME tag is not stored in the kernel database.
//!	- APDU storage : it stores all the APDU sent to the ICC and responses sent by the ICC in the database, using specific tags. 
//!	This concerns commands from GPO command to the Internal Authenticate command (for Offline transaction) or Generate AC command (for Online transaction).
//!	Each command is stored in a \ref TAG_VISAWAVE_INT_SENT_APDU tag, each received ICC response is stored in a \ref TAG_VISAWAVE_INT_CARD_RESPONSE tag.
//! \param[in] pDataStruct Shared buffer filled with the \ref TAG_KERNEL_DEBUG_ACTIVATION tag indicating the debug mode.
//!	If the tag is not present or set to 0, then all the debug features are deactivated.
//! \return
//!	- \ref KERNEL_STATUS_OK if debug mode correctly activated / deactivated.
//!	- \ref KERNEL_STATUS_LIB_INTERFACE_ERROR : A library interface error occurred.
//!	- \ref KERNEL_STATUS_SERVICE_NOT_AVAILABLE : if the VisaWave kernel is not loaded in the terminal or if the requested service does not exists.
//!	\note If debug features shall be activated, it is strongly recommended to call this function before the transaction has started.
//!	It allows to not waste time during the transaction (performances purposes).
//! \remarks Example to set the debug mode :
//! \code
//!	T_SHARED_DATA_STRUCT * pSharedDataStruct;
//!	unsigned char ucTraceOnly = KERNEL_DEBUG_MASK_TRACES;	// Trace only is activated
//!	unsigned char ucApduOnly = KERNEL_DEBUG_MASK_APDU; // APDU is activated
//!	unsigned char ucTracesAndApdu = (KERNEL_DEBUG_MASK_TRACES | KERNEL_DEBUG_MASK_APDU); // Traces and APDU debug features are activated.
//!	
//!	// Initialise the shared buffer to be used (if not already done).
//!	// Make sure size is bigger enough.
//!	pSharedDataStruct = GTL_SharedExchange_InitShared (128);
//!
//!	if (pSharedDataStruct == NULL)
//!	{
//!		// An error occurred when creating the shared data structure.
//!		...
//!	}
//!	
//!	// Indicate Traces Only has to be activated.
//!	ret = GTL_SharedExchange_AddTag (pSharedDataStruct, TAG_KERNEL_DEBUG_ACTIVATION, 1, &ucTraceOnly);
//!	// Check returned value ...
//!	
//!	// Call the VisaWave kernel to set the debug mode.
//!	nResult = VisaWave_DebugManagement (pSharedDataStruct);
//!	if (nResult != KERNEL_STATUS_OK)
//!	{
//!		// An error occurred when requesting tags to the kernel.
//!		// ...
//!	}
//!	
//!	// Indicate Traces Only has to be activated.
//!	ret = GTL_SharedExchange_AddTag (pSharedDataStruct, TAG_KERNEL_DEBUG_ACTIVATION, 1, &ucApduOnly);
//!	// Check returned value ...
//!	
//!	// Call the VisaWave kernel to load the tags.
//!	nResult = VisaWave_DebugManagement (pSharedDataStruct);
//!	if (nResult != KERNEL_STATUS_OK)
//!	{
//!		// An error occurred when requesting tags to the kernel.
//!		// ...
//!	}
//!	
//!	// At this step, only APDU is activated (trace has been deactivated).
//!	// If you want to activate both Traces and APDU, send TAG_KERNEL_DEBUG_ACTIVATION = ucTracesAndApdu.
//!	// ...
//!	
//!	// If created, destroy the shared buffer if not used anymore
//!	if (pSharedDataStruct != NULL)
//!		GTL_SharedExchange_DestroyShare (pSharedDataStruct);
//! \endcode

int VisaWave_DebugManagement (T_SHARED_DATA_STRUCT * pDataStruct);



//!	\brief This function clears and initialise the VisaWave kernel.
//! It fully clear the database and restores the global data (reset cancel, deactivate debug features, etc). 
//! <b>It is mandatory to call this function after each VisaWave transaction has been completed (and the terminal 
//! is returning on idle state).</b>
//! \return Kernel processing status code.
//!	- \ref KERNEL_STATUS_OK if VisaWave kernel correctly cleared and initialised.
//!	- \ref KERNEL_STATUS_DATABASE_ERROR if a database error occurred.
//!	- \ref KERNEL_STATUS_LIB_INTERFACE_ERROR : A library interface error occurred.
//!	- \ref KERNEL_STATUS_SERVICE_NOT_AVAILABLE : if the VisaWave kernel is not loaded in the terminal or if the requested service does not exists.

int VisaWave_Clear (void);



//! \brief This function gets the kernel information.
//! \param[out] pDataStruct Shared buffer filled with the following tags (note this buffer is automatically cleared by the function) :
//!	- \ref TAG_KERNEL_APPLICATION_NAME that indicates the application name (ASCII format).
//!	- \ref TAG_KERNEL_APPLICATION_IDENT that indicates the kernel identifier (in ASCII format, \a 3349 followed by the VisaWave kernel version on 4 digits).
//!	- \ref TAG_KERNEL_APPLICATION_CRC that indicates the VisaWave kernel CRC.
//! \return
//!	- \ref KERNEL_STATUS_OK if kernel information correctly retrieved.
//!	- \ref KERNEL_STATUS_LACK_OF_MEMORY if there is not enough memory in \a pDataStruct to store all the tags.
//!	- \ref KERNEL_STATUS_INTERNAL_ERROR if an internal error occurred.
//!	- \ref KERNEL_STATUS_LIB_INTERFACE_ERROR if a library interface error occurred.
//!	- \ref KERNEL_STATUS_SERVICE_NOT_AVAILABLE if the VisaWave kernel is not loaded in the terminal or if the requested service does not exists.

int VisaWave_GetInfos (T_SHARED_DATA_STRUCT * pDataStruct);

//! @}



//! \addtogroup VisaWaveTransactionFlow
//! @{
//! Here is described the transaction flow as it is implemented in the VisaWave kernel. Each transaction step in the following graph corresponds to a transaction step described in \ref VisaWaveTransactionFlowSteps.
//! 
//! 
//! \dot
//! digraph G {
//!		bgcolor="transparent";
//!		ranksep="0.2 equally"
//! 
//!		graph [fontname="FreeSans",fontsize=10];
//!		node [shape="box",fontname="FreeSans",fontsize=10,height=0.4,width=2];
//!		edge [fontname="FreeSans",fontsize=10,labelfontname="FreeSans",labelfontsize=10];
//! 
//!		nodeStart [label="VisaWave_DoTransaction",shape="ellipse",style=filled];
//!		node_STEP_VISAWAVE_INITIAL [label="Initial",size="50,2",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_INITIAL"];
//!		node_STEP_VISAWAVE_FINAL_SELECTION [label="Final Application Selection",size="5,2",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_FINAL_SELECTION"];
//!		node_STEP_VISAWAVE_INITIATE_APPLI_PROCESSING	[label="Initiate Application Processing",size="5,2",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_INITIATE_APPLI_PROCESSING"];
//!		node_STEP_VISAWAVE_READ_APPLI_DATA [label="Read Application Data",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_READ_APPLI_DATA"];
//!		node_STEP_VISAWAVE_CVM_SELECTION [label="CVM Selection",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_CVM_SELECTION"];
//!		node_STEP_VISAWAVE_FLOW_ROUTER [label="Flow Router",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_FLOW_ROUTER"];
//!		node_STEP_VISAWAVE_GENERATE_AC [label="Generate AC",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_GENERATE_AC"];
//!		node_STEP_VISAWAVE_GET_CERTIFICATE [label="Get Certificate",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_GET_CERTIFICATE"];
//!		node_STEP_VISAWAVE_DDA_PROCESSING [label="DDA Processing",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_DDA_PROCESSING"];
//!		node_STEP_VISAWAVE_REMOVE_CARD [label="Remove Card",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_REMOVE_CARD"];
//!		node_STEP_VISAWAVE_COMPLETION [label="Completion",style=filled,fillcolor=plum,URL="\ref STEP_VISAWAVE_COMPLETION"];
//!		nodeStop [label="Return transaction result",shape="ellipse",style=filled];
//! 
//!		nodeStart -> node_STEP_VISAWAVE_INITIAL [weight=100];
//!		node_STEP_VISAWAVE_INITIAL -> node_STEP_VISAWAVE_FINAL_SELECTION [weight=100];
//!		node_STEP_VISAWAVE_FINAL_SELECTION -> node_STEP_VISAWAVE_INITIATE_APPLI_PROCESSING [weight=100];
//!		node_STEP_VISAWAVE_INITIATE_APPLI_PROCESSING -> node_STEP_VISAWAVE_READ_APPLI_DATA [weight=100];
//!		node_STEP_VISAWAVE_READ_APPLI_DATA -> node_STEP_VISAWAVE_CVM_SELECTION [weight=100];
//!		node_STEP_VISAWAVE_CVM_SELECTION -> node_STEP_VISAWAVE_FLOW_ROUTER [weight=100];
//!		node_STEP_VISAWAVE_FLOW_ROUTER -> node_STEP_VISAWAVE_GET_CERTIFICATE [label="Offline",weight=75];
//!		node_STEP_VISAWAVE_FLOW_ROUTER -> node_STEP_VISAWAVE_GENERATE_AC [label="Online",weight=75];
//!		node_STEP_VISAWAVE_GET_CERTIFICATE -> node_STEP_VISAWAVE_DDA_PROCESSING [weight=100];
//!		node_STEP_VISAWAVE_DDA_PROCESSING -> node_STEP_VISAWAVE_REMOVE_CARD [weight=100];
//!		node_STEP_VISAWAVE_GENERATE_AC -> node_STEP_VISAWAVE_REMOVE_CARD [weight=100];
//!		node_STEP_VISAWAVE_REMOVE_CARD -> node_STEP_VISAWAVE_COMPLETION [weight=100];
//!		node_STEP_VISAWAVE_COMPLETION -> nodeStop [weight=100];
//!	}
//! \enddot
//! @}



//! \addtogroup VisaWaveOverview
//! @{
//! <h2>Presentation</h2><br>
//! The VisaWave kernel allows you to easily perform transactions using the Visa contactless technology. It is fully compliant 
//! with the <i>Visa Asia Pacific Reader Specification version 3.1.1 (November 2007)</i>.<br>
//! The kernel supports the following features :
//!	- Full supports of VisaWave 2 contactless cards.
//!	- Following CVM are supported and configurable : No CVM, Signature and Online PIN.
//!	- Language selection management (multi language supported).
//!	- Offline Data Authentication supported methods : DDA.
//!	- Offline and online capabilities.
//! 
//! <table cellspacing="5" bgcolor="#FFCCCC" bordercolordark="green" bordercolorlight="yellow">
//! <tr><td>
//! <h2>Performances requirements</h2><br>
//! Visa AP requires that the contactless card remains in the readers contactless field less than 500 ms
//!
//! These are huge constraints. That is why it is mandatory for you to optimise your application at the maximum to minimise 
//! the processing time when the transaction is in progress (i.e. when the interaction between the ICC and the terminal and 
//! in progress).<br>
//! It means :
//!	- The maximum of the data to be sent to the VisaWave kernel shall be prepared in advance.
//!	- The customisation shall be reduced at the minimum during the transaction.
//! </td></tr>
//! </table>
//! 
//! <h2>Additional information</h2><br>
//! The VisaWave kernel performs the transaction but it does not manage :
//!	- The graphical user interface : This is the role of your application to perform the GUI. It will allow a better customisation.
//!	- The VisaWave parameters : all the parameters (supported AID, supported CA Keys, etc) are exclusively managed by the custom application itself.
//!	When a transaction is to be performed, this is the role of your application to provide the correct data to the kernel to perform the transaction.
//!	There is no persistent data within the VisaWave kernel itself. After each transaction, the VisaWave kernel shall be completely cleared.
//! 
//!	<br><br>
//! <table cellspacing="5" bgcolor="#FFCCCC" bordercolordark="green" bordercolorlight="yellow">
//! <tr><td>
//! It is <b>mandatory</b> to call the \ref VisaWave_Clear() function after each transaction has been completed. Else, next transaction will not correctly work.
//! </td></tr>
//! </table>
//! 
//! @}



//! \addtogroup VisaWaveCustomisationProcess
//! @{
//! \details It is possible for an application to be called back during the transaction process to make some customisation and interact with the transaction flow.
//! For example, it would be necessary during the VisaWave transaction to indicate card has been correctly read (GUI) etc.
//! The VisaWave customisation will allow you to perform any processing you need that is not specified by the VisaWave specification.
//! <br><br>
//! <table cellspacing="5" bgcolor="#FFCCCC" bordercolordark="green" bordercolorlight="yellow">
//! <tr><td>
//! <b>Warning</b> : The terminal processing time during the transaction (i.e. until the reader and the card interact together) shall not exceed 500ms. That is why it 
//! is strongly recommended to avoid at the maximum the number of customisation calls during this period.
//! </td></tr>
//! </table>
//! 
//! <h2>How to be called to perform customisation on a transaction step</h2><br>
//! To call back an application for customisation, the VisaWave kernel shall have the following information :
//!	- The application identifier to call.
//!	- The application service to use.
//!	- A bit field indicating which step the application wishes to customise.
//!
//! All of this information is provided to the VisaWave kernel using the \ref TAG_KERNEL_PAYMENT_FLOW_CUSTOM tag. 
//! This tag contains a \ref T_KERNEL_TRANSACTION_FLOW_CUSTOM structure.
//! The VisaWave kernel will call the application for customisation after the step to customise has been executed.
//!
//! Here is an example to correctly format the \ref TAG_KERNEL_PAYMENT_FLOW_CUSTOM tag for customisation :
//! \code
//! #define SERVICE_CUSTOM_KERNEL		0x0999      // Indicates the service to call for customisation
//!                                                 // This service shall be declared by the application to be called for customisation.
//! 
//! T_KERNEL_TRANSACTION_FLOW_CUSTOM sTransactionFlowCustom; // Structure containing the customisation information
//! object_info_t ObjectInfo; // To get my application identifier
//! int cr;
//! 
//! // Get my application identifier
//! ObjectGetInfo(OBJECT_TYPE_APPLI, ApplicationGetCurrent(), &ObjectInfo);
//! 
//! // Fill the structure with my application type and my service id to call for customisation
//! sTransactionFlowCustom.usApplicationType = ObjectInfo.application_type;
//! sTransactionFlowCustom.usServiceId = SERVICE_CUSTOM_KERNEL;
//! 
//! // Indicates the transaction steps to be customised
//! ADD_STEP_CUSTOM(STEP_VISAWAVE_REMOVE_CARD, sTransactionFlowCustom.pucStepCustom); // To do GUI when card has been read
//! ADD_STEP_CUSTOM(STEP_VISAWAVE_GET_CERTIFICATE, sTransactionFlowCustom.pucStepCustom); // To provide the CA key data for ODA
//! 
//! // Add the structure into the shared buffer to be sent to the VisaWave kernel to perform the transaction
//! cr = GTL_SharedExchange_AddTag(pDataStruct, TAG_KERNEL_PAYMENT_FLOW_CUSTOM, sizeof(T_TRANSACTION_FLOW_CUSTOM), (const unsigned char *)&sTransactionFlowCustom);
//! if (cr != STATUS_SHARED_EXCHANGE_OK)
//! {
//! 	// An error occurred when adding the tag in the shared buffer
//! 	// ...
//! }
//! 
//! // Other processing to prepare data for VisaWave transaction
//! // ...
//! 
//! // Call the VisaWave kernel to perform the transaction (VisaWave_DoTransaction() function) with the shared buffer containing all the necessary data 
//! // To perform the transaction, including TAG_KERNEL_PAYMENT_FLOW_CUSTOM tag.
//! // ...
//! \endcode
//! 
//! \note As described in the example before, it is strongly recommended to customise the following VisaWave transaction steps :
//!	- \ref STEP_VISAWAVE_REMOVE_CARD to indicate the card has been read and can be removed for a Wave 2 transaction.
//! - \ref STEP_VISAWAVE_GET_CERTIFICATE is mandatory for a VisaWave transaction as it allows the custom application to provide to 
//!	the VisaWave kernel all the certificate data to perform Offline Data Authentication.
//! 
//! 
//! <b>How to perform the customisation ?</b><br>
//! When the \ref TAG_KERNEL_PAYMENT_FLOW_CUSTOM tag is provided (with all the correct information and if the application type and service identifier are correct),
//! the VisaWave kernel will call you back for customisation.
//! 
//! \note For every customised step :
//!	- It is mandatory to clear data provided by the kernel from the shared buffer (after having read the necessary data provided by the kernel of course).
//! - It is mandatory to return \ref KERNEL_STATUS_CONTINUE to the customisation service.
//!
//! The function to be called when the customisation service is called by the VisaWave kernel shall have the following format :
//! \code
//! static int custom_kernel_ (unsigned int nSize, void * pData);
//! \endcode
//!
//! Declare the customisation service in the application :
//! \code
//! static service_desc_t Services[] = {
//! 	// ...
//! 	{ 0, SERVICE_CUSTOM_KERNEL, (SAP)custom_kernel_, SERVICES_DEFAULT_PRIORITY },
//! 	// ...
//! };
//! \endcode
//!
//! Here is an example about how to manage the customisation itself :
//! \code
//! // Function called when customisation service is called
//! static int custom_kernel_ (unsigned int nSize, void * pData)
//! {
//! 	int nResult, cr;
//! 	int nPosition;
//! 	unsigned char ucStepId;
//! 	unsigned long ulReadLength;
//! 	unsigned char * pReadValue = NULL;
//! 	T_SERVICE_CALL_SHARED_EXCHANGE_STRUCT * pSharedStruct;
//! 	T_SHARED_DATA_STRUCT * pDataStuct;
//! 
//! 	(void) nSize;
//! 	
//! 	// It is mandatory to always return KERNEL_STATUS_CONTINUE for every customisation steps
//! 	nResult = KERNEL_STATUS_CONTINUE;
//! 
//! 	// The "pData" variable contain the shared buffer address
//! 	pSharedStruct = (T_SERVICE_CALL_SHARED_EXCHANGE_STRUCT *)pData;
//! 	pDataStuct = pSharedStruct->pDataStruct;
//! 
//! 	// Retrieve the step to be customised
//! 	nPosition = SHARED_EXCHANGE_POSITION_NULL;
//! 	cr = GTL_SharedExchange_FindNext (pDataStuct, &nPosition, TAG_KERNEL_CUSTOM_STEP, &ulReadLength, (const unsigned char **)&pReadValue);
//!		
//! 	if (cr != STATUS_SHARED_EXCHANGE_OK)
//! 	{
//! 		// No provided kernel step, so continue the transaction
//! 		nResult = KERNEL_STATUS_CONTINUE;
//! 	}
//! 	else
//! 	{
//! 		// Get the customisation step identifier
//!			ucStepId = pReadValue[0];
//!			
//! 		switch(ucStepId)
//! 		{
//! 		case (STEP_VISAWAVE_REMOVE_CARD):
//! 			// Card can be remove, do GUI
//! 			// ...
//! 			// Clear the shared buffer before returning to the kernel
//! 			GTL_SharedExchange_ClearEx (pDataStuct, FALSE);
//! 			break;
//! 		case (STEP_VISAWAVE_GET_CERTIFICATE):
//! 			// Get the certificate depending on the other provided data
//! 			// Clear the shared buffer before returning to the kernel
//! 			GTL_SharedExchange_ClearEx (pDataStuct, FALSE);
//! 			// ... and add output data if necessary
//! 			break;
//! 		default:
//! 			break;
//! 		}
//! 	}
//! 
//! 	return (nResult);
//! }
//! \endcode
//! 
//! 
//! <b>Which data are provided to custom for customisation ?</b><br>
//! By default, some data are provided to the custom on each step to be customised. By default, the following data are provided :
//!	- \ref TAG_KERNEL_CUSTOM_STEP indicating the step identifier.
//!	- \ref TAG_EMV_LANGUAGE_PREFERENCE indicating the list of supported language by the card (if present). It may help to correctly do GUI if necessary, with the correct language.
//!	- \ref TAG_KERNEL_SELECTED_PREFERED_LANGUAGE indicating the selected language during the language selection (if not present, default language shall be used). It may help to correctly do GUI if necessary, with the correct language.
//! 
//! Some specific additional data are sent depending on the customisation step :
//!	- \ref STEP_VISAWAVE_GET_CERTIFICATE step :
//!		- Additional data provided by the VisaWave kernel :
//!			- \ref TAG_EMV_DF_NAME to identify the RID to get the certificate.
//!			- \ref TAG_EMV_CA_PUBLIC_KEY_INDEX_CARD indicating the CA index (provided by the card).
//!		- Data to be provided to the kernel (output) :
//!			- \ref TAG_EMV_INT_CAPK_MODULUS containing the CA public key modulus.
//!			- \ref TAG_EMV_INT_CAPK_EXPONENT containing the CA public key exponent.
//! @}



//! \addtogroup VisaWaveProprietaryTags
//! @{
//! The VisaWave kernel allows you to define a certain number of proprietary tags. It allows answering some specific field needs.
//! This section describes how to define these tags to make them known by the VisaWave kernel.
//! 
//! The proprietary tags are defined using the \ref TAG_KERNEL_PROPRIETARY_TAGS tag. When this tag is sent to the VisaWave kernel, 
//! this one create a proprietary database in which will be stored all the defined tags.
//! The \ref TAG_KERNEL_PROPRIETARY_TAGS tag is a list of \ref T_TI_TAG_INFO structures (see GTL documentation for more information). 
//! All the T_TI_TAG_INFO structures shall be stored using a tag ascendant order (if not, proprietary database will not correctly work).
//!
//! Here is an example of how to format the \ref TAG_KERNEL_PROPRIETARY_TAGS tag :
//! \code
//! int cr;
//! T_TI_TAG_INFO * pProprietaryTags[] = 
//! {
//! //  Tag,        Min    Max     Source               Format            Length type       Single or multiple    RFU
//! 	{0xDF01,     2,     2,     {TAG_SOURCE_ICC,      TAG_FORMAT_B,     LENGTH_RANGE,     OCCURENCE_SINGLE,     OPTIONS_RFU},  // Information for tag DF01 (length is 2 bytes, card data with binary format).
//! 	{0xDF02,     1,     255,   {TAG_SOURCE_TERMINAL, TAG_FORMAT_N,     LENGTH_RANGE,     OCCURENCE_SINGLE,     OPTIONS_RFU},  // Information for tag DF02 (length is in [1;255], terminal data with numeric format.
//! 	{0xDF03,     1,     5,     {TAG_SOURCE_ICC,      TAG_FORMAT_B,     LENGTH_EXCLUSIVE, OCCURENCE_SINGLE,     OPTIONS_RFU}   // Information for tag DF03 (length is either 1 or 5, card data with binary format.
//! };
//! 
//! // We consider that pDataStruct is the shared buffer used to send data to the VisaWave kernel
//! cr = GTL_SharedExchange_AddTag (pDataStruct, TAG_KERNEL_PROPRIETARY_TAGS, sizeof(pProprietaryTags), pProprietaryTags);
//! if (cr != STATUS_SHARED_EXCHANGE_OK)
//! {
//! 	// An error occurred
//! 	// ...
//! }
//!
//! // When performing the transaction, tags DF01, DF02 and DF03 will be known by the VisaWave kernel, and they will be stored ...
//! // ...
//! 
//! \endcode
//! 
//! \note This tag (if necessary) shall be sent to the VisaWave kernel on the \ref VisaWave_DoTransaction() function. As all other tags, this 
//! one is not persistent. It means it shall be sent on every transaction where the proprietary tags are necessary.
//! @}
