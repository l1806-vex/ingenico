#*******************************************************************************
#* %MAKEFILE_FILE_NAME%
#*------------------------------------------------------------------------------
#* Makefile used to generate the Shared Library (GNU ARM format).
#* This file was automatically generated by IngeDev. Please, do not edit!
#*******************************************************************************

#-------------------------------------------------------------------------------
# General constants
#-------------------------------------------------------------------------------
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)

#-------------------------------------------------------------------------------
# Project and file names
#-------------------------------------------------------------------------------
# Project name
PROJECT_NAME    := %PROJECT_NAME%
# Compiler version
COMPILER_VERSION	:= %COMPILER_VERSION%
#path compiler 
PATH_COMPILER       :=%PATH_COMPILER%

# Configuration name
CFG_NAME        := %CONFIG_NAME%
# Target file name (without extension)
TRG_FILE_NAME   := %TARGET_FILE_NAME%

<<if hasAdditionalMakefilesFilter
#-------------------------------------------------------------------------------
# Include additional makefiles
#-------------------------------------------------------------------------------
%ADDITIONAL_MK_FILES%
<<endif

#-------------------------------------------------------------------------------
# Directories
#-------------------------------------------------------------------------------
# Binaries directory
BIN_DIR         := %BIN_DIR%
# Object directory
OBJ_DIR         := %OBJ_DIR%
# Build files directory
BUILD_FILES_DIR := %BUILD_FILES_DIR%

#-------------------------------------------------------------------------------
# Input files path for the current configuration
#-------------------------------------------------------------------------------
# Build files path
BUILD_FILES_PATH:= $(BUILD_FILES_DIR)/$(CFG_NAME)

#-------------------------------------------------------------------------------
# Output files path for the current configuration
#-------------------------------------------------------------------------------
# Object files path
OBJ_PATH        := $(OBJ_DIR)/$(CFG_NAME)
# Binary files path
BIN_PATH        := $(BIN_DIR)/$(CFG_NAME)

#-------------------------------------------------------------------------------
# Compiler, linker, assembler, ...
#-------------------------------------------------------------------------------
<<if arm-ingenico-linux-gnueabi
# Gnu Compiler executable
CC              := arm-ingenico-linux-gnueabi-gcc.exe
# Gnu Assembler executable
AS              := arm-ingenico-linux-gnueabi-as.exe
# Gnu Linker executable
LD              := arm-ingenico-linux-gnueabi-ld.exe
# Gnu binary file transforming executable
OBJ_COPY        := arm-ingenico-linux-gnueabi-objcopy.exe
# Gnu binary sections size executable
SIZE            := arm-ingenico-linux-gnueabi-size.exe
# Gnu binary Obj Dump executable
OBJ_DUMP        := arm-ingenico-linux-gnueabi-objdump.exe
<<else
# Gnu Compiler executable
CC              := arm-elf-gcc.exe
# Gnu Assembler executable
AS              := arm-elf-as.exe
# Gnu Linker executable
LD              := arm-elf-ld.exe
# Gnu binary file transforming executable
OBJ_COPY        := arm-elf-objcopy.exe
# Gnu binary sections size executable
SIZE            := arm-elf-size.exe
# Gnu binary Obj Dump executable
OBJ_DUMP        := arm-elf-objdump.exe
<<endif

#-------------------------------------------------------------------------------
# Gnu Win32 tools
#-------------------------------------------------------------------------------
# Remove tool
RM              := rm.exe -fr
# Make directory tool
MKDIR           := mkdir.exe -p
# Copy tool
CP              := cp.exe
# Printf tool
PRINTF          := printf.exe

#-------------------------------------------------------------------------------
# Includes path used in compilation process
#-------------------------------------------------------------------------------
INCLUDES_PATH   := \
<<if hasSystemIncsFilter
%SYSTEM_INCLUDES%
<<endif
<<if hasUserIncsFilter
%USER_INCLUDES%
<<endif
<<if hasPackagesIncsFilter
%PACKAGES_INCLUDES%
<<endif

<<if hasUserAsmIncsFilter
#-------------------------------------------------------------------------------
# Includes path used in assembler process
#-------------------------------------------------------------------------------
INCLUDES_ASM_PATH   := \
%USER_AS_INCLUDES%
<<endif

#-------------------------------------------------------------------------------
# Libraries to be included during link operation
#-------------------------------------------------------------------------------
LIBS            := \
<<if hasSimpleLibsFilter
%SIMPLE_LIBS%
<<endif
<<if hasImportedLibsFilter
%IMPORTED_LIBS%
<<endif
<<if hasProjectLibsFilter
%PROJECT_LIBS%
<<endif
<<if hasPackagesLibsFilter
%PACKAGES_LIBS%
<<endif

#-------------------------------------------------------------------------------
# System libraries path to be included during link operation
#-------------------------------------------------------------------------------
SYSTEM_LIBS_PATH     := \
%SYSTEM_LIBS_PATH%

#-------------------------------------------------------------------------------
# System libraries to be included during link operation
#-------------------------------------------------------------------------------
SYSTEM_LIBS     := \
%SYSTEM_LIBS%

#-------------------------------------------------------------------------------
# Compilation and link input files
#-------------------------------------------------------------------------------
# Mapping file location (used during link process)
<<if hasMappingDef
MAP_DEF_LOCATION:= %MAP_DEF_FILE%
<<endif

#-------------------------------------------------------------------------------
# Result output files
#-------------------------------------------------------------------------------
# Binary file
BINARY_FILE     := $(BIN_PATH)/$(TRG_FILE_NAME).T3L

#-------------------------------------------------------------------------------
# Result Listing files
#-------------------------------------------------------------------------------
# Binary file
LST_FILE     := $(OBJ_PATH)/$(TRG_FILE_NAME).lst

#-------------------------------------------------------------------------------
# Intermediate files
#-------------------------------------------------------------------------------
# Result map file location
INTER_MAP_FILE  := $(OBJ_PATH)/$(TRG_FILE_NAME).map
# AXF file location
INTER_AXF_FILE  := $(OBJ_PATH)/$(TRG_FILE_NAME).axf
# SIZE file location
INTER_SIZE_FILE  := $(OBJ_PATH)/$(TRG_FILE_NAME).siz

#-------------------------------------------------------------------------------
# Default compiler, linker, assembler options
#-------------------------------------------------------------------------------
# Default compiler options
CC_DEF_OPTS     := %DEFAULT_CC_OPTIONS%
# Default assembler options
AS_DEF_OPTS     := %DEFAULT_AS_OPTIONS%
# Default linker options
LD_DEF_OPTS     := %DEFAULT_LD_OPTIONS%
# Default linker options
OD_DEF_OPTS     := %DEFAULT_OD_OPTIONS%

#-------------------------------------------------------------------------------
# Specific compiler, linker, assembler options
#-------------------------------------------------------------------------------
# Specific compiler options
CC_SPEC_OPTS    := %USER_CC_OPTIONS% %DEFAULT_DEFINE%
<<if hasPackagesDefinesFilter
CC_SPEC_OPTS    += %PACKAGES_DEFINES%
<<endif
CC_SPEC_OPTS    += %USER_DEFINES% $(INCLUDES_PATH)
# Specific assembler options
AS_SPEC_OPTS    := %USER_AS_OPTIONS% %DEFAULT_AS_DEFINE%
<<if hasPackagesDefinesFilter
AS_SPEC_OPTS    += %PACKAGES_AS_DEFINES%
<<endif
<<if hasUserAsmIncsFilter
AS_SPEC_OPTS    += %USER_AS_DEFINES% $(INCLUDES_ASM_PATH)  
<<else
AS_SPEC_OPTS    += %USER_AS_DEFINES% $(INCLUDES_PATH)
<<endif
# Specific linker options
LD_SPEC_OPTS    := %USER_LD_OPTIONS%

#-------------------------------------------------------------------------------
# Compiler, linker, assembler options
# default + specific options
#-------------------------------------------------------------------------------
# Compiler options
CC_OPTS         := $(CC_DEF_OPTS) $(CC_SPEC_OPTS)
# Assembler options
AS_OPTS         := $(AS_DEF_OPTS) $(AS_SPEC_OPTS)
# Linker options
LD_OPTS         := $(LD_DEF_OPTS) $(LD_SPEC_OPTS)
#ObjDump options
OD_OPTS         := $(OD_DEF_OPTS) 

#-------------------------------------------------------------------------------
# SRC_OBJS is the list of the project object files
#-------------------------------------------------------------------------------
SRC_OBJS        := \
%USER_OBJECTS%

#-------------------------------------------------------------------------------
# Dependencies
#-------------------------------------------------------------------------------
DEPENDENCIES    := \
$(BUILD_FILES_PATH)/%MAKEFILE_FILE_NAME%

#===============================================================================
# Rule to make the project
#===============================================================================
#-------------------------------------------------------------------------------
# Rule for the binary files generation
#-------------------------------------------------------------------------------


#===============================================================================
# Rule for the link process
#===============================================================================

#-------------------------------------------------------------------------------
# Rule for the axf file generation
#-------------------------------------------------------------------------------
<<if hasMappingDef
$(INTER_AXF_FILE): $(MAP_DEF_LOCATION) $(SRC_OBJS) $(LIBS)
<<else
$(INTER_AXF_FILE): $(SRC_OBJS) $(LIBS)
<<endif
	@$(PRINTF) "'$@' link in progress...\n"
	$(LD) -shared --soname ./$(TRG_FILE_NAME).T3L $(LD_OPTS)  -o $@ $(SRC_OBJS) $(LIBS) $(SYSTEM_LIBS_PATH) $(SYSTEM_LIBS)

#-------------------------------------------------------------------------------
# Rule for the elf file generation
#-------------------------------------------------------------------------------
$(BINARY_FILE): $(INTER_AXF_FILE) $(LST_FILE)
	$(SIZE) -A $< > $(INTER_SIZE_FILE)
	$(CP) $(INTER_AXF_FILE) $@
	@$(PRINTF) "'$@' shared library file generated.\n"

#===============================================================================
# Rule for the .lst Generation
#===============================================================================
$(LST_FILE): $(INTER_AXF_FILE)
	$(OBJ_DUMP) $(OD_OPTS) $<  > $@
	@$(PRINTF) "'$@' lst file generated.\n"

#===============================================================================
# Rule for the compilation process
#===============================================================================
%COMPILATION_RULES%
<<if hasProjectLibsFilter
#===============================================================================
# Rule use to call dependent project makefiles for build or clean operation
#===============================================================================
.PHONY: callProjectMakefileDependencies
callProjectMakefileDependencies:
%DEPENDENT_PROJECT_MAKEFILES_CALL_RULES%
<<endif
#===============================================================================
# Rule for project name and configuration name display
#===============================================================================
.PHONY: displayInfo
displayInfo:
	@$(PRINTF) "                                     *-*-*\n"
	@$(PRINTF) "--- Project '$(PROJECT_NAME)', Configuration '$(CFG_NAME)', Compiler '$(COMPILER_VERSION)' ---\n"

#===============================================================================
# Rule for build target progress info display
#===============================================================================
.PHONY: displayBuildInProgress
displayBuildInProgress:
	@$(PRINTF) "Build in progress...\n"

#===============================================================================
# Rule for output directories creation
#===============================================================================
.PHONY: createOutputDirs
createOutputDirs:
	@$(MKDIR) "$(OBJ_PATH)"
	@$(MKDIR) "$(BIN_PATH)"

#===============================================================================
# Make build rule
#===============================================================================
.PHONY: build
<<if hasProjectLibsFilter
build: callProjectMakefileDependencies displayInfo displayBuildInProgress createOutputDirs $(BINARY_FILE)
<<else
build: displayInfo createOutputDirs displayBuildInProgress $(BINARY_FILE)
<<endif
	@$(PRINTF) "done!\n"

#===============================================================================
# Make clean rule
#===============================================================================
.PHONY: clean
<<if hasProjectLibsFilter
clean: callProjectMakefileDependencies displayInfo
<<else
clean: displayInfo
<<endif
	@$(PRINTF) "deleting intermediate files...\n"
	@$(RM) "$(BINARY_FILE)"
ifneq "$(wildcard $(OBJ_PATH)/*.*)" ""
	@$(RM) "$(OBJ_PATH)/*.*"
endif
	@$(PRINTF) "done!\n"
