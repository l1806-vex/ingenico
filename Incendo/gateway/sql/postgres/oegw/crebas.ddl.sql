\connect oegw oe
/*==============================================================*/
/* Table: OEGW_CLIENT                                           */
/*==============================================================*/
--DROP TABLE IF EXISTS OEGW_CLIENT CASCADE;
CREATE TABLE OEGW_CLIENT (
  ID                    BIGINT          NOT NULL,--SERIAL with explicit SEQUENCE
  ITID                  VARCHAR(32)     NOT NULL,
  INITIAL_ITID          VARCHAR(32)     NOT NULL,
  CLIENTID_EXT          INT,
  MERCHANT              VARCHAR(50),
  SERIAL_NMB            VARCHAR(50),
  PART_NMB              VARCHAR(20),
  PASSWD                VARCHAR(32),
  PASSWD_ADMIN_RESET    VARCHAR(32),
  STATUS                CHAR(1)         NOT NULL,
  STATUS_DATE           TIMESTAMP,
  EFFECT_DATE           TIMESTAMP,
  PREV_STATUS           CHAR(1),
  LAST_CONN             BIGINT          DEFAULT 0,
  PIN                   VARCHAR(255)     NOT NULL,
  VALID_DATE            TIMESTAMP       NOT NULL,
  PREDECESSOR_ITID      VARCHAR(32),
  SUCCESSOR_ITID        VARCHAR(32),
  IDLE			VARCHAR(255),
  INIT_ATTEMPT          INT             NOT NULL DEFAULT 0,
  SYNCH                 CHAR(1)         NOT NULL DEFAULT 'Y',
  MODEL                 VARCHAR(32)  NOT NULL DEFAULT 'other',
  BROWSER               VARCHAR(32)  NOT NULL DEFAULT 'v31',
  SCREENTYPE            VARCHAR(32)  NOT NULL DEFAULT 'uc32color',
  RESOLUTION            VARCHAR(32),
  MAGCARD               BOOLEAN  NOT NULL DEFAULT true,
  ICCEMV                BOOLEAN  NOT NULL DEFAULT true,
  CLESS                 BOOLEAN  NOT NULL DEFAULT false,
  PINPAD                BOOLEAN  NOT NULL DEFAULT false,
  TOUCH                 BOOLEAN  NOT NULL DEFAULT false,
  PRINTER               BOOLEAN  NOT NULL DEFAULT true
);

DROP SEQUENCE IF EXISTS OEGWCL_SEQ;
CREATE SEQUENCE OEGWCL_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_CLIENT.ID;
ALTER TABLE OEGW_CLIENT
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWCL_SEQ');

ALTER TABLE OEGW_CLIENT
        ADD CONSTRAINT OEGW_CLIENT_PK
                PRIMARY KEY (ID);

CREATE UNIQUE INDEX OEGW_CLIENT_ITID ON OEGW_CLIENT(ITID);
CREATE INDEX OEGW_CLIENT_ITID2 ON OEGW_CLIENT(INITIAL_ITID);

COMMENT ON COLUMN OEGW_CLIENT.ITID IS 'Ingenico Terminal Identification Number.';
COMMENT ON COLUMN OEGW_CLIENT.INITIAL_ITID IS 'Initial ITID.';
COMMENT ON COLUMN OEGW_CLIENT.CLIENTID_EXT IS 'External Client ID';
COMMENT ON COLUMN OEGW_CLIENT.SERIAL_NMB IS 'Terminal Serial Number.';
COMMENT ON COLUMN OEGW_CLIENT.PART_NMB IS 'Terminal Part Number.';
COMMENT ON COLUMN OEGW_CLIENT.PASSWD IS 'Terminal password.';
COMMENT ON COLUMN OEGW_CLIENT.PASSWD_ADMIN_RESET IS 'Terminal Admin password when changed on estate management page.';
COMMENT ON COLUMN OEGW_CLIENT.STATUS IS 'Terminal status - "A" active, "S" suspended, "O" swapped.';
COMMENT ON COLUMN OEGW_CLIENT.STATUS_DATE IS 'Date of last status change.';
COMMENT ON COLUMN OEGW_CLIENT.PREV_STATUS IS 'Previous status.';
COMMENT ON COLUMN OEGW_CLIENT.LAST_CONN IS 'Last connection date.';
COMMENT ON COLUMN OEGW_CLIENT.PIN IS 'Terminal PIN.';
COMMENT ON COLUMN OEGW_CLIENT.VALID_DATE IS 'Valid date.';
COMMENT ON COLUMN OEGW_CLIENT.PREDECESSOR_ITID IS 'ITID of swapped out terminal if this terminal substitutes a remoded terminal.';
COMMENT ON COLUMN OEGW_CLIENT.SUCCESSOR_ITID IS 'ITID of new terminal that substitutes this terminal in case it is swapped out.';
COMMENT ON COLUMN OEGW_CLIENT.INIT_ATTEMPT IS 'Number of failed init attemps.';
COMMENT ON COLUMN OEGW_CLIENT.SYNCH IS 'Specifies whether or not the terminal is synchronized.';

/*==============================================================*/
/* Table: OEGW_TERMCFG                                          */
/*==============================================================*/
--DROP TABLE IF EXISTS OEGW_TERMCFG CASCADE;
CREATE TABLE OEGW_TERMCFG (
  ID            BIGINT          NOT NULL,--SERIAL with explicit SEQUENCE
  CID           BIGINT          NOT NULL,
  POST_DATE     TIMESTAMP       NOT NULL,
  TERMCFG       TEXT            NOT NULL
);

DROP SEQUENCE IF EXISTS OEGWTERMCFG_SEQ;
CREATE SEQUENCE OEGWTERMCFG_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_TERMCFG.ID;
ALTER TABLE OEGW_TERMCFG
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWTERMCFG_SEQ');

ALTER TABLE OEGW_TERMCFG
        ADD CONSTRAINT OEGW_TERMCGF_PK
                PRIMARY KEY (ID);
ALTER TABLE OEGW_TERMCFG
        ADD CONSTRAINT OEGW_TERMCGF_CLIENT_FK
                FOREIGN KEY (CID) REFERENCES OEGW_CLIENT (ID);

CREATE INDEX OEGW_TERMCFG_CID ON OEGW_TERMCFG(CID);
                
COMMENT ON COLUMN OEGW_TERMCFG.POST_DATE IS 'Date the configuration was posted.';
COMMENT ON COLUMN OEGW_TERMCFG.TERMCFG IS 'Terminal configuration dump.';

/*==============================================================*/
/* Table: OEGW_SESSION                                          */
/*==============================================================*/
--DROP TABLE IF EXISTS OEGW_SESSION CASCADE;
CREATE TABLE OEGW_SESSION (
  ID            BIGINT          NOT NULL,
  CID           BIGINT          NOT NULL,
  ITID          VARCHAR(32)     NOT NULL,
  CLIENT_IP     VARCHAR(255)    NOT NULL,
  SPEED         DOUBLE PRECISION,
  COMPRESSION   DOUBLE PRECISION,
  ISTP		INT,
  AUTH		INT,
  WEB		INT,
  PARSER	INT,
  CONVERTER	INT,
  DB	        INT,
  OEGW	        INT,
  RECEIVED      INT,
  SENT          INT,
  GETS		INT,
  POSTS		INT,
  GETS_RECEIVED	INT,
  GETS_SENT	INT,
  POSTS_RECEIVED INT,
  POSTS_SENT	INT,
  FRMW_RECEIVED	INT,
  FRMW_SENT	INT,
  REQUESTS      INT,
  STARTDATE     TIMESTAMP,
  ENDDATE       TIMESTAMP,
  DURATION      INT,
  STATUS        VARCHAR(9)      NOT NULL,
  SERVICE_NAME	VARCHAR(32)
);

ALTER TABLE OEGW_SESSION
        ADD CONSTRAINT OEGW_SESSION_PK
                PRIMARY KEY (ID);
ALTER TABLE OEGW_SESSION
        ADD CONSTRAINT OEGW_SESSION_CLIENT_FK
                FOREIGN KEY (CID) REFERENCES OEGW_CLIENT (ID);

DROP SEQUENCE IF EXISTS OEGWSESSION_SEQ;
CREATE SEQUENCE OEGWSESSION_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_SESSION.ID;
ALTER TABLE OEGW_SESSION
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWSESSION_SEQ');

CREATE INDEX OEGW_SESSION_CID ON OEGW_SESSION(CID);
CREATE INDEX OEGW_SESSION_ITID ON OEGW_SESSION(ITID);
CREATE INDEX OEGW_SESSION_STARTDATE ON OEGW_SESSION(STARTDATE);
CREATE INDEX OEGW_SESSION_STATUS ON OEGW_SESSION(STATUS);
CREATE INDEX OEGW_SESSION_ENDDATE ON OEGW_SESSION USING BTREE(ENDDATE); 


COMMENT ON COLUMN OEGW_SESSION.ITID IS 'ITID of terminal this session is attached to.';
COMMENT ON COLUMN OEGW_SESSION.CLIENT_IP IS 'Client IP adress.';
COMMENT ON COLUMN OEGW_SESSION.SPEED IS 'Connection speed - kBytes/milliseconds.';
COMMENT ON COLUMN OEGW_SESSION.COMPRESSION IS 'Compression level for the session.';
COMMENT ON COLUMN OEGW_SESSION.ISTP IS 'ISTP server processing time for the session - milliseconds.';
COMMENT ON COLUMN OEGW_SESSION.AUTH IS 'Authentication processing time for the session - milliseconds.';
COMMENT ON COLUMN OEGW_SESSION.WEB IS 'Web server processing time for the session - milliseconds.';
COMMENT ON COLUMN OEGW_SESSION.PARSER IS 'XML Parser processing time for the session - milliseconds.';
COMMENT ON COLUMN OEGW_SESSION.CONVERTER IS 'Converter use time for the session - milliseconds.';
COMMENT ON COLUMN OEGW_SESSION.DB IS 'DB connection duration.';
COMMENT ON COLUMN OEGW_SESSION.OEGW IS 'Gateway processing time for the session - milliseconds.';
COMMENT ON COLUMN OEGW_SESSION.RECEIVED IS 'Datas size received in bytes.';
COMMENT ON COLUMN OEGW_SESSION.REQUESTS IS 'Number of processed requests.';
COMMENT ON COLUMN OEGW_SESSION.STARTDATE IS 'Session start date.';
COMMENT ON COLUMN OEGW_SESSION.ENDDATE IS 'Session end date.';
COMMENT ON COLUMN OEGW_SESSION.DURATION IS 'Session duration.';
COMMENT ON COLUMN OEGW_SESSION.STATUS IS 'Session status - "on-going", "completed", "complwarn", "failed".';

/*==============================================================*/
/* Table: OEGW_REQUEST                                          */
/*==============================================================*/
--DROP TABLE IF EXISTS OEGW_REQUEST CASCADE;
CREATE TABLE OEGW_REQUEST (
  SID                   BIGINT          NOT NULL,
  RID                   INT             NOT NULL,
  STARTDATE             TIMESTAMP,
  DURATION              INT,
  URI                   VARCHAR(255),
  REQUEST               TEXT,
  REQHEADER             TEXT,
  ERROR_RESPONSE        TEXT,
  REPLY                 TEXT,
  HTTP_RESPONSE         TEXT,
  REPHEADER             TEXT,
  HTTP_REPHEADER        TEXT,
  STATUS                VARCHAR(9)      NOT NULL,
  RESULTCODE            VARCHAR(10)     NOT NULL,
  ERRORTEXT             VARCHAR(255),
  SERVICE_NAME		VARCHAR(32)
);

ALTER TABLE OEGW_REQUEST
        ADD CONSTRAINT OEGW_REQUEST_SESSION_FK
                FOREIGN KEY (SID) REFERENCES OEGW_SESSION (ID);
CREATE INDEX OEGW_REQUEST_SID ON OEGW_REQUEST(SID);
CREATE INDEX OEGW_REQUEST_RID ON OEGW_REQUEST(RID);

COMMENT ON COLUMN OEGW_REQUEST.RID IS 'Row id - Identifies this request in the list of requests of the session.';
COMMENT ON COLUMN OEGW_REQUEST.STARTDATE IS 'Request start date.';
COMMENT ON COLUMN OEGW_REQUEST.DURATION IS 'Request duration';
COMMENT ON COLUMN OEGW_REQUEST.URI IS 'Request URI.';
COMMENT ON COLUMN OEGW_REQUEST.REQUEST IS 'Request content.';
COMMENT ON COLUMN OEGW_REQUEST.REQHEADER IS 'Request header.';
COMMENT ON COLUMN OEGW_REQUEST.ERROR_RESPONSE IS 'Error response.';
COMMENT ON COLUMN OEGW_REQUEST.REPLY IS 'Reply.';
COMMENT ON COLUMN OEGW_REQUEST.HTTP_RESPONSE IS 'Http response.';
COMMENT ON COLUMN OEGW_REQUEST.REPHEADER IS 'Response header.';
COMMENT ON COLUMN OEGW_REQUEST.HTTP_REPHEADER IS 'Http response header';
COMMENT ON COLUMN OEGW_REQUEST.STATUS IS 'Request status - "completed", "complwarn", "failed".';
COMMENT ON COLUMN OEGW_REQUEST.RESULTCODE IS 'Error code.';
COMMENT ON COLUMN OEGW_REQUEST.ERRORTEXT IS 'Error message text.';

/*==============================================================*/
/* Table: OEGW_TERMLOG                                          */
/*==============================================================*/
--DROP TABLE IF EXISTS OEGW_TERMLOG CASCADE;
CREATE TABLE OEGW_TERMLOG (
  ID            BIGINT          NOT NULL,--SERIAL with explicit SEQUENCE
  ITID          VARCHAR(32)     NOT NULL,
  NAME          VARCHAR(255)    NOT NULL,
  URI           VARCHAR(255)
);

DROP SEQUENCE IF EXISTS OEGW_TERMLOG_ID_SEQ;
CREATE SEQUENCE OEGW_TERMLOG_ID_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_TERMLOG.ID;
ALTER TABLE OEGW_TERMLOG
        ALTER COLUMN ID
                SET DEFAULT NEXTVAL('OEGW_TERMLOG_ID_SEQ');

ALTER TABLE OEGW_TERMLOG
        ADD CONSTRAINT OEGW_TERMLOG_PK
                PRIMARY KEY (ID);
               
CREATE INDEX OEGW_TERMLOG_ITID ON OEGW_TERMLOG(ITID);

COMMENT ON COLUMN OEGW_TERMLOG.ITID IS 'Terminal itid.';
COMMENT ON COLUMN OEGW_TERMLOG.NAME IS 'Log name.';
COMMENT ON COLUMN OEGW_TERMLOG.URI IS 'Log URI.';

/*==============================================================*/
/* Table: OEGW_TERMLOGRECORD                                    */
/*==============================================================*/
--DROP TABLE IF EXISTS OEGW_TERMLOGRECORD CASCADE;
CREATE TABLE OEGW_TERMLOGRECORD (
  ID            BIGINT          NOT NULL,--SERIAL with explicit SEQUENCE
  LID           BIGINT          NOT NULL,
  TERM_DATE     TIMESTAMP       NOT NULL,
  MODULE        VARCHAR(255)    NOT NULL,
  SEVERITY      VARCHAR(20),
  DESCR         VARCHAR(255)
);

DROP SEQUENCE IF EXISTS OEGW_TERMLOGRECORD_ID_SEQ;
CREATE SEQUENCE OEGW_TERMLOGRECORD_ID_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_TERMLOGRECORD.ID;
ALTER TABLE OEGW_TERMLOGRECORD
        ALTER COLUMN ID
                SET DEFAULT NEXTVAL('OEGW_TERMLOGRECORD_ID_SEQ');

CREATE INDEX OEGW_TERMLOGRECORD_LID ON OEGW_TERMLOGRECORD(LID);

ALTER TABLE OEGW_TERMLOGRECORD
        ADD CONSTRAINT OEGW_TERMLOGRECORD_PK
                PRIMARY KEY (ID);
ALTER TABLE OEGW_TERMLOGRECORD
        ADD CONSTRAINT OEGW_TERMLOGRECORD_TERMLOG_FK
                FOREIGN KEY (LID) REFERENCES OEGW_TERMLOG (ID);
                
COMMENT ON COLUMN OEGW_TERMLOGRECORD.TERM_DATE IS 'Date of event on terminal.';
COMMENT ON COLUMN OEGW_TERMLOGRECORD.MODULE IS 'Module concerned by event.';
COMMENT ON COLUMN OEGW_TERMLOGRECORD.SEVERITY IS 'Event severity - "WARNING", "CRITICAL", "MAJOR".';

/*==============================================================*/
/* Table: WEB_SRV                                               */
/*==============================================================*/
--DROP TABLE IF EXISTS WEB_SRV CASCADE;
CREATE TABLE WEB_SRV (
  ID            INT             NOT NULL,
  SRV_NAME      VARCHAR(20)     NOT NULL,
  SRV_DESCR     VARCHAR(255)    NOT NULL,
  PAGE          INT             NOT NULL DEFAULT 10
);

ALTER TABLE WEB_SRV
        ADD CONSTRAINT WEB_SRV_PK
                PRIMARY KEY (ID);
                
COMMENT ON COLUMN WEB_SRV.SRV_NAME IS 'Service name.';
COMMENT ON COLUMN WEB_SRV.SRV_DESCR IS 'Service description.';
COMMENT ON COLUMN WEB_SRV.PAGE IS 'Service page size.';

/*==============================================================*/
/* Table: WEB_SRVFIELD                                          */
/*==============================================================*/
--DROP TABLE IF EXISTS WEB_SRVFIELD CASCADE;
CREATE TABLE WEB_SRVFIELD (
  SRV_ID        INT             NOT NULL,
  FIELD_ID      INT             NOT NULL,
  FIELD_NAME    VARCHAR(255)    NOT NULL,
  FIELD_DESCR   VARCHAR(255)    NOT NULL,
  CHECKED       VARCHAR(1)      NOT NULL DEFAULT 'N'
);

ALTER TABLE WEB_SRVFIELD
        ADD CONSTRAINT WEB_SRVFIELD_WEB_SRV_FK
                FOREIGN KEY (SRV_ID) REFERENCES WEB_SRV (ID);

CREATE UNIQUE INDEX WEB_SRVFIELD_INX ON WEB_SRVFIELD(SRV_ID, FIELD_ID);--name?

COMMENT ON COLUMN WEB_SRVFIELD.FIELD_ID IS 'Field id in service.';
COMMENT ON COLUMN WEB_SRVFIELD.FIELD_NAME IS 'Field name.';
COMMENT ON COLUMN WEB_SRVFIELD.FIELD_DESCR IS 'Field description.';
COMMENT ON COLUMN WEB_SRVFIELD.CHECKED IS 'Defines wether or not this field is visible in service grid.';

/*==============================================================*/
/* Table: WEB_USERS                                             */
/*==============================================================*/
--DROP TABLE IF EXISTS WEB_USERS CASCADE;
CREATE TABLE WEB_USERS (
  ID                    INT             NOT NULL,--SERIAL with explicit SEQUENCE
  NAME                  VARCHAR(255)    NOT NULL,
  LOGIN                 VARCHAR(10)     NOT NULL,
  PASSWD                VARCHAR(10)     NOT NULL,
  PASSWD_ENCRYPT        VARCHAR(100),
  PASSWD_CHANGED        TIMESTAMP,
  STATUS                CHAR--(1)?
);

DROP SEQUENCE IF EXISTS OEGWWEBUSER_SEQ;
CREATE SEQUENCE OEGWWEBUSER_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY WEB_USERS.ID;
ALTER TABLE WEB_USERS
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWWEBUSER_SEQ');

ALTER TABLE WEB_USERS
        ADD CONSTRAINT WEB_USERS_PK
                PRIMARY KEY (ID);
                
COMMENT ON COLUMN WEB_USERS.NAME IS 'User name.';
COMMENT ON COLUMN WEB_USERS.LOGIN IS 'User login.';
COMMENT ON COLUMN WEB_USERS.PASSWD IS 'User default password.';
COMMENT ON COLUMN WEB_USERS.PASSWD_ENCRYPT IS 'User password (encrypted).';
COMMENT ON COLUMN WEB_USERS.PASSWD_CHANGED IS 'Last time password changed.';
COMMENT ON COLUMN WEB_USERS.STATUS IS 'User status - "E" enabled, "L" locked.';

/*==============================================================*/
/* Table: WEB_USER_PASS_HIST                                    */
/*==============================================================*/
--DROP TABLE IF EXISTS WEB_USER_PASS_HIST CASCADE;
CREATE TABLE WEB_USER_PASS_HIST (
  ID                    INT             NOT NULL,--SERIAL with explicit SEQUENCE
  USER_ID               INT             NOT NULL,
  PASSWD_ENCRYPT        VARCHAR(100)    NOT NULL
);

DROP SEQUENCE IF EXISTS OEGWWEBUSERPASSHIST_SEQ;
CREATE SEQUENCE OEGWWEBUSERPASSHIST_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY WEB_USER_PASS_HIST.ID;
ALTER TABLE WEB_USER_PASS_HIST
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWWEBUSERPASSHIST_SEQ');

ALTER TABLE WEB_USER_PASS_HIST
        ADD CONSTRAINT WEB_USER_PASS_HIST_PK
                PRIMARY KEY (ID);
                
COMMENT ON COLUMN WEB_USER_PASS_HIST.USER_ID IS 'User id.';
COMMENT ON COLUMN WEB_USER_PASS_HIST.PASSWD_ENCRYPT IS 'One of user old passwords (encrypted).';

/*==============================================================*/
/* Table: WEB_GROUPS                                            */
/*==============================================================*/
--DROP TABLE IF EXISTS WEB_GROUPS CASCADE;
CREATE TABLE WEB_GROUPS (
  ID            INT             NOT NULL,--SERIAL with explicit SEQUENCE
  NAME          VARCHAR(20)     NOT NULL,
  DESCR         VARCHAR(255)    NOT NULL,
  ACCESS_SERVICE  CHAR(1),
  ACCESS_REPORTING  CHAR(1),
  ACCESS_CFG    CHAR(1),
  ACCESS_EMM    CHAR(1),
  ACCESS_OEGWMM CHAR(1)
);

DROP SEQUENCE IF EXISTS OEGWWEBGROUP_SEQ;
CREATE SEQUENCE OEGWWEBGROUP_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY WEB_GROUPS.ID;
ALTER TABLE WEB_GROUPS
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWWEBGROUP_SEQ');

ALTER TABLE WEB_GROUPS
        ADD CONSTRAINT WEB_GROUPS_PK
                PRIMARY KEY (ID);
                
COMMENT ON COLUMN WEB_GROUPS.NAME IS 'Group name.';
COMMENT ON COLUMN WEB_GROUPS.DESCR IS 'Group description.';
COMMENT ON COLUMN WEB_GROUPS.ACCESS_CFG IS 'Defines wether or not this group has Configuration Management module access.';
COMMENT ON COLUMN WEB_GROUPS.ACCESS_EMM IS 'Defines wether or not this group has Estate Management module access.';
COMMENT ON COLUMN WEB_GROUPS.ACCESS_OEGWMM IS 'Defines wether or not this group has Gateway Magement module access.';                


/*==============================================================*/
/* Table: WEB_USER_GROUP                                        */
/*==============================================================*/
--DROP TABLE IF EXISTS WEB_USER_GROUP CASCADE;
CREATE TABLE WEB_USER_GROUP (
  ID            INT     NOT NULL,--SERIAL with explicit SEQUENCE
  USER_ID       INT     NOT NULL,
  GROUP_ID      INT     NOT NULL
);

DROP SEQUENCE IF EXISTS OEGWWEBUSERGROUP_SEQ;
CREATE SEQUENCE OEGWWEBUSERGROUP_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY WEB_USER_GROUP.ID;
ALTER TABLE WEB_USER_GROUP
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWWEBUSERGROUP_SEQ');

ALTER TABLE WEB_USER_GROUP
        ADD CONSTRAINT WEB_USER_GROUP_PK
                PRIMARY KEY (ID);
ALTER TABLE WEB_USER_GROUP
        ADD CONSTRAINT WEB_USER_GROUP_WEB_USERS_FK
                FOREIGN KEY (USER_ID) REFERENCES WEB_USERS (ID);
ALTER TABLE WEB_USER_GROUP
        ADD CONSTRAINT WEB_USER_GROUP_WEB_GROUPS_FK
                FOREIGN KEY (GROUP_ID) REFERENCES WEB_GROUPS (ID);

/*==============================================================*/
/* Table: WEB_SRV_USER                                          */
/*==============================================================*/
--DROP TABLE IF EXISTS WEB_SRV_USER CASCADE;
CREATE TABLE WEB_SRV_USER (
  ID            INT             NOT NULL,
  SRV_ID        INT             NOT NULL,
  TYPE          INT             NOT NULL DEFAULT 1,
  USER_ID       INT             NOT NULL--FK?
);

ALTER TABLE WEB_SRV_USER
        ADD CONSTRAINT WEB_SRV_USER_PK
                PRIMARY KEY (ID);
ALTER TABLE WEB_SRV_USER
        ADD CONSTRAINT WEB_SRV_USER_WEB_SRV_FK
                FOREIGN KEY (SRV_ID) REFERENCES WEB_SRV (ID);
                
COMMENT ON COLUMN WEB_SRV_USER.TYPE IS 'Indicates which entity the service is assigned to - 1 for user, 2 for group.';
COMMENT ON COLUMN WEB_SRV_USER.USER_ID IS 'Id of the entity the service is assigned to.';

/*==============================================================*/
/* Table: OEGW_ACTIVITY_LOG                                     */
/*==============================================================*/
--DROP TABLE IF EXISTS OEGW_ACTIVITY_LOG CASCADE;
CREATE TABLE OEGW_ACTIVITY_LOG (
  ID                    BIGINT            NOT NULL,--SERIAL with explicit SEQUENCE
  EVENT_TIME            TIMESTAMP         NOT NULL,
  SESSION_ID            BIGINT,--FK?
  ACTIVITY              VARCHAR(50)       NOT NULL,
  EVENT_SEVERITY        VARCHAR(10)       NOT NULL,
  EVENT_STATUS          VARCHAR(10)       NOT NULL,
  EVENT_ORIGINATOR      VARCHAR(100)      NOT NULL,
  EVENT_ORIGINATOR_IP   VARCHAR(255)      NOT NULL,
  SOURCE_COMPONENT      VARCHAR(50)       NOT NULL,
  LOG_MESSAGE           VARCHAR(2048)     NOT NULL
);



CREATE TABLE OEGW_DB_VERSION
(
  MAIN                  INT               NOT NULL,
  MAJOR                 INT               NOT NULL,
  MINOR                 INT               NOT NULL,
  BUILD                 VARCHAR(255)      NOT NULL,
  PRIMARY KEY  (MAIN,MAJOR,MINOR,BUILD)
);


CREATE TABLE OEGW_SRVPROVIDER
(
   ID                   BIGINT          NOT NULL,
   SRVPID               VARCHAR(32)     NOT NULL,
   NAME                 VARCHAR(32)     NOT NULL,
   DESCR                VARCHAR(255),
   EMAIL                VARCHAR(255),
   PHONE                VARCHAR(32),
   ADDRESS              VARCHAR(255),
   STATUS               CHAR(1)         NOT NULL
);


DROP SEQUENCE IF EXISTS OEGWSRVP_SEQ;
CREATE SEQUENCE OEGWSRVP_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_SRVPROVIDER.ID;
ALTER TABLE OEGW_SRVPROVIDER
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWSRVP_SEQ');

ALTER TABLE OEGW_SRVPROVIDER
        ADD CONSTRAINT OEGW_SRVPROVIDER_PK
                PRIMARY KEY (ID);

CREATE UNIQUE INDEX OEGW_SRVPROVIDER_IDX ON OEGW_SRVPROVIDER(SRVPID);

CREATE TABLE OEGW_SRV
(
   ID                   BIGINT          NOT NULL,--SERIAL WITH EXPLICIT SEQUENCE
   SRVID                VARCHAR(32)     NOT NULL,
   SRVPID               BIGINT          NOT NULL,
   NAME                 VARCHAR(32)     NOT NULL,
   DESCR                VARCHAR(255),
   STATUS               CHAR(1)         NOT NULL,
   HASH_CHECK           BOOLEAN DEFAULT false,
   POST_CONV            BOOLEAN DEFAULT false,
   BASE_URI             VARCHAR(255),
   START_PAGE           VARCHAR(255),
   PRIORITY 		INT     DEFAULT   50,
   ICON 		BIGINT,

   FOREIGN KEY (SRVPID)
       REFERENCES OEGW_SRVPROVIDER(ID)
);


DROP SEQUENCE IF EXISTS OEGWSRV_SEQ;
CREATE SEQUENCE OEGWSRV_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_SRV.ID;
ALTER TABLE OEGW_SRV
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWSRV_SEQ');

ALTER TABLE OEGW_SRV
        ADD CONSTRAINT OEGW_SRV_PK
                PRIMARY KEY (ID);

ALTER TABLE OEGW_SRV
        ADD CONSTRAINT OEGW_SRV_PROVIDER_FK
                FOREIGN KEY (SRVPID) REFERENCES OEGW_SRVPROVIDER(ID);

CREATE UNIQUE INDEX OEGW_SRV_IDX ON OEGW_SRV(SRVID);
CREATE INDEX OEGW_SRV_SRVPID ON OEGW_SRV(SRVPID);
DROP TABLE IF EXISTS OEGW_SRVICON CASCADE;

CREATE TABLE OEGW_SRVICON
(
   ID                   BIGINT          NOT NULL,--SERIAL WITH EXPLICIT SEQUENCE
   SRVID                BIGINT	        NOT NULL,  
   DATA1                TEXT            NOT NULL,
   DATA1_VERSION        BIGINT             NOT NULL,
   

   FOREIGN KEY (SRVID)
       REFERENCES OEGW_SRV(ID)
);
DROP SEQUENCE IF EXISTS OEGWSRVICON_SEQ;
CREATE SEQUENCE OEGWSRVICON_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_SRVICON.ID;
ALTER TABLE OEGW_SRVICON
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWSRVICON_SEQ');

ALTER TABLE OEGW_SRVICON
        ADD CONSTRAINT OEGW_SRVICON_PK
                PRIMARY KEY (ID);

ALTER TABLE OEGW_SRVICON
        ADD CONSTRAINT OEGW_SRV_FK
                FOREIGN KEY (SRVID) REFERENCES OEGW_SRV(ID);

DROP TABLE IF EXISTS OEGW_CLIENT_HISTORY CASCADE;

CREATE TABLE OEGW_CLIENT_HISTORY (
  ID                    BIGINT          NOT NULL PRIMARY KEY,
  ITID                  VARCHAR(32)     NOT NULL,
  CLIENTID_EXT          INT,
  STATUS                VARCHAR(1)      NOT NULL,
  STATUS_DATE           TIMESTAMP
);

DROP SEQUENCE IF EXISTS OEGWCLIENTHISTORY_SEQ;
CREATE SEQUENCE OEGWCLIENTHISTORY_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_CLIENT_HISTORY.ID;

ALTER TABLE OEGW_CLIENT_HISTORY
ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWCLIENTHISTORY_SEQ');

CREATE INDEX OEGW_CLIENT_HISTORY_ITID ON OEGW_CLIENT_HISTORY(ITID);
CREATE INDEX OEGW_CLIENT_HISTORY_EXTERNAL_ID ON OEGW_CLIENT_HISTORY(CLIENTID_EXT);


DROP TABLE IF EXISTS CFGSRV_PROFILE CASCADE;
CREATE TABLE CFGSRV_PROFILE (
  ID                 BIGINT             NOT NULL,--SERIAL with explicit SEQUENCE 
  MAGCARD_ID BIGINT             NOT NULL,
  ICCEMV_ID BIGINT             NOT NULL,
  VARLIB_ID BIGINT             NOT NULL,
  HCL_ID BIGINT			NOT NULL,
  NAME VARCHAR(255)
);

DROP SEQUENCE IF EXISTS CFGSRV_PROFILE_SEQ;
CREATE SEQUENCE CFGSRV_PROFILE_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY CFGSRV_PROFILE.ID;
ALTER TABLE CFGSRV_PROFILE
        ALTER COLUMN ID SET DEFAULT NEXTVAL('CFGSRV_PROFILE_SEQ');

ALTER TABLE CFGSRV_PROFILE
        ADD CONSTRAINT CFGSRV_PROFILE_PK
                PRIMARY KEY (ID);
CREATE UNIQUE INDEX CFGSRV_PROFILE_NAME ON CFGSRV_PROFILE(NAME);


CREATE TABLE OEGW_SRVSUBSCR
(
   ID                   BIGINT          NOT NULL,--SERIAL WITH EXPLICIT SEQUENCE
   CONTRACT             VARCHAR(255)    NOT NULL,
   CID			BIGINT          NOT NULL,
   SRVID                BIGINT          NOT NULL,
   STATUS               CHAR(1)         NOT NULL,
   ITID               	VARCHAR(32)     NOT NULL,
   STARTUP              BOOLEAN      DEFAULT false,
   INHERITED            BOOLEAN      DEFAULT false,
   PREVIOUS_ITID        VARCHAR(32) default NULL,
   PROFILE		BIGINT default NULL,
   FOREIGN KEY (CID)
       REFERENCES OEGW_CLIENT(ID),
   FOREIGN KEY (SRVID)
       REFERENCES OEGW_SRV(ID),
   FOREIGN KEY (PROFILE)
       REFERENCES CFGSRV_PROFILE(ID)
);


DROP SEQUENCE IF EXISTS OEGWSRVSUBSCR_SEQ;
CREATE SEQUENCE OEGWSRVSUBSCR_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_SRVSUBSCR.ID;
ALTER TABLE OEGW_SRVSUBSCR
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWSRVSUBSCR_SEQ');

ALTER TABLE OEGW_SRVSUBSCR
        ADD CONSTRAINT OEGW_SRVSUBSCR_PK
                PRIMARY KEY (ID);

ALTER TABLE OEGW_SRVSUBSCR
        ADD CONSTRAINT OEGW_SRVSUBSCR_CLIENT_FK
                FOREIGN KEY (CID) REFERENCES OEGW_CLIENT(ID);

ALTER TABLE OEGW_SRVSUBSCR
        ADD CONSTRAINT OEGW_SRVSUBSCR_SRV_FK
                FOREIGN KEY (SRVID) REFERENCES OEGW_SRV(ID);

CREATE INDEX OEGW_SRVSUBSCR_CID ON OEGW_SRVSUBSCR(CID);
CREATE INDEX OEGW_SRVSUBSCR_ITID ON OEGW_SRVSUBSCR(ITID);

CREATE TABLE OEGW_SRVSUBSCR_HISTORY
(
   ID bigint NOT NULL,
   SRVID VARCHAR(255) NOT NULL,
   STATUS CHAR(1) NOT NULL,
   TERM_ITID VARCHAR(32) NOT NULL,
   CONTRACT VARCHAR(255) NOT NULL,
   STATUS_DATE TIMESTAMP NOT NULL
);
DROP SEQUENCE IF EXISTS OEGWSRVSUBSCRHIST_SEQ;
CREATE SEQUENCE OEGWSRVSUBSCRHIST_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_SRVSUBSCR_HISTORY.ID;
ALTER TABLE OEGW_SRVSUBSCR_HISTORY
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWSRVSUBSCRHIST_SEQ');
        
ALTER TABLE OEGW_SRVSUBSCR_HISTORY 
        ADD CONSTRAINT OEGW_SRVSUBSCR_HISTORY_pkey PRIMARY KEY (id);

CREATE TABLE OEGW_TXN
(
   ID                   BIGINT          NOT NULL,--SERIAL WITH EXPLICIT SEQUENCE
   TXN_ID               BIGINT          NOT NULL,
   TYPE                 INT    NOT NULL,
   DATE                 BIGINT          NOT NULL,
   USR_TXN_TYPE         VARCHAR(255)            ,
   ITID                 VARCHAR(255)    NOT NULL,
   SRVID                VARCHAR(255)    NOT NULL,
   STATUS               VARCHAR(255)    NOT NULL,
   AMOUNT               BIGINT         NOT NULL,
   CASHBACK             BIGINT                 ,
   CURRENCY             VARCHAR(3)      NOT NULL,
   CURRENCY_MINOR       INT             NOT NULL,
   AUTH_CODE            VARCHAR(255)            ,
   ACTION_CODE          VARCHAR(4)      
   
);


DROP SEQUENCE IF EXISTS OEGWTXN_SEQ;
CREATE SEQUENCE OEGWTXN_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_TXN.ID;
ALTER TABLE OEGW_TXN
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWTXN_SEQ');

ALTER TABLE OEGW_TXN
        ADD CONSTRAINT OEGW_TXN_PK
                PRIMARY KEY (ID);
CREATE INDEX OEGW_TXN_SRVID ON OEGW_TXN(SRVID);
CREATE INDEX OEGW_TXN_ITID ON OEGW_TXN(ITID);
CREATE INDEX OEGW_TXN_TXNID ON OEGW_TXN(TXN_ID);

COMMENT ON COLUMN OEGW_TXN.TXN_ID IS 'BUSINESS ID OF TRANSACTION.';
COMMENT ON COLUMN OEGW_TXN.TYPE IS 'TRANSACTION TYPE.';
COMMENT ON COLUMN OEGW_TXN.DATE IS 'DATE OF TRANSACTION.';
COMMENT ON COLUMN OEGW_TXN.USR_TXN_TYPE IS 'USER DEFINED TYPE FOR TRANSACTION.';
COMMENT ON COLUMN OEGW_TXN.ITID IS 'ITID OF TERMINAL THAT STARTED TRANSACTION.';
COMMENT ON COLUMN OEGW_TXN.SRVID IS 'SERVICE BUSINESS ID.';
COMMENT ON COLUMN OEGW_TXN.STATUS IS 'TRANSACTION STATUS.';
COMMENT ON COLUMN OEGW_TXN.AMOUNT IS 'AMOUNT OF TRANSACTION.';
COMMENT ON COLUMN OEGW_TXN.CASHBACK IS 'CASHBACK AMOUNT.';
COMMENT ON COLUMN OEGW_TXN.CURRENCY IS 'CURRENCY CODE.';
COMMENT ON COLUMN OEGW_TXN.CURRENCY_MINOR IS 'CURRENCY MINOR CODE.';
COMMENT ON COLUMN OEGW_TXN.AUTH_CODE IS 'AUTHORIZATION CODE.';
COMMENT ON COLUMN OEGW_TXN.ACTION_CODE IS 'ACTION CODE.';


CREATE TABLE OEGW_TXN_MSG
(
   ID                   BIGINT          NOT NULL,
   MSG_ID               BIGINT          NOT NULL,
   TXN_DB_ID            BIGINT          NOT NULL,
   TYPE                 INT    NOT NULL,
   DATE                 BIGINT          NOT NULL,
   RESEND               INT             NOT NULL    
);


DROP SEQUENCE IF EXISTS OEGWTXNMSG_SEQ;
CREATE SEQUENCE OEGWTXNMSG_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_TXN_MSG.ID;
ALTER TABLE OEGW_TXN
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWTXNMSG_SEQ');

ALTER TABLE OEGW_TXN_MSG
        ADD CONSTRAINT OEGW_TXN_MSG_PK
                PRIMARY KEY (ID);
ALTER TABLE OEGW_TXN_MSG
        ADD CONSTRAINT OEGW_TXN_MSG_OEGW_TXN_FK
                FOREIGN KEY (TXN_DB_ID) REFERENCES OEGW_TXN (ID);

CREATE INDEX OEGW_TXN_MSG_ID ON OEGW_TXN_MSG(MSG_ID);
CREATE INDEX OEGW_TXN_TXN_ID ON OEGW_TXN_MSG(TXN_DB_ID);

COMMENT ON COLUMN OEGW_TXN_MSG.MSG_ID IS 'BUSINESS ID OF MESSAGE.';
COMMENT ON COLUMN OEGW_TXN_MSG.TXN_DB_ID IS 'ID OF TRANSACTION THIS MESSAGE IS ATTACHED TO.';
COMMENT ON COLUMN OEGW_TXN_MSG.TYPE IS 'MESSAGE TYPE.';
COMMENT ON COLUMN OEGW_TXN_MSG.DATE IS 'DATE OF MESSAGE.';
COMMENT ON COLUMN OEGW_TXN_MSG.RESEND IS 'RESEND NUMBER.';

CREATE TABLE OEGW_TXN_AUTH
(
   MSG_ID               BIGINT          NOT NULL,
   AUTH_CODE            VARCHAR(255)            ,
   ACTION_CODE          VARCHAR(4)
);

ALTER TABLE OEGW_TXN_AUTH
        ADD CONSTRAINT OEGW_TXN_AUTH_MESSAGE_FK 
                FOREIGN KEY (MSG_ID) REFERENCES OEGW_TXN_MSG(ID);
CREATE INDEX OEGW_TXN_AUTH_MSG_ID ON OEGW_TXN_AUTH(MSG_ID);

COMMENT ON COLUMN OEGW_TXN_AUTH.AUTH_CODE IS 'AUTHORIZATION CODE.';
COMMENT ON COLUMN OEGW_TXN_AUTH.ACTION_CODE IS 'ACTION CODE.';

CREATE TABLE OEGW_TXN_REQ
(
   MSG_ID               BIGINT          NOT NULL,
   AMOUNT               BIGINT         NOT NULL,
   CASHBACK             BIGINT                 ,
   CURRENCY             VARCHAR(3)      NOT NULL,
   CURRENCY_MINOR       INT             NOT NULL,
   EXPIRY               VARCHAR(255)    NOT NULL,
   PAN                  VARCHAR(255)    NOT NULL,
   EXT_FIELDS           OID                    
   
);

CREATE INDEX OEGW_TXN_REQ_MSG_ID ON OEGW_TXN_REQ(MSG_ID);

ALTER TABLE OEGW_TXN_REQ
    ADD CONSTRAINT OEGW_TXN_REQ_MESSAGE_FK 
                FOREIGN KEY (MSG_ID) REFERENCES OEGW_TXN_MSG(ID);

COMMENT ON COLUMN OEGW_TXN_REQ.AMOUNT IS 'AMOUNT OF REQUEST.';
COMMENT ON COLUMN OEGW_TXN_REQ.CASHBACK IS 'CASHBACK AMOUNT.';
COMMENT ON COLUMN OEGW_TXN_REQ.CURRENCY IS 'CURRENCY CODE.';
COMMENT ON COLUMN OEGW_TXN_REQ.CURRENCY_MINOR IS 'CURRENCY MINOR CODE.';
COMMENT ON COLUMN OEGW_TXN_REQ.EXPIRY IS 'CARD EXPIRY.';
COMMENT ON COLUMN OEGW_TXN_REQ.PAN IS 'CARD PAN.';
COMMENT ON COLUMN OEGW_TXN_REQ.EXT_FIELDS IS 'EXTENDED FIELDS.';


CREATE TABLE OEGW_RECONCILIATION_TXN
(
   ID                   BIGINT          NOT NULL,
   TXN_ID               BIGINT          NOT NULL,
   TYPE                 INT             NOT NULL,
   DATE                 BIGINT          NOT NULL,
   ITID                 VARCHAR(255)    NOT NULL,
   SRVID                VARCHAR(255)    NOT NULL,
   MERCHANT             VARCHAR(255)    ,
   AMOUNT               BIGINT         NOT NULL,
   CASHBACK             BIGINT                 ,
   CURRENCY             VARCHAR(3)      NOT NULL,
   CURRENCY_MINOR       INT             NOT NULL,
   AUTH_CODE            VARCHAR(255)            ,
   ERROR_CODE           VARCHAR(255)            ,
   ERROR_MSG            VARCHAR(255)
   
);


DROP SEQUENCE IF EXISTS OEGWRECONCILIATION_SEQ;
CREATE SEQUENCE OEGWRECONCILIATION_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_RECONCILIATION_TXN.ID;
ALTER TABLE OEGW_RECONCILIATION_TXN
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWRECONCILIATION_SEQ');

ALTER TABLE OEGW_RECONCILIATION_TXN
        ADD CONSTRAINT OEGW_RECONCILIATION_TXN_PK
                PRIMARY KEY (ID);

CREATE INDEX OEGW_RECONCILIATION_TXN_ID ON OEGW_RECONCILIATION_TXN(TXN_ID);
CREATE INDEX OEGW_RECONCILIATION_TXN_ITID ON OEGW_RECONCILIATION_TXN(ITID);
CREATE INDEX OEGW_RECONCILIATION_TXN_SRVID ON OEGW_RECONCILIATION_TXN(SRVID);

COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.TXN_ID IS 'Business id of transaction.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.TYPE IS 'Transaction type.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.DATE IS 'Date of transaction.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.ITID IS 'ITID of terminal that started transaction.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.SRVID IS 'Service business name.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.MERCHANT IS 'Transaction merchant.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.AMOUNT IS 'Amount of Transaction.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.CASHBACK IS 'Cashback amount.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.CURRENCY IS 'Currency code.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.CURRENCY_MINOR IS 'Currency minor code.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.AUTH_CODE IS 'Authorization code.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.ERROR_CODE IS 'error Code.';
COMMENT ON COLUMN OEGW_RECONCILIATION_TXN.ERROR_MSG IS 'Error message.';

CREATE TABLE OEGW_TERMRESERVE (
   ID                   BIGINT        NOT NULL PRIMARY KEY,
   ITID                 VARCHAR(255)  NOT NULL ,
   LOCKED               BOOLEAN       NOT NULL
);

DROP SEQUENCE IF EXISTS OEGWTERMRESERVE_SEQ;
CREATE SEQUENCE OEGWTERMRESERVE_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_TERMRESERVE.ID;
ALTER TABLE OEGW_TERMRESERVE
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWTERMRESERVE_SEQ');

DROP SEQUENCE IF EXISTS OEGWACTIVITYLOG_SEQ;
CREATE SEQUENCE OEGWACTIVITYLOG_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_ACTIVITY_LOG.ID;
ALTER TABLE OEGW_ACTIVITY_LOG
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWACTIVITYLOG_SEQ');

ALTER TABLE OEGW_ACTIVITY_LOG
        ADD CONSTRAINT OEGW_ACTIVITY_LOG_PK
                PRIMARY KEY (ID);

CREATE INDEX OEGW_ACTIVITY_LOG_TIME ON OEGW_ACTIVITY_LOG(EVENT_TIME);
CREATE INDEX OEGW_ACTIVITY_LOG_SID ON OEGW_ACTIVITY_LOG(SESSION_ID);
CREATE INDEX OEGW_ACTIVITY_LOG_SEVERITY ON OEGW_ACTIVITY_LOG(EVENT_SEVERITY);
CREATE INDEX OEGW_ACTIVITY_LOG_STATUS ON OEGW_ACTIVITY_LOG(EVENT_STATUS);

COMMENT ON COLUMN OEGW_ACTIVITY_LOG.EVENT_TIME IS 'Event time.';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.SESSION_ID IS 'Session id if event attached to a session.';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.ACTIVITY IS 'Activity.';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.EVENT_SEVERITY IS 'Event severity - "INFO", "DEBUG", "WARNING", "ERROR".';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.EVENT_STATUS IS 'Event status - "Failed" or "Succes".';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.EVENT_ORIGINATOR IS 'Event originator.';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.EVENT_ORIGINATOR_IP IS 'Event originator IP.';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.SOURCE_COMPONENT IS 'Event source component.';
COMMENT ON COLUMN OEGW_ACTIVITY_LOG.LOG_MESSAGE IS 'Event message.';

CREATE TABLE OEGW_HASH (
   ID                   BIGINT        NOT NULL PRIMARY KEY,
   SRVID                VARCHAR(255)  NOT NULL ,
   RESOURCE             VARCHAR(255)  NOT NULL ,
   HASH                 VARCHAR(255)  NOT NULL
);

DROP SEQUENCE IF EXISTS OEGWHASH_SEQ;
CREATE SEQUENCE OEGWHASH_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_HASH.ID;
ALTER TABLE OEGW_HASH
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWHASH_SEQ');

CREATE INDEX OEGW_HASH_SRVID ON OEGW_HASH(SRVID);
CREATE INDEX OEGW_HASH_RESOURCE ON OEGW_HASH(RESOURCE);
CREATE INDEX OEGW_HASH_HASH ON OEGW_HASH(HASH);
COMMENT ON COLUMN OEGW_HASH.SRVID IS 'Service id.';
COMMENT ON COLUMN OEGW_HASH.RESOURCE IS 'Resource.';
COMMENT ON COLUMN OEGW_HASH.HASH IS 'Resource hash.';


CREATE TABLE OEGW_RESOURCE (
  ID BIGINT NOT NULL PRIMARY KEY,
  DATA TEXT NOT NULL,
  HASH VARCHAR(32) NOT NULL,
  NAME VARCHAR(255) NOT NULL
);
DROP SEQUENCE IF EXISTS OEGWRESOURCE_SEQ;
CREATE SEQUENCE OEGWRESOURCE_SEQ
        INCREMENT BY 1 START WITH 1 NO MAXVALUE
        OWNED BY OEGW_RESOURCE.ID;
ALTER TABLE OEGW_RESOURCE
        ALTER COLUMN ID SET DEFAULT NEXTVAL('OEGWRESOURCE_SEQ');

CREATE INDEX OEGW_RESOURCE_HASH ON OEGW_RESOURCE(HASH);

/***************************************************************************** 
*
* COPYRIGHT (C) 2004-2012 Ingenico
* ALL RIGHTS RESERVED
*
* Copyright in the whole and every part of this software program belongs to
* Ingenico UK.  It may not be used, sold, licensed, transferred, copied
* or reproduced in whole or in part in any manner or form other than in
* accordance with and subject to the terms of a licence from Ingenico UK
* or with the prior written consent of Ingenico UK or as
* permitted by applicable law.
* This software program contains confidential and proprietary information and
* must not be disclosed, in whole or in part, to any person or organisation
* without the prior written consent of Ingenico UK.
* Any copies or reproductions of this software program (in whole or in part)
* made by any method must also include a copy of this legend.

*****************************************************************************/
