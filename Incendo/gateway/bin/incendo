#!/bin/bash
#
# Incendo Online Gateway  Start/Stop Service
#
# chkconfig: - 80 20
# description: Incendo Online Gateway as a service.
#
# processname: oegw
#
# By: Ingenico
#
# Derived from -
# Home page: http://www.source-code.biz
# License:   GNU/LGPL (http://www.gnu.org/licenses/lgpl.html)
# Copyright 2006 Christian d'Heureuse, Inventec Informatik AG, Switzerland.
#
# Updated  2011-01-01 to accomodate AppName delivery v1.0
if [ ! -d "$IO_HOME" ]; then
   export IO_HOME="/usr/local/incendo"
fi
serviceNameLo="incendo"                         # service name with the first letter in lowercase
serviceName="Incendo"                           # service name
serviceUser="incendo"                      # OS user name for the service
serviceGroup="incendo"                    # OS group name for the service
applDir="$IO_HOME"                           # home directory of the service application
serviceLogFile="/var/log/incendo"               # log file for StdOut/StdErr
maxShutdownTime=30                           # maximum number of seconds to wait for the daemon to terminate normal
pidFile="/var/run/$serviceNameLo.pid"        # name of PID file (PID = process ID number)
javaCommand="java"                           # name of the Java launcher without the path
javaExe="`which $javaCommand`"               # file name of the Java application launcher executable
javaArgs="-cp 'lib/cfgmsrv.jar;lib/oegw.jar' -Djava.net.preferIPv4Stack=true -Doegw.log.dir='log' -jar 'lib/oegw.jar'"                                # arguments for Java launcher
javaCommandLine="$javaExe $javaArgs"         # command line to start the Java service application
javaCommandLineKeyword="oegw.jar"            # a keyword that occurs on the commandline, used to detect an already

# Makes the file $1 writable by the group $serviceGroup
function makeFileWritable {
   local filename="$1"
   touch $filename || return 1
   chgrp $serviceGroup $filename || return 1
   chmod g+w $filename || return 1
   return 0;
}

# Returns 0 if the process with PID $1 is running.
function checkProcIsRunning {
   local pid="$1"
   if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
   if [ ! -e /proc/$pid ]; then return 1; fi
   return 0;
}

# Returns 0 if the process with PID $1 is our Java service process.
function checkProcIsOurService {
   local pid="$1"
   if [ "$(ps -p $pid --no-headers -o comm)" != "$javaCommand" ]; then return 1; fi
   grep -q --binary -F "$javaCommandLineKeyword" /proc/$pid/cmdline
   if [ $? -ne 0 ]; then return 1; fi
   return 0;
}

# Returns 0 when the service is running and sets the variable $pid to the PID.
function getPID {
   if [ ! -f $pidFile ]; then return 1; fi
   pid="$(<$pidFile)"
   checkProcIsRunning $pid || return 1
   checkProcIsOurService $pid || return 1
   return 0;
}

function startProc {
   cd $applDir || return 1
   rm -f $pidFile   

   makeFileWritable $pidFile || return 1
   makeFileWritable $serviceLogFile || return 1
   cmd="$javaCommandLine >>$serviceLogFile 2>&1 & echo \$! >$pidFile"
   su -m $serviceUser -s $SHELL -c "$cmd" || return 1
   sleep 0.1

   pid="$(<$pidFile)"
   if checkProcIsRunning $pid; then :; else
      echo -ne "\n$serviceName start failed, see logfile."
      return 1
   fi
   return 0;
}

function stopProc {
   kill $pid || return 1
   for ((i=0; i<maxShutdownTime*10; i++)); do
      checkProcIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
   kill -s KILL $pid || return 1
   local killWaitTime=15
   for ((i=0; i<killWaitTime*10; i++)); do
      checkProcIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
   return 1;
}

function start {
   getPID
   if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
   echo -n "Starting $serviceName   "
   startProc
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "started PID=$pid"
   RETVAL=0
   return 0; }

function stop {
   getPID
   if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; RETVAL=0; echo ""; return 0; fi
   echo -n "Stopping $serviceName   "
   stopProc
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "stopped PID=$pid"
   RETVAL=0
   return 0; }

function status {
   echo -n "Checking for $serviceName:   "
   if getPID; then
        echo "running PID=$pid"
        RETVAL=0
   else
        echo "stopped"
        RETVAL=3
   fi
   return 0; }

function main {
   RETVAL=0
   case "$1" in
      start)                                               # starts the Java program as a Linux service
         start
         ;;
      stop)                                                # stops the Java program service
         stop
         ;;
      restart)                                             # stops and restarts the service
         stop
         start
         ;;
      status)                                              # displays the service status
         status
         ;;
      *)
         echo "Usage: $0 {start|stop|restart|status}"
         exit 1
         ;;
      esac
   exit $RETVAL
}

main $1

